<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>MANAGED DATA</title>
 <link href="http://nielsberglund.com/atom.xml" rel="self"/>
 <link href="http://nielsberglund.com/"/>
 <updated>2017-06-18T09:43:23+02:00</updated>
 <id>http://nielsberglund.com</id>
 <author>
   <name>Niels Berglund</name>
   <email></email>
 </author>

 
 <entry>
   <title>Interesting Stuff - Week 24</title>
   <link href="http://nielsberglund.com/2017/06/18/interesting-stuff-week-24/"/>
   <updated>2017-06-18T09:26:42+02:00</updated>
   <id>http://nielsberglund.com/2017/06/18/interesting-stuff---week-24</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlblog.com/blogs/adam_machanic/archive/2017/06/14/the-sql-hall-of-shame.aspx&quot;&gt;The SQL Hall of Shame&lt;/a&gt;. My old friend Adam Machanic asked for input from the SQL Server community, of &quot;useless&quot; features of SQL Server. This blog-post is the result. Some of the &quot;features&quot; submitted, I agree wholeheartedly with, others not so much. Among the ones I question are SQLCLR, as well as in-memory (Adam is on my side with those two).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Shows/Data-Exposed/TPC-H-Benchmarking-with-SQL-Server-on-Linux&quot;&gt;TPC-H Benchmarking with SQL Server on Linux&lt;/a&gt;. A Channel 9 presentation, where &lt;a href=&quot;https://blogs.msdn.microsoft.com/slavao&quot;&gt;Slava Oks&lt;/a&gt; and my compatriot Tobias Ternstrom talks about how they have managed to get awesome performance out of SQL Server on Linux.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/06/15/data-science-walkthrough-with-sql-server-2017-and-microsoft-machine-learning-services/&quot;&gt;Data Science Walkthrough with SQL Server 2017 and Microsoft Machine Learning Services&lt;/a&gt;. Back in late April (this year - 2017), when SQL Server 2017 CTP 2.0 was introduced, I wrote a &lt;a href=&quot;/2017/04/20/sql-server-2017-python-executing-from-sql/&quot;&gt;short post&lt;/a&gt; about running Python in SQL Server 2017. This post, is a complete walk through, how Python can be used in SQL Server 2017.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/06/syberia.html&quot;&gt;Syberia: A development framework for R code in production&lt;/a&gt;. The guys at &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; posts about a development framework for R: &lt;strong&gt;&lt;a href=&quot;http://syberia.io/&quot;&gt;Syberia&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tomaztsql.wordpress.com/2017/06/14/installing-r-packages-with-rxinstallpackages-in-microsoft-r-server/&quot;&gt;Installing R packages with rxInstallPackages in Microsoft R Server&lt;/a&gt;. &lt;a href=&quot;https://tomaztsql.wordpress.com&quot;&gt;Tomaz&lt;/a&gt; blogs about new functionality in &lt;a href=&quot;https://msdn.microsoft.com/en-us/microsoft-r/microsoftml-introduction&quot;&gt;MicrosoftML&lt;/a&gt;, to help with installing new packages in SQL Server R Services, as well as Microsoft R Server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/06/real-time-predictions.html&quot;&gt;Demo: Real-Time Predictions with Microsoft R Server&lt;/a&gt;. &lt;a href=&quot;https://twitter.com/revodavid&quot;&gt;David&lt;/a&gt; from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; blogs about a presentation he did at the &lt;a href=&quot;http://www.rinfinance.com/&quot;&gt;R/Finance 2017&lt;/a&gt; conference in Chicago in May. The presentation was about predicting fraud at a rate of 1 million transactions a second, using Microsoft R Server. The post links to a video of the presentation, and it also has links to the code used. It is well worth having a look at!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;For you who wonder about my &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;SQL Server R Services&lt;/a&gt; series, I should be able to publish episode VII this coming week sometime.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 23</title>
   <link href="http://nielsberglund.com/2017/06/11/interesting-stuff-week-23/"/>
   <updated>2017-06-11T19:49:02+02:00</updated>
   <id>http://nielsberglund.com/2017/06/11/interesting-stuff---week-23</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;For one reason or another I have not found that much interesting articles/posts this week. A reason for this can be that I have done some traveling the last week and not had time to read that much. Tuesday I was at the &lt;a href=&quot;https://www.microsoft.com/middleeast/azure/cloud-society/engage-data-science-roadshow.aspx&quot;&gt;Microsoft Cloud Society - Data Science Roadshow&lt;/a&gt; where I did a talk about Azure Machine Learning. It was fun doing some conference talks again, and I may do some more if there is anything interesting coming up.&lt;/p&gt;

&lt;p&gt;Anyway, a couple of things caught my eye the week past, so let's get to it.&lt;/p&gt;

&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sql-sasquatch.blogspot.co.za/2017/06/oledb-waits-in-sqlserver-checktable.html&quot;&gt;OLEDB waits in #SQLServer checktable Part I - Disappearing Act&lt;/a&gt;. This is the first &quot;episode&quot; in a series of blogposts by &lt;a href=&quot;https://twitter.com/sqL_handLe&quot;&gt;Lonny Niederstadt&lt;/a&gt; about the OLEDB wait type during checktable operations. The posts are really, really worth reading if you are interested in deep level SQL Server &quot;stuff&quot;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlskills.com/blogs/paul/increased-sos_scheduler_yield-waits-on-virtual-machines/&quot;&gt;Increased SOS_SCHEDULER_YIELD waits on virtual machines&lt;/a&gt;. More about waits. This time by Paul Randal from &lt;a href=&quot;https://www.sqlskills.com&quot;&gt;SQLskills&lt;/a&gt;, and wait stats when SQL Server is running in a virtual machine.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/distributed-systems-theory&quot;&gt;Distributed Systems Theory for Practical Engineers&lt;/a&gt;. An &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; presentation by Alvaro Videla. In this presentation Alvaro discusses asynchronous vs. synchronous distributed systems, message passing vs shared memory communication, failure detectors and leader election problems, etc. Very Cool!!!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/twitter-notifications&quot;&gt;Real-time &amp;amp; Personalized Notifications @Twitter&lt;/a&gt;. Another &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; presentation about the hybrid push/pull-based architecture adopted by the Twitter Notification platform.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/06/06/introducing-the-new-data-science-virtual-machine-on-windows-server-2016/&quot;&gt;Introducing the new Data Science Virtual Machine on Windows Server 2016&lt;/a&gt;. A blog-post introducing the Microsoft Azure Data Science Virtual Machine for Windows server 2016. There are quite a fee new interesting features in this release; Docker container support, unified support for Deep Learning on GPU or CPU-only based virtual machines, etc. Quite a lot of new exciting things to play with.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://101.datascience.community/2017/06/06/deep-learning-research-paper-lists-for-summer-2017&quot;&gt;DEEP LEARNING RESEARCH PAPER LISTS FOR SUMMER 2017&lt;/a&gt;. In the &lt;a href=&quot;http://101.datascience.community/2017/06/06/deep-learning-research-paper-lists-for-summer-2017&quot;&gt;roundup last week&lt;/a&gt; I covered a post with a list of Data Science research papers. This post is similar, but for papers about deep learning.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/tsmatsuz/2017/06/08/azure-data-lake-r-extension/&quot;&gt;Analyze your data in Azure Data Lake with R (R extension)&lt;/a&gt;. A blog-post about how you can run R code on Azure Data Lake Analytics in the cloud, so you don't have to move the data to somewhere locally.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;I can see the light in the end of the tunnel and I hope to have the next installation of my &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;SQL Server R Services&lt;/a&gt; series ready to be published soon:ish.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 22</title>
   <link href="http://nielsberglund.com/2017/06/04/interesting-stuff-week-22/"/>
   <updated>2017-06-04T20:13:28+02:00</updated>
   <id>http://nielsberglund.com/2017/06/04/interesting-stuff---week-22</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;As it was the case last week, my reading has suffered due to work as well as due to &quot;prep&quot; for the &lt;a href=&quot;https://www.microsoft.com/middleeast/azure/cloud-society/engage-data-science-roadshow.aspx&quot;&gt;Microsoft Cloud Society - Data Science Roadshow&lt;/a&gt;, at which I will speak on Tuesday (June 6) next week.&lt;/p&gt;

&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/05/29/use-with-clause-in-openjson-to-improve-parsing-performance/&quot;&gt;Use WITH clause in OPENJSON to improve parsing performance&lt;/a&gt;. Jovan Popovic (@JovanPop_MSFT), who is the JSON guru on the SQL Server team, has an interesting post how to improve performance of &lt;code&gt;OPENJSON&lt;/code&gt; by specifying what fields should be extracted from input JSON, using the &lt;code&gt;WITH&lt;/code&gt; clause.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/2017/06/01/an-update-on-me-pulumi/&quot;&gt;A Brief Update on Me (in a Word, Pulumi)&lt;/a&gt;. Well, me in the blog-title is obviously not me as in myself, but Joe Duffy - previously (among other things) &quot;Director of Engineering for Microsoft's Compiler and Language Group&quot; e.g. he knows a thing or two about &quot;stuff&quot;. He has since resigned from Microsoft and started [Pulumi]. The post was his first in a while, and as good it is to hear from him, it is infuriating to not know what Pulumi is all about :).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://proto.actor/&quot;&gt;proto actor&lt;/a&gt;. Roger Johansson, who is the father of &lt;a href=&quot;http://getakka.net/&quot;&gt;Akka.Net&lt;/a&gt; has gone and created another actor framework: proto.actor. It sounds extremely interesting, being sort of a mix between Akka.Net and &lt;a href=&quot;https://dotnet.github.io/orleans/&quot;&gt;Microsoft Orleans&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://data-artisans.com/blog/apache-flink-1-3-0-evolution-stream-processing&quot;&gt;Apache Flink® 1.3.0 and the Evolution of Stream Processing with Flink&lt;/a&gt;. Apache Flink has just released version 1.3. This post is a summary of the evolution of Flink.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://data-artisans.com/blog/blink-flink-alibaba-search&quot;&gt;Blink: How Alibaba Uses Apache Flink&lt;/a&gt;. Anoter post about Apache Flink. This is about how the worlds largest e-commerce retailer, &lt;a href=&quot;https://www.alibaba.com/&quot;&gt;Alibaba&lt;/a&gt;, utilizes Flink.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/comparison-deep-learning-frameworks&quot;&gt;Comparing Deep Learning Frameworks&lt;/a&gt;.  An &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; presentation of different types of deep learning frameworks, specifically about open source neural networks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/cognitive-toolkit/blog/2017/06/microsofts-high-performance-open-source-deep-learning-toolkit-now-generally-available/&quot;&gt;Microsoft’s high-performance, open source, deep learning toolkit is now generally available&lt;/a&gt;. Microsoft Cognitive Toolkit version 2.0 is now in full release with general availability. Some really interesting new features as well as performance benchmarks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/05/watch-rfinance-2017.html&quot;&gt;Watch presentations from R/Finance 2017&lt;/a&gt;. Blog-post from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; listing interesting talks from the [R/Finance 2017] conference earlier this year.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://101.datascience.community/2017/06/01/5-datascience-research-papers-summer-2017&quot;&gt;5 DATA SCIENCE RESEARCH PAPERS TO READ IN SUMMER 2017&lt;/a&gt;. A blog-post from &lt;a href=&quot;http://101.datascience.community/&quot;&gt;Data Science 101&lt;/a&gt; listing some interesting Data Science papers to read.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;As was the case last week, I am struggling with getting out the next installation of my &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;SQL Server R Services&lt;/a&gt; series. It is slow going but I hope to have something out within the next two weeks.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;

&lt;p&gt;Oh, and if you attend the &lt;a href=&quot;https://www.microsoft.com/middleeast/azure/cloud-society/engage-data-science-roadshow.aspx&quot;&gt;Microsoft Cloud Society - Data Science Roadshow&lt;/a&gt; conference in Johannesburg, please come by and say Hi!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 21</title>
   <link href="http://nielsberglund.com/2017/05/28/interesting-stuff-week-21/"/>
   <updated>2017-05-28T20:00:13+02:00</updated>
   <id>http://nielsberglund.com/2017/05/28/interesting-stuff---week-21</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;This week I do not have much at all. Mostly due to me not having had time to read that much, as work has &quot;reared its ugly head&quot;. I have also been (still am) &quot;prepping&quot; for the &lt;a href=&quot;https://www.microsoft.com/middleeast/azure/cloud-society/engage-data-science-roadshow.aspx&quot;&gt;Microsoft Cloud Society - Data Science Roadshow&lt;/a&gt;, where I will be speaking in Johannesburg June 6, about Microsoft Azure Machine Learning.&lt;/p&gt;

&lt;p&gt;Having said that, let's see what we have in store for this week.&lt;/p&gt;

&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/bobsql/2017/05/23/how-it-works-sql-server-deadlock-trace-flag-1222-output/&quot;&gt;How It Works: SQL Server Deadlock Trace Flag 1222 Output&lt;/a&gt;. Bob Dorr posts about deadlocks, and how trace flag 1222, can trip you up!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/scheduler-stories-oledb-the-external-wait-that-isnt-preemptive/&quot;&gt;Scheduler stories: OLEDB, the external wait that isn’t preemptive&lt;/a&gt;. &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt; continues his deep-dive into SQL Server' internals &quot;murky water&quot;, and looks at preemptive waits.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/05/23/serving-ai-with-data-recap-of-the-microsoft-ai-immersion-workshop/&quot;&gt;“Serving AI with Data” – Recap of the Microsoft AI Immersion Workshop&lt;/a&gt;. &lt;strong&gt;AI&lt;/strong&gt; is becoming the new buzz-word in the data science space, and in the beginning of May, Microsoft held an *AI Immersion Workshop. The post is a short summary of the workshop, and in it you can find key resources from the workshop.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/05/facebook-machine-translation&quot;&gt;Facebook Publishes New Neural Machine Translation Algorithm&lt;/a&gt;. A very interesting article in &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; about a new approach for neural machine translation (NMT) introduced by Facebook. Very, very interesting!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/05/microsoft-r-open-340-now-available.html&quot;&gt;Microsoft R Open 3.4.0 now available&lt;/a&gt;. My buddies over at &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; posts about the release of Microsoft R Open 3.4.0.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;Due to my workload at the moment, I am struggling with getting out the next installation of my &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;SQL Server R Services&lt;/a&gt; series. It is slow going but I hope to have something out within the next two weeks.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 20</title>
   <link href="http://nielsberglund.com/2017/05/21/interesting-stuff-week-20/"/>
   <updated>2017-05-21T20:08:21+02:00</updated>
   <id>http://nielsberglund.com/2017/05/21/interesting-stuff---week-20</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/dataplatforminsider/2017/05/17/sql-server-2017-ctp-2-1-now-available/&quot;&gt;SQL Server 2017 CTP 2.1 now available&lt;/a&gt;. The title says it all. CTP 2.1 of SQL Server 2017 has been released.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/dataplatforminsider/2017/05/17/try-new-sql-server-command-line-tools-to-generate-t-sql-scripts-and-monitor-dynamic-management-views/&quot;&gt;Try new SQL Server command line tools to generate T-SQL scripts and monitor Dynamic Management Views&lt;/a&gt;. Microsoft has released for public preview two new command line tools for SQL Server:

&lt;ul&gt;
&lt;li&gt;mssql-scripter: generate &lt;code&gt;CREATE&lt;/code&gt; and &lt;code&gt;INSERT&lt;/code&gt; T-SQL scripts for database objects in SQL Server, Azure SQL DB, and Azure SQL DW from the command line.&lt;/li&gt;
&lt;li&gt;DBFS: exposing live data from SQL Server Dynamic Management Views (DMVs) as virtual files in a virtual directory on Linux operating systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://data-artisans.com/blog/official-docker-images-apache-flink&quot;&gt;Introducing Official Docker Images for Apache Flink&lt;/a&gt;. From Flink version 1.2.1, Flink will have an official Docker image. This should make it a lot easier to get up and running with Apache Flink.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/05/Confluent-Cloud-Kafka-AWS&quot;&gt;Confluent Cloud, Apache Kafka as a Service in AWS&lt;/a&gt;. Somewhat in the same vein as the Apache Flink above, this is about deploying Kafka based solutions in Amazon Web Services through Confluent Cloud. The really interesting bit for me is that they are planning to do this for Microsoft Azure as well.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Cloud&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://techcrunch.com/2017/05/10/with-cosmos-db-microsoft-wants-to-build-one-database-to-rule-them-all/&quot;&gt;With Cosmos DB, Microsoft wants to build one database to rule them all&lt;/a&gt;. A Microsoft Build 2017, Microsoft introduced the successor to Document DB, Azure Cosmos DB. This post is Tech Crunch's take on Cosmos DB.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/a-technical-overview-of-azure-cosmos-db&quot;&gt;A technical overview of Azure Cosmos DB&lt;/a&gt;. More about Azure Cosmos DB. This post drills down in the tech behind Cosmos DB. It is very, very interesting!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/05/r-and-python-support-now-built-in-to-visual-studio-2017.html&quot;&gt;R and Python support now built in to Visual Studio 2017&lt;/a&gt;. The latest version of Visual Studio 2017 now has built-in support for programming in R and Python! It is exposed as a &quot;Data Science Workload&quot;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/05/r-in-financial-services-presentation.html&quot;&gt;R in Financial Services: Challenges and Opportunities&lt;/a&gt;. Theis blog-post from the guys at &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; links to a presentation about R in financial services from the New York R Conference earlier this year. I found the presentation really good, and picked up some useful &quot;stuff&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Shameless Self Promotion&lt;/h2&gt;

&lt;p&gt;I've been &quot;sort of&quot; productive, and managed to get two blog-posts out there (not bad if I may say so myself):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Microsoft SQL Server R Services - Internals VI&lt;/a&gt;. In this internals post I drill down, and look at the directories being created when executing an external script in SQL Serer R Services.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/20/facebook-prophet-and-microsoft-r-server/&quot;&gt;Facebook Prophet and Microsoft R Server&lt;/a&gt;. Earlier in the week there was a question on the Microsoft R Server forum, about using Facebook Prophet (time series analysis and prediction) with Microsoft R Server and SQL Server R Services. I found the question interesting and decided to test it out. This post is the result of the testing I did.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Facebook Prophet and Microsoft R Server</title>
   <link href="http://nielsberglund.com/2017/05/20/facebook-prophet-and-microsoft-r-server/"/>
   <updated>2017-05-20T11:31:37+02:00</updated>
   <id>http://nielsberglund.com/2017/05/20/facebook-prophet-and-microsoft-r-server</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Time_series&quot;&gt;Time series&lt;/a&gt; data is being used more and more in all industries, and of course we want to be able to forecast and predict future values. There are however a variety of challenges that come with producing a large number of forecasts across a variety of time series.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://research.fb.com/category/data-science/&quot;&gt;Facebook's data science team&lt;/a&gt; has worked with time series forecasting for quite a while, and recently they open-sourced an internal tool for this type of forecasting: &lt;a href=&quot;https://facebookincubator.github.io/prophet/&quot;&gt;Facebook Prophet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Recently there was a post on the Microsoft R Server forum if it was possible to use Prophet with Microsoft R Server, so I thought I'd test it out. This post covers how to use it, both from a standalone Microsoft R Server as well as SQL Server R Services.&lt;/p&gt;

&lt;!--more--&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Prophet requires an R version of 3.2.3 or greater. Unfortunately an installation of SQL Server 2016 R Services, in-database as well as standalone, uses R 3.2.2. So Prophet cannot be run on SQL Server R Services 2016, unless you upgrade the R version. In this post I am running SQL Server R Services 2017, both in-database and standalone.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, in essence Prophet is just an R packet and should be installed as such. However on Windows, Prophet requires a compiler, &lt;a href=&quot;http://mc-stan.org/&quot;&gt;Stan&lt;/a&gt;, which incurs some extra steps when installing Prophet.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The description of Stan from &lt;a href=&quot;https://en.wikipedia.org/wiki/Stan_(software)&quot;&gt;Wikipedia:&lt;/a&gt; &lt;em&gt;Stan is a probabilistic programming language for statistical inference written in C++. The Stan language is used to specify a (Bayesian) statistical model with an imperative program calculating the log probability density function.&lt;/em&gt;. So there!&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Stan &amp;amp; Dependencies&lt;/h2&gt;

&lt;p&gt;If you are on Windows, regardless if you want to use Prophet in a standalone version of Microsoft R Server or in SQL Server R Services, you need to install Stan, or rather the R version (RStan). There is also a Stan version for Python; PyStan. In addition to RStan there are some dependencies that need to be installed.&lt;/p&gt;

&lt;p&gt;There is a very good article about how to install RStan on Windows &lt;a href=&quot;https://github.com/stan-dev/rstan/wiki/Installing-RStan-on-Windows&quot;&gt;here&lt;/a&gt;, and below follows a very short summary of the article.&lt;/p&gt;

&lt;h3&gt;RTools Installation&lt;/h3&gt;

&lt;p&gt;Before you can install RStan you need to install a tool-chain that works with R, and - for this - RTools is an excellent choice.&lt;/p&gt;

&lt;p&gt;RTools can be downloaded form &lt;a href=&quot;https://cran.r-project.org/bin/windows/Rtools/&quot;&gt;here&lt;/a&gt;, and you download the version that matches your Microsoft R Server's / SQL Server R Services version. The table below is a map between various Microsoft R Servers and the corresponding R version. I have not included SQL Server 2016 R Services as the R version is not compatible with Prophet:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt; &lt;strong&gt;R Server&lt;/strong&gt;                  &lt;/th&gt;
&lt;th&gt; &lt;strong&gt;R Version&lt;/strong&gt; &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; Microsoft R Server 8.x - 9.01 &lt;/td&gt;
&lt;td&gt; 3.3.2     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-------------------------------&lt;/td&gt;
&lt;td&gt;-----------&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; Microsoft R Server 9.1        &lt;/td&gt;
&lt;td&gt; 3.3.3     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-------------------------------&lt;/td&gt;
&lt;td&gt;-----------&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; SQL Server 2017 R Services    &lt;/td&gt;
&lt;td&gt; 3.3.3     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-------------------------------&lt;/td&gt;
&lt;td&gt;-----------&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;On the machine I test this on, I have the in-database as well as the standalone R Services from SQL Server 2017, so I downloaded the &lt;code&gt;Rtools34.exe&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you have installed the stand-alone version of Microsoft R that comes with SQL Server R Services, the version of R is the same as for SQL Server R Services.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To install RTools double click the executable you just downloaded. What you need to ensure is that the &lt;code&gt;PATH&lt;/code&gt; is set properly. So during the installation process, when it comes to the dialog &lt;strong&gt;Select Additional Tasks&lt;/strong&gt; ensure that you check the check-box for &lt;em&gt;Edit the system PATH&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/prophet_rtool_install.png&quot; width=&quot;496&quot; height=&quot;384&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Edit the System Path&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After having checked the box for editing the PATH, just click through and let the install finish. After installation check that the PATH has been set. You do this by running &lt;code&gt;RTerm.exe&lt;/code&gt; and executing &lt;code&gt;Sys.getenv('PATH')&lt;/code&gt; from command prompt.&lt;/p&gt;

&lt;p&gt;Dependent on if you want to run RTools on a standalone Microsoft Windows R Server installation or in-database, you find &lt;code&gt;RTerm.exe&lt;/code&gt; at different locations. On my box the locations are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Standalone Microsoft R Server: &lt;code&gt;C:\Program Files\Microsoft SQL Server\140\R_SERVER\bin\x64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SQL Server R Services: &lt;code&gt;C:\Program Files\Microsoft SQL Server\MSSQL14.INST2K17CTP20\R_SERVICES\bin\x64&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After executing &lt;code&gt;Sys.getenv('PATH')&lt;/code&gt;, you should see something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/prophet_rtool_install_path.png&quot; width=&quot;393&quot; height=&quot;47&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;RTools Path&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can also check that &lt;code&gt;g++&lt;/code&gt; (C++ compiler) can be called: &lt;code&gt;system('g++ -v')&lt;/code&gt;. That should result in something like:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/prophet_rtool_install_g++.png&quot; width=&quot;554&quot; height=&quot;241&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Checking for g++&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;RStan Installation&lt;/h3&gt;

&lt;p&gt;OK, so after all the above is OK - we can finally install RStan. RStan is just another package, and it should be installed as any other package (like Prophet, which we will see in a bit). Whereas RTools is just installed to a shared directory on the box where R resides, RStan needs to be installed for each R instance specifically.&lt;/p&gt;

&lt;h4&gt;Standalone Microsoft R Server&lt;/h4&gt;

&lt;p&gt;To install R packages you use the function &lt;code&gt;install.packages()&lt;/code&gt;. For a standalone Microsoft R Server instance there is not much more you need to do, apart from saying where to install the package from and what to do about dependencies:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;RTerm.exe&lt;/code&gt; as admin from the location for the standalone instance (in my case: &lt;code&gt;C:\Program Files\Microsoft SQL Server\140\R_SERVER\bin\x64&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Execute the following code: &lt;code&gt;install.packages(&quot;rstan&quot;, repos = &quot;https://cloud.r-project.org/&quot;, dependencies=TRUE)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This will run for a while, click yes for any questions during installation.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When the installation has finished you can test that it has succeeded and that the tool chain works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Close down the &lt;code&gt;RTerm.exe&lt;/code&gt; terminal and re-open it (as admin).&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 1&lt;/em&gt; below.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Toolchain Test&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# create an inline function fx&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;fx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cxxfunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;integer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;numeric&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;            &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;fx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Test of RStan Installation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When executing the above, the result from &lt;code&gt;fx(2L,5)&lt;/code&gt; should be 10.&lt;/p&gt;

&lt;h4&gt;SQL Server R Services Installation&lt;/h4&gt;

&lt;p&gt;The way to install a package in SQL Server R Services is similar to the standalone installation. However you cannot install a package to any directory, it has to be installed to the default package directory for the instance, as only only one package library is allowed.&lt;/p&gt;

&lt;p&gt;The code in &lt;em&gt;Code Snippet 2&lt;/em&gt; below shows how to retrieve the default package library:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Default Package Directory&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXECUTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;           &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;         &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OutputDataSet &amp;lt;- data.frame(.libPaths());'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultLibraryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Retrieving Default Package Directory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On my machine the directory is: &lt;code&gt;C:/Program Files/Microsoft SQL Server/MSSQL14.INST2K17CTP20/R_SERVICES/library&lt;/code&gt;. So to install RStan:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;RTerm.exe&lt;/code&gt; as admin from the location for the SQL Server R Services instance (in my case: &lt;code&gt;C:\Program Files\Microsoft SQL Server\MSSQL14.INST2K17CTP20\R_SERVICES\bin\x64&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 3&lt;/em&gt; at command prompt.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;title &quot;Package Install&quot;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;pkg.dir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C:\Program Files\Microsoft SQL Server\MSSQL14.INST2K17CTP20\R_SERVICES\library&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rstan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repos&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cloud.r-project.org/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkg.dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Installing RStan on SQL Server R Services&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I ran the code in &lt;em&gt;Code Snippet 3&lt;/em&gt; on my box it ran OK, but it did not install all the dependencies as the install for the standalone installation did. I then tested the installation like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Toolchain Test SQlServer R Services&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXECUTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;           &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;         &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              library(&quot;rstan&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              fx &amp;lt;- inline::cxxfunction
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                ( signature(x = &quot;integer&quot;, y = &quot;numeric&quot; ) ,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;            &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;            res &amp;lt;-fx(2L, 5)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;            cat(paste0(&quot;Result: &quot;, res))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;            cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)'&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4&lt;/strong&gt; &lt;em&gt;Test of RStan Installation SQL Server R Services&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Initially, straight after installation, I received an error that &lt;code&gt;ggplot2&lt;/code&gt; was missing. I resorted to copying all the packages from the package library for the standalone installation (&lt;code&gt;W:\Documents\R\win-library\3.3&lt;/code&gt;) to the package library for the SQL Server R Services, and that sorted it the issue. When executing the code in &lt;em&gt;Code Snippet 4&lt;/em&gt; a second time, all was OK:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/prophet_rstan_sql_server.png&quot; width=&quot;648&quot; height=&quot;191&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Result from SQl Server R Services&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; My assumption is that when installing RStan the second time, the installation saw that I had the dependent packages installed already. However for SQL Server R Services all packages need to be installed in the default package library directory. For now it all works though.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, now when we we have the various pre-requisites installed we can install Prophet.&lt;/p&gt;

&lt;h2&gt;Prophet Installation&lt;/h2&gt;

&lt;p&gt;Compared to the installation of RStan (and its dependencies), the installation of Prophet is really straight forward. Let us start installing Prophet on a standalone Microsoft R Server instance.&lt;/p&gt;

&lt;h3&gt;Install Prophet on Microsoft R Server&lt;/h3&gt;

&lt;p&gt;As you did with RStan you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;RTerm.exe&lt;/code&gt; as admin from the location for the standalone instance (in my case: &lt;code&gt;C:\Program Files\Microsoft SQL Server\140\R_SERVER\bin\x64&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Set the package library where to install Prophet to: &lt;code&gt;lib.dir &amp;lt;- &quot;C:\\Program Files\\Microsoft SQL Server\\140\\R_SERVER\\library&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute the actual installation: install.packages(&quot;prophet&quot;, lib = lib.dir, repos = &quot;https://cloud.r-project.org/&quot;, dependencies = TRUE)&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The reason why I explicitly state where to get the package from in the code above is that I had problems with the Prophet package installing from Microsoft's R repo.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The output from the code above will be something like so (heavily redacted):&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/prophet_install_standalone.png&quot; width=&quot;650&quot; height=&quot;184&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Install Prophet Microsoft R Server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Prophet should now be installed and ready to use. Further below we'll see some examples how to use it.&lt;/p&gt;

&lt;h3&gt;Install Prophet on SQL Server 2017 R Services&lt;/h3&gt;

&lt;p&gt;The install of Prophet on SQL Server R Services does not differ much from the install on a standalone server:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;RTerm.exe&lt;/code&gt; as admin from the location for the SQL Server R Services instance (in my case: &lt;code&gt;C:\Program Files\Microsoft SQL Server\MSSQL14.INST2K17CTP20\R_SERVICES\bin\x64&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 5&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Prophet Install&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Program Files&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Microsoft SQL Server&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MSSQL14.INST2K17CTP20&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;R_SERVICES&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;library&quot;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;prophet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;https://cloud.r-project.org/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;Installation of Prophet on SQL Server 2017 R Services&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The output from the execution is the same as you see in &lt;em&gt;Figure 5&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Use Prophet&lt;/h2&gt;

&lt;p&gt;Now everything should be ready, and we should be able to use Prophet. To test it out I am &quot;shamelessly&quot; &quot;borrowing&quot; the examples from &lt;a href=&quot;https://facebookincubator.github.io/prophet/docs/quick_start.html#r-api&quot;&gt;here&lt;/a&gt; (but I will just do the bare minimum to see that it works - no plotting etc.). The data I use is also the same; the log number of views to &lt;a href=&quot;https://en.wikipedia.org/wiki/Peyton_Manning&quot;&gt;Petyon Manning’s Wikipedia page&lt;/a&gt;. The &lt;code&gt;csv&lt;/code&gt; file can be downloaded from &lt;a href=&quot;https://github.com/facebookincubator/prophet/blob/master/examples/example_wp_peyton_manning.csv&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After you have downloaded the &lt;code&gt;csv&lt;/code&gt; file you can see it has two columns: &lt;code&gt;ds&lt;/code&gt; which are dates, and &lt;code&gt;y&lt;/code&gt; which shows the number of views of his page. This is now the data we'll use to predict future hits of his page. We'll start with the standalone Microsoft R Server installation.&lt;/p&gt;

&lt;h3&gt;Test Code Microsoft R Server&lt;/h3&gt;

&lt;p&gt;For this test you can use any IDE you want, I'm using R Tools for Visual Studio 2017. So following the &lt;a href=&quot;https://facebookincubator.github.io/prophet/docs/quick_start.html#r-api&quot;&gt;example&lt;/a&gt;, this is what the code will look like:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Test&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# load prophet&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prophet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# load dplyr, needed for mutate()&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dplyr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# read in the csv data into a data frame&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read.csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'W:/nielsb-work/GitHub-Repos/prophet/
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  examples/example_wp_peyton_manning.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# convert the y variable to a natural logarithm&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# create the model&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prophet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# create a dataframe to fit a forecast into&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_future_dataframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;periods&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# do the forecast&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;forecast&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# print out some data&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forecast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ds'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yhat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yhat_lower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yhat_upper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 6:&lt;/strong&gt; &lt;em&gt;Forecasting With Prophet&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to know what the code does, look at the comments in the code block. You can also look at the &lt;a href=&quot;https://facebookincubator.github.io/prophet/docs/quick_start.html#r-api&quot;&gt;Prophet Quick Start page&lt;/a&gt; mentioned above, there they explain it quite well.&lt;/p&gt;

&lt;p&gt;Below you see the output from running the code, from the point where &lt;code&gt;forecast &amp;lt;- predict(m, future)&lt;/code&gt; was called:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Result&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forecast&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forecast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ds'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yhat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yhat_lower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yhat_upper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ds&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yhat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yhat_lower&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yhat_upper&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;m&quot;&gt;3265&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2017-01-14&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7.832611&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7.133318&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8.577273&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;m&quot;&gt;3266&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2017-01-15&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8.214427&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7.507750&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8.924990&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;m&quot;&gt;3267&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2017-01-16&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8.539490&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7.824840&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9.325312&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;m&quot;&gt;3268&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2017-01-17&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8.326945&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7.660892&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9.099628&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;m&quot;&gt;3269&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2017-01-18&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8.159623&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7.447501&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8.897813&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;m&quot;&gt;3270&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2017-01-19&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8.171545&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;7.473959&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8.911978&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 7:&lt;/strong&gt; &lt;em&gt;Result from Forecasting with Prophet&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;forecast&lt;/code&gt; object is a data frame with a column &lt;code&gt;yhat&lt;/code&gt; containing the forecast. It has additional columns for uncertainty intervals and seasonal components.&lt;/p&gt;

&lt;h3&gt;Test Code SQL Server R Services&lt;/h3&gt;

&lt;p&gt;Having done the Microsoft R Server test, let us do the test against SQL Server R Services. I want upfront say that there is an issue with running this on SQL Server R Services, whereby dates returned in the model are shown incorrectly. At the moment I am not sure why this is the case - if someone reading this knows the reason, please let me know. I do believe it may be due to some incorrect package in the SQL Server R Services installation, but I am not sure.&lt;/p&gt;

&lt;p&gt;Anyway, let's just see what it would look like running more or less the same code as in &lt;em&gt;Code Snippet 6&lt;/em&gt;, inside SQL Server R Services. Let's take the code in &lt;em&gt;Code Snippet 6&lt;/em&gt;, and enable it to run in SQL Server. You do that by encapsulation the R code inside the &lt;code&gt;@script&lt;/code&gt; parameter in &lt;code&gt;sp_execute_external_script&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Prophet in SQL Server&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXECUTE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      # load prophet
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      library(prophet)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      # load dplyr, needed for mutate()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      library(dplyr)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      # read in the csv data into a data frame
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      df &amp;lt;- read.csv(&quot;W:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;nielsb-work&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GitHub-Repos&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;prophet&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;example_wp_peyton_manning.csv&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      # convert the y variable to a natural logarithm
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      df &amp;lt;- mutate(df, y = log(y))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      # create the model
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      m &amp;lt;- prophet(df)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      # create a dataframe to fit a forecast into
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      future &amp;lt;- make_future_dataframe(m, periods = 365)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      # do the forecast
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      forecast &amp;lt;- predict(m, future)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      # output the result of the forecast
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      OutputDataSet &amp;lt;- data.frame(forecast[c(&quot;ds&quot;, &quot;yhat&quot;, &quot;yhat_lower&quot;, &quot;yhat_upper&quot;)])'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ds&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yhat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yhat_lower&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yhat_upper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 8:&lt;/strong&gt; &lt;em&gt;Executing Prophet in SQL Server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The only difference from what we see in &lt;em&gt;Code Snippet 6&lt;/em&gt;, is that we output the result as a result set. When you execute the code you will get 3270 rows back: 2905 historical, and 365 predicted. However as I said above, there seems to be something not quite right when running it in SQL Server as the dates are completely wrong, and the values are also a bit off. In &lt;em&gt;Figure 6&lt;/em&gt; below, you see the last 6 rows returned from SQL Server, compare that with the same in &lt;em&gt;Code Snippet 7&lt;/em&gt;, and you will see some differences (apart from the dates).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/prophet_result_sql_server.png&quot; width=&quot;480&quot; height=&quot;135&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;Result from SQL Server Execution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Anyway, this post was more about if you can, and if so how, run Prophet in Microsoft R Server and SQL Server R Services, which we now see we can.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Prophet can be run in both Microsoft R Server as well as SQL Server R Services.&lt;/li&gt;
&lt;li&gt;Prophet requires R 3.2.3 or above, so a standard SQL Server 2016 R installation is not going to work.&lt;/li&gt;
&lt;li&gt;There seems to be an issue when executing Prophet inside SQL Server, as dates come out completely wrong, and values are somewhat off. I'll try and find out why this is the case.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft SQL Server R Services - Internals VI</title>
   <link href="http://nielsberglund.com/2017/05/16/microsoft-sql-server-r-services-internals-vi/"/>
   <updated>2017-05-16T19:38:41+02:00</updated>
   <id>http://nielsberglund.com/2017/05/16/microsoft-sql-server-r-services---internals-vi</id>
   <content type="html">&lt;p&gt;This post is part of a series of blog-posts about Microsoft SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Microsoft SQL Server R Services - Internals III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Microsoft SQL Server R Services - Internals IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Microsoft SQL Server R Services - Internals V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Microsoft SQL Server R Services - Internals VI (this post)&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This post is the seventh post about Microsoft SQL Server R Services, and the sixth post that drills down into the internal of how it works. In this post we will look at the directories that are created when we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; we spoke about how Windows user accounts are created during installation, and together with the user account; directories named as the individual Windows accounts are created in the &lt;code&gt;c:\&amp;lt;sql_instance_path&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. These directories act as storage for files, results, objects, etc., during execution of an external script.&lt;/p&gt;

&lt;p&gt;When a user executes an external script in SQL Server, that account is being mapped to one of the 20 Windows account created, and it is under that Windows account the external part of the script is executed. Subsequently the files, etc., mentioned above, ends up in a sub-directory of the user account directory.&lt;/p&gt;

&lt;p&gt;During execution the launchpad service creates working directories (the sub-folders above) and processes. The sub-directories are created with a &lt;code&gt;Guid&lt;/code&gt; as name, and the processes will get the same name as the sub-directory. In &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; we saw an excerpt from a log- showing among other things the creation of directories and processes. Below in &lt;em&gt;Code Snippet 1&lt;/em&gt; you see a part of that file:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Log-file&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;WorkingDirectory(C:\...\MSSQLSERVER01\5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF) created (1)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;WorkingDirectory(C:\...\MSSQLSERVER01\E7AB7781-A8C7-421F-BAA0-074075B41082) created (1)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;CreateProces(C:\...\R_SERVICES\bin\x64\rterm.exe
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    --slave --no-restore --no-save
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -e &quot;library(RevoScaleR);
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    sessionDirectory &amp;lt;- 'C:\...\5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    sessionId &amp;lt;- '5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;CreateProces(C:\...\R_SERVICES\bin\x64\rterm.exe
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    --slave --no-restore --no-save
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -e &quot;library(RevoScaleR);
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    sessionDirectory &amp;lt;- 'C:\...\E7AB7781-A8C7-421F-BAA0-074075B41082';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    sessionId &amp;lt;- 'E7AB7781-A8C7-421F-BAA0-074075B41082';&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Excerpt from Creation of Processes and Directories&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice how, in &lt;em&gt;Code Snippet 1&lt;/em&gt;, the working directories are created first, followed by the processes. In the example above, two directories are created first followed by two processes. This happens for the two first directories and processes. After the two first ones, one directory will be created followed by one process, and so on, and so on. You can also see from the log how the name of the directory is used when creating the processes.&lt;/p&gt;

&lt;h2&gt;Directories&lt;/h2&gt;

&lt;p&gt;So, what is the purpose of the working directories? Well, we said in the beginning it was to store files etc., during execution of external scripts. So let us see what happens, when executing. The code we'll use in this post is similar to the code in the other posts in the series:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Code&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             pid &amp;lt;- Sys.getpid()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             d &amp;lt;- getwd()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(paste0(&quot;WorkDir: &quot;, d))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             OutputDataSet&amp;lt;-data.frame(ProcessId=pid,WorkingDir=d)'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkingDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nvarchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; Code to Execute*&lt;/p&gt;

&lt;p&gt;As you see in &lt;em&gt;Code Snippet 2&lt;/em&gt;, we retrieve both the process id, as well as the working directory, and these two variables are output in the result set. The working directory is further more printed out, in the &lt;code&gt;cat&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Let's execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt;, but before you do that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service if it is running.&lt;/li&gt;
&lt;li&gt;Delete any sub directories of the user account directories in the &lt;code&gt;C:\&amp;lt;sql_instance_path&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do NOT delete the user account directories themselves.&lt;/li&gt;
&lt;li&gt;Start the launchpad service again.&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The result of the execution looks something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_6_dir1.png&quot; width=&quot;650&quot; height=&quot;59&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Resultset from Code Execution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 1&lt;/em&gt; we see that we executed in a process with an id of: 9092, and that the reported working directory is &lt;code&gt;E0A85B09-65C6-BD28-71A6B14917E9&lt;/code&gt;. So let us then go to the account - MSSQLSERVER01 - and see what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_6_dir2.png&quot; width=&quot;303&quot; height=&quot;168&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Content of Account Directory After Execution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Strange, we see 6 different directories, but not the directory that is reported to be the working directory. So let us try to figure out what happens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Delete any sub directories of the user account directories in the &lt;code&gt;C:\&amp;lt;sql_instance_path&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do NOT delete the user account directories themselves.&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;rlauncher.config&lt;/code&gt; file in a text editor and change the value of &lt;code&gt;JOB_CLEANUP_ON_EXIT&lt;/code&gt; to 0, and save the file (you need to this as admin).&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; By setting the &lt;code&gt;JOB_CLEANUP_ON_EXIT&lt;/code&gt; to 0 we tell the launchpad service to not delete any directories etc., after we have executed (the executing process will still be torn down though). By doing this we hope that we'll be able to see something that will cast some light on this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt; and see what is returned as working directory, and compare that with the directories under the user account directory under &lt;code&gt;ExtensibilityData&lt;/code&gt;. When I executed the code on my box, the working directory name returned in the result was &lt;code&gt;5DA4E521-5A5D-4E14-B3FC-769F994A7AD3&lt;/code&gt;, and the directory structure looked like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_6_dir3.png&quot; width=&quot;385&quot; height=&quot;189&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Directory Structure Including Working Directory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, there is a directory, but if you look at the contents you will see it is empty. The other directories though have content, and looks similar to:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_6_dir_content.png&quot; width=&quot;291&quot; height=&quot;118&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Content&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you browse through the directories you will see that the content in all of them except for one (and the working directory), looks like what we see in &lt;em&gt;Figure 4&lt;/em&gt;. The one where it is different looks something like what we have in &lt;em&gt;Figure 5&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_6_dir_content_rscript.png&quot; width=&quot;351&quot; height=&quot;135&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Directory with Different Content&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 5&lt;/em&gt; we see how there is a file &lt;code&gt;&amp;lt;Guid-Value&amp;gt;.R, and how the&lt;/code&gt;stdout.txt` file has a 1kb size. In another post we'll look at the content of the directories, and what it means.&lt;/p&gt;

&lt;p&gt;However, we still haven't really figured out about the working directory, and how it is created. If you remember from &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; and &lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;IV&lt;/a&gt;, how we said that the launchpad service creates a number of directories (5+1 as default) as well as processes when an external script is executed, and after execution one process and directory is torn down. So why have I seven directories when the default settings has not changed on the SQL instance I run this on, I really should have six?&lt;/p&gt;

&lt;p&gt;We actually saw the answer to that in &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;, when we at one stage looked at the &lt;code&gt;rlauncher.log&lt;/code&gt; file and saw what is logged when executing an external script with a &lt;code&gt;TRACE_LEVEL&lt;/code&gt; of 4. Instead of going back to that post, let us repeat it here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Delete any sub directories of the user account directories in the &lt;code&gt;C:\&amp;lt;sql_instance_path&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do NOT delete the user account directories themselves.&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;rlauncher.config&lt;/code&gt; file in a text editor and change the value of &lt;code&gt;TRACE_LEVEL&lt;/code&gt; to 4, and save the file (you need to this as admin). Oh, and keep the setting of &lt;code&gt;JOB_CLEANUP_ON_EXIT&lt;/code&gt; at 0, as per above.&lt;/li&gt;
&lt;li&gt;Delete the log files in the &lt;code&gt;C:\&amp;lt;sql_instance_path&amp;gt;\MSSQL\Log\ExtensibilityLog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;li&gt;Execute the code again.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;On my box, the working directory came back as &lt;code&gt;67F7F651-8465-4F6B-B90E-0571DD84677D&lt;/code&gt;, and that directory also existed in the directory structure for the used user account, exactly as above. Then drilling down into the &lt;code&gt;rlauncher.log&lt;/code&gt; file, around the time we executed, we see this (this is heavily redacted, to make it readable):&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Log-File&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Session(67F7F651-8465-4F6B-B90E-0571DD84677D) [SqlSatellite] created.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Session(67F7F651-8465-4F6B-B90E-0571DD84677D)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    CleanupOnExit=0, Settings.JobCleanupOnExit=0
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Session 67F7F651-8465-4F6B-B90E-0571DD84677D assigned to MSSQLSERVER01 user
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;ProcessPool(MSSQLSERVER01-ss-2) with minimum processes 5 created
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;ProcessPool(MSSQLSERVER01-ss-2)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    started GrowAsyncWorker() thread 11744 [00002DE0].
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;WorkingDirectory(C:\...\MSSQLSERVER01\C23EA5B2-620C-473A-99F5-8BB37CCDA0B7)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    created (0)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;WorkingDirectory(C:\...\MSSQLSERVER01\3AEBD29C-E024-46F6-A25E-27E680AF9729)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    created (0)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;CreateProces(
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:\...\R_SERVICES\bin\x64\rterm.exe  --slave --no-restore --no-save
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -e &quot;library(RevoScaleR); sessionDirectory &amp;lt;-
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    'C:\...\MSSQLSERVER01\C23EA5B2-620C-473A-99F5-8BB37CCDA0B7';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    sessionId &amp;lt;- 'C23EA5B2-620C-473A-99F5-8BB37CCDA0B7';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    ...
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;CreateProces(
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:\...\R_SERVICES\bin\x64\rterm.exe  --slave --no-restore --no-save
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -e &quot;library(RevoScaleR); sessionDirectory &amp;lt;-
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    'C:\...\MSSQLSERVER01\3AEBD29C-E024-46F6-A25E-27E680AF9729';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    sessionId &amp;lt;- '3AEBD29C-E024-46F6-A25E-27E680AF9729';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; ...
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Session[67F7F651-8465-4F6B-B90E-0571DD84677D]
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    attached to pooled processes [3AEBD29C-E024-46F6-A25E-27E680AF9729]
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='33' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;...
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Partial Log from Executing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From &lt;em&gt;Code Snippet 3&lt;/em&gt; we see what we also saw in &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A session is created.&lt;/li&gt;
&lt;li&gt;A process pool is created.&lt;/li&gt;
&lt;li&gt;Working directories are created.&lt;/li&gt;
&lt;li&gt;Processes are created pointing to the working directories.&lt;/li&gt;
&lt;li&gt;The session created initially is being attached to one of the pooled processes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But, when looking at the session it has the same &quot;name&quot; as the working directory, and we see how the session is attached to one of the processes. So it seems that the creation of a session also creates a directory. The process that the session is attached to becomes the process the external script is executed under, and the directory created together with the session becomes the working directory.&lt;/p&gt;

&lt;p&gt;Is there any way we can see if the theory of a session-directory being created?&lt;/p&gt;

&lt;p&gt;Seeing that we haven't used WinDbg for a while, let's try and see if we can confirm what is happening. In &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;, we looked at the call chain when executing an external script, and it looked something bit like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Call Chain&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLaunchContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchServTask&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteSessionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstructSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateSatelliteJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteSessionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateNewSessionObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLaunchContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Launch&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;Rlauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MiscCalls&quot;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessForSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhysicalUserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessInternalW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;Rlauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MiscCalls&quot;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessForSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhysicalUserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessInternalW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satellite_ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcessToJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satellite_ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcessToJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcess&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;High Level Call Chain&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initially a call to &lt;code&gt;LaunchServTask&lt;/code&gt; happens.&lt;/li&gt;
&lt;li&gt;We then create a satellite session, a job object and a session object.&lt;/li&gt;
&lt;li&gt;We then come into the code path were we launch the launcher and create the RTerm processes: &lt;code&gt;launchpad!CLaunchContext::Launch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In there we do multiple calls to the launcher dll (&lt;code&gt;Rlauncher!&quot;MiscCalls&quot;&lt;/code&gt;), create the actual processes and assigns that to the job object. We initially create two processes, and one of the processes will be mapped to the session (as we saw from the log-file). This is then repeated multiple times.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;So, somewhere in the call chain in &lt;em&gt;Code Snippet 4&lt;/em&gt;, our directories are created. To try and figure out what happens, let's:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Delete any sub directories of the user account directories in the &lt;code&gt;C:\&amp;lt;sql_instance_path&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do NOT delete the user account directories themselves.&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;li&gt;Open WinDbg and attach to the launchpad service (you need to run WinDbg as admin).&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Internals - I&lt;/a&gt; has more information how to attach to a process, and what commands to use.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Now, let's set some break points at:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!SatelliteSessionManager::CreateNewSessionObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bp KERNELBASE!CreateDirectoryW&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!SQLSatellite_LaunchProcess&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;So what we try to do is to establish in what order things happen, and how many times the &lt;code&gt;KERNELBASE!CreateDirectoryW&lt;/code&gt; is called. While we execute we should also, in file explorer, see what directories are created in the user account directory. Let's run the code now.&lt;/p&gt;

&lt;p&gt;The output from the debugger looked for me like this:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Flow&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteSessionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateNewSessionObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateDirectoryW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateDirectoryW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateDirectoryW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateDirectoryW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateDirectoryW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateDirectoryW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='33' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='34' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='35' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='36' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='37' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='38' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateDirectoryW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='39' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='40' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='41' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;Creation of Directories and Processes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 5&lt;/em&gt; we see how:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Three directories are created initially, the first one being the directory for the session.&lt;/li&gt;
&lt;li&gt;Then two processes, which will use the second and third directory.&lt;/li&gt;
&lt;li&gt;Then one directory followed by one process, until we're done.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The above is in line what we discussed in &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;, as well as &lt;em&gt;Code Snippet 1&lt;/em&gt; where we saw how two directories are created initially followed by two processes.&lt;/p&gt;

&lt;p&gt;So, that's fine - we now &quot;kind of&quot; understands how the working directory is created. Now, when you look at &lt;em&gt;Figure 4&lt;/em&gt;, you see that inside one of the created directories are some files, and a sub-directory. When we ran the code after having set the break points, as above, we did not see any &lt;code&gt;KERNELBASE!CreateDirectoryW&lt;/code&gt; calls which would have created the sub directories. What's up with that, and where do the files in the directories come from, and what do they do? Questions, questions, so many questions. Hopefully we'll get some answers in subsequent posts!&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;When we execute an external script, processes are created with backing directories. The script is executed in a session, and that session do have a backing directory as well. That directory becomes the working directory for the R process the script execute in.&lt;/p&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 19</title>
   <link href="http://nielsberglund.com/2017/05/14/interesting-stuff-week-19/"/>
   <updated>2017-05-14T18:05:53+02:00</updated>
   <id>http://nielsberglund.com/2017/05/14/interesting-stuff---week-19</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Misc.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/microgaming-idea-factory&quot;&gt;The Microgaming Idea Factory: Innovation in Practice within a Leading Online Gaming Software Company&lt;/a&gt;. This is interesting as it originates for the company I work for (indirectly). In essence it is a way for employees to submit their ideas, and potentially see them come to fruition.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/cosmos-db/introduction&quot;&gt;Welcome to Azure Cosmos DB&lt;/a&gt;. In the beginning there was Azure Document DB. It has now grown up and become Cosmos DB, a globally distributed, multi-model database.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Cloud&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/cloud-application-principles&quot;&gt;Taking an Application-Oriented Approach to Cloud Adoption&lt;/a&gt;. An &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; article about what to do, and not to do, when migrating to the &quot;cloud&quot;. Quite a few interesting points in there.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.bertwagner.com/one-sql-cheat-code-for-amazingly-fast-json-queries-1c2402b4b0d2&quot;&gt;One SQL Cheat Code For Amazingly Fast JSON Queries&lt;/a&gt;. An awesome article how to index JSON data in SQL Server!!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/optimization-tips-and-tricks-on-azure-sql-server-for-machine-learning-services/&quot;&gt;Optimization tips and tricks on Azure SQL Server for Machine Learning Services&lt;/a&gt;. A post about optimization tips and tricks with R Services on Azure SQL Server. Those optimization techniques however, do not only work for R Services, but for any Machine Learning Services integrated with SQL Server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/05/09/semi-supervised-knowledge-transfer-for-deep-learning-from-private-training-data/&quot;&gt;Semi-supervised knowledge transfer for deep learning from private training data&lt;/a&gt;. &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;Adrian Colyer&lt;/a&gt; dissects a white paper about how to keep private data private when training deep learning models.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/dataplatforminsider/2017/05/10/serving-ai-with-data-a-summary-of-build-2017-data-innovations/&quot;&gt;Serving AI with data: A summary of Build 2017 data innovations&lt;/a&gt;. Microsoft Build was this week, and inevitably there were a lot of blog-posts about it. This post summarizes what new innovations are coming from MS in the data / AI field.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rquintino.wordpress.com/2017/05/11/5-minutes-to-deeplearning-on-azure-datascience-gpus-vm-with-docker-nvidiadigits-caffe/&quot;&gt;5 minutes to #DeepLearning on #Azure #DataScience GPUs VM with #Docker #NvidiaDigits #Caffe&lt;/a&gt;. &lt;a href=&quot;https://rquintino.wordpress.com&quot;&gt;Rui Quintino&lt;/a&gt; posts about how to do Deep Learning on GPU's on Azure. Well worth reading! Oh, and BTW, &lt;a href=&quot;https://rquintino.wordpress.com/2017/05/11/5-minutes-to-deeplearning-on-azure-datascience-gpus-vm-with-docker-nvidiadigits-caffe/&quot;&gt;Rui&lt;/a&gt; is now on my Feedly feed for useful blog posts in the data science field.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/05/11/using-iot-sensors-to-up-your-game/&quot;&gt;Using IoT Sensors to Up Your Game&lt;/a&gt;. In the roundup for &lt;a href=&quot;/2017/04/30/interesting-stuff-week-17/&quot;&gt;week 17&lt;/a&gt;, I mentioned how &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;Adrian Colyer&lt;/a&gt; had a &lt;a href=&quot;https://blog.acolyer.org/2017/04/24/bringing-iot-to-sports-analytics/&quot;&gt;post&lt;/a&gt; about how IoT devices can be of help to analyze things in sports analytics. This post is more about the same, how sports people can &quot;up their game&quot; by using sensors and data science.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/rserver/2017/05/11/1885/&quot;&gt;From DeployR to R Server Operationalization&lt;/a&gt;. Initially Microsoft R Server used Deploy R for operationalization of R models. Since Microsoft R Server 9.x this has been changed to &quot;Microsoft R Server Operationalization&quot;. This post covers some of the differences.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/Build/2017/P4096&quot;&gt;A lap around R Tools 1.0 for Visual Studio 2017&lt;/a&gt;. A colleague of mine from DevelopMentor,John Lam, covers R Studio Tools for Visual Studio 2017.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;Just an update about where I am with my series about &lt;strong&gt;SQL Server R Services&lt;/strong&gt;. I am busy working on &lt;strong&gt;Internals - VI&lt;/strong&gt;. I hope I will be able to publish it early this coming week. In the meantime you can always go back and read the previous posts :):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Microsoft SQL Server R Services - Internals III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Microsoft SQL Server R Services - Internals IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Microsoft SQL Server R Services - Internals V&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 18</title>
   <link href="http://nielsberglund.com/2017/05/07/interesting-stuff-week-18/"/>
   <updated>2017-05-07T21:18:40+02:00</updated>
   <id>http://nielsberglund.com/2017/05/07/interesting-stuff---week-18</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/unsung-sqlos-the-sos_unfairmutexpair-behind-cmemthread-waits/&quot;&gt;Unsung SQLOS: The SOS_UnfairMutexPair behind CMEMTHREAD waits&lt;/a&gt;. &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt; has fired up WinDbg to look at the synchronization object behind memory allocations: &lt;code&gt;SOS_UnfairMutexPair&lt;/code&gt;. Very, very interesting if you are into SQL Server's plumbing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrisadkin.io/2017/04/25/creating-self-building-sql-server-data-tools-pipelines-using-jenkins-and-git/&quot;&gt;Creating Self Building SQL Server Data Tools Pipelines Using Jenkins and GIT&lt;/a&gt;. Interesting article how to create a self-building SQL Server pipeline. Or more accurately, for SQL Server Data Tools projects.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlskills.com/blogs/paul/sqlskills-sql101-query-plans-based-on-whats-in-memory/&quot;&gt;SQLskills SQL101: Query plans based on what’s in memory&lt;/a&gt;. Paul Randal from &lt;a href=&quot;https://www.sqlskills.com&quot;&gt;SQLskills&lt;/a&gt; posts about the SQL Server query optimizer doesn’t or care what’s in the buffer pool when creating a query plan.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/05/02/corfu-a-distributed-shared-log/&quot;&gt;Corfu: A distributed shared log&lt;/a&gt;. &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;Adrian Colyer&lt;/a&gt; covers &lt;strong&gt;Corfu&lt;/strong&gt;, which is a global log which clients can append-to and read-from over a network. It seems like a cross between &lt;strong&gt;Kafka&lt;/strong&gt; and an in-memory database.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/pelikan-distributed-caching&quot;&gt;In-memory Caching: Curb Tail Latency with Pelikan&lt;/a&gt;. A presentation about &lt;strong&gt;Pelikan&lt;/strong&gt; - a framework to implement distributed caches such as Memcached and Redis.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/05/02/end-to-end-scenarios-enabled-by-the-data-science-virtual-machine-video/&quot;&gt;End-to-End Scenarios Enabled by the Data Science Virtual Machine: Webinar Video&lt;/a&gt;. Blog-post pointing to a webinar about end-to-end scenarios you can do with the &lt;strong&gt;Microsoft Data Science Virtual Machine&lt;/strong&gt; (DSVM). I really need to find some time and do some work with DSVM.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/rserver/2017/05/04/rxexecby-insights-on-rxspark-compute-context/&quot;&gt;rxExecBy Insights on RxSpark Compute Context&lt;/a&gt;. &lt;code&gt;rxExecBy&lt;/code&gt; is a function introduced in Microsoft R Server 9.1. It can be used to partition input data source by keys and apply user defined function on individual partitions. It comes in very handy when you have huge datasets - you can partition the dataset into many small partitions and train models on each partition. The blog-post shows examples of how it can be used on Spark.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/rserver/2017/05/04/performance-rxexecby-vs-gapply-on-spark/&quot;&gt;Performance: rxExecBy vs gapply on Spark&lt;/a&gt;. Above I pointed to a blog-post about &lt;code&gt;rxExecBy&lt;/code&gt;. This post compares performance of &lt;code&gt;rxExecBy&lt;/code&gt; and &lt;code&gt;gapply&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/05/real-time-scoring-with-mrs-91.html&quot;&gt;Real-time scoring with Microsoft R Server 9.1&lt;/a&gt;. A blog-post by &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt;, discussing how you can do real-time scoring using Microsoft R Server 9.1.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Shameless Self Promotion&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Microsoft SQL Server R Services - Internals V&lt;/a&gt;. I finally managed to finish the &lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Internals - V&lt;/a&gt; post. In this post I cover how parallelism works in SQL Server R Services.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft SQL Server R Services - Internals V</title>
   <link href="http://nielsberglund.com/2017/05/01/microsoft-sql-server-r-services-internals-v/"/>
   <updated>2017-05-01T15:04:31+02:00</updated>
   <id>http://nielsberglund.com/2017/05/01/microsoft-sql-server-r-services---internals-v</id>
   <content type="html">&lt;p&gt;This post is part of a series of blog-posts about Microsoft SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Microsoft SQL Server R Services - Internals III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Microsoft SQL Server R Services - Internals IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server R Services - Internals V (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Microsoft SQL Server R Services - Internals VI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This post is the sixth post about Microsoft SQL Server R Services, and the fifth post that drills down into the internal of how it works. In &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; and &lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Internals - IV&lt;/a&gt;, we looked at how the launchpad service creates &lt;strong&gt;RTerm&lt;/strong&gt; processes when we execute an external script.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Internals - IV&lt;/a&gt; post came about due to an email from Bob Albright (&lt;a href=&quot;https://twitter.com/bob_albright&quot;&gt;@bob_albright&lt;/a&gt;), pointing me to some resources (a blog-post) regarding the processes the launchpad service creates.&lt;/p&gt;

&lt;p&gt;In his email Bob also, kindly enough, attached some code. The code highlighted some behavior when creating the RTerm processes, especially around parallelism. In this blog-post we'll follow up on that and look into the effect parallelism has on process creation.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Internals - IV&lt;/a&gt;, we saw how:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The launchpad service creates by default 6 RTerm processes when an external script is executed by a user. One of the processes will be used for the execution of the script and torn down afterwards. The other 5 is added to the process pool. In essence the launchpad service creates 5 + 1.&lt;/li&gt;
&lt;li&gt;If more (or less) processes than 5 is needed, a setting &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt; can be set in &lt;code&gt;rlauncher.config&lt;/code&gt;. The value of the setting defines number of processes to create (as with default it will be setting value + 1).&lt;/li&gt;
&lt;li&gt;When a user executes subsequent requests, or concurrent requests from different sessions, processes are picked up and used from the pool.

&lt;ul&gt;
&lt;li&gt;The launchpad service simultaneously creates a new process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Previously I had the assumption that &quot;somehow&quot; the number of processes created had to be configurable, and that the reason for creating multiple processes has to do with performance.&lt;/p&gt;

&lt;p&gt;In the post we verified that, and this was much due to the &lt;a href=&quot;https://blogs.msdn.microsoft.com/microsoftrservertigerteam/2016/09/20/tips-sql-r-services-optimization-for-concurrent-execution-of-in-database-analytics-using-sp_execute_external_script/&quot;&gt;blog-post&lt;/a&gt; Bob pointed to in his - previously mentioned - email. That particular post also briefly mentioned &lt;code&gt;MAXDOP&lt;/code&gt;, and what to think about in terms of pool size. That and Bob's code lead to this blog-post.&lt;/p&gt;

&lt;h2&gt;Code&lt;/h2&gt;

&lt;p&gt;Before diving into the &quot;stuff&quot;, let's look at the code we'll use. The code we have used in previous posts has been very, very minimal. Today we'll be &quot;very advanced&quot; and select data from a table in a database - talk about cutting edge!! What we want to do is to execute some linear regression functions against data, and see what happens in different scenarios.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 1&lt;/em&gt; below, we set up the database and a table with some data we can use, all in all 30 million records:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Setup&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_30M&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_30M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RowID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                          &lt;span class=&quot;n&quot;&gt;rand1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                          &lt;span class=&quot;n&quot;&gt;rand5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_30M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Setup of Database, Table and Data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The data is completely &quot;useless&quot;, but it can at least be used for analysis work, it looks something like so (just a few rows):&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_random_data.png&quot; width=&quot;340&quot; height=&quot;240&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;10 Rows Random Data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What we want to do with the data is to create a linear regression model over it, where - ultimately - we want to predict the value of &lt;code&gt;y&lt;/code&gt;, and we believe &lt;code&gt;y&lt;/code&gt; is related to &lt;code&gt;rand1&lt;/code&gt;, &lt;code&gt;rand2&lt;/code&gt;, &lt;code&gt;rand3&lt;/code&gt;,  &lt;code&gt;rand4&lt;/code&gt; and &lt;code&gt;rand5&lt;/code&gt;. In our examples we are not really interested in &lt;code&gt;y&lt;/code&gt;, but we want to see what the &lt;strong&gt;intercept&lt;/strong&gt; value(s) is. If we used open source R (CRAN R), the code for this would look something like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Linear Regression&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# get the coefficients&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coefficients&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# the intercept value is first value in the coefficients vector&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;icept&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# return the data&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;out_data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data.frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;icept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Linear Regression Using CRAN R&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Seeing that this is about SQL Server R Services, we should be using the equivalent RevoScaleR function: &lt;code&gt;rxLinMod&lt;/code&gt;: &lt;code&gt;r &amp;lt;- rxLinMod(y ~ rand1 + rand2 + rand3 + rand4 + rand5, data=&amp;lt;some input data&amp;gt;);&lt;/code&gt;, and we would execute it from &lt;code&gt;sp_execute_external_script&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execute from SQL Server&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYSUTCDATETIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;          &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             #Sys.sleep(30)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             pid &amp;lt;- Sys.getpid()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             r &amp;lt;- rxLinMod(y ~ rand1 + rand2 + rand3 + rand4 + rand5,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                           data=InputDataSet)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             coef &amp;lt;- r$coefficients
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             icept &amp;lt;- coef&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              OutputDataSet &amp;lt;- data.frame(pid=pid, nRows=r$nValidObs,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                          intercept=icept)'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;       &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              SELECT  y, rand1, rand2, rand3,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      rand4, rand5
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              FROM dbo.rand_30M'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLOAT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATEDIFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYSUTCDATETIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElapsedTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Linear Regression in SQL Server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the code in &lt;em&gt;Code Snippet 3&lt;/em&gt; is what we will &quot;play&quot; around with in this post. Some comments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First line of the script (the &lt;code&gt;@script&lt;/code&gt; parameter) is commented out; &lt;code&gt;Sys.sleep(30)&lt;/code&gt;. We'll use it at one stage to be able to look a little bit closer at what is happening.&lt;/li&gt;
&lt;li&gt;As we did in &lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Internals - IV&lt;/a&gt; we grab the process id of the RTerm process the code executes under.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;OutputDataSet&lt;/code&gt; variable we output a data-frame consisting of the process id, how many rows we processed and the intercept value.&lt;/li&gt;
&lt;li&gt;The output data is being presented as a result set, by the &lt;code&gt;WITH RESULT SETS ...&lt;/code&gt; statement.&lt;/li&gt;
&lt;li&gt;Oh, and for &quot;giggles&quot; we check how long the execution takes (first line and last line).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In addition to the code above, we'll also use &lt;a href=&quot;https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx&quot;&gt;&lt;strong&gt;Process Explorer&lt;/strong&gt;&lt;/a&gt;, to see how many processes are created as well as memory consumption etc. If you have read &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; and &lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Internals - IV&lt;/a&gt;, you should be comfortable with &lt;em&gt;Process Explorer&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Parallel Execution&lt;/h2&gt;

&lt;p&gt;So the blog-post is about what impact parallel processing will have on the process creation, but before we go down that &quot;rabbit&quot; hole, let's see what it looks like during non-parallel execution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Restart the launchpad service (this is to clean-up any RTerm processes).&lt;/li&gt;
&lt;li&gt;Navigate to the &lt;code&gt;Launchpad.exe&lt;/code&gt; process in &lt;em&gt;Process Explorer&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;While the code is executing, look in &lt;em&gt;Process Explorer&lt;/em&gt; for RTerm processes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In &lt;em&gt;Process Explorer&lt;/em&gt; you should see something similar to this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_lin_reg1.png&quot; width=&quot;414&quot; height=&quot;115&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Processes from Code Execution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What you see in &lt;em&gt;Figure 1&lt;/em&gt; matches pretty good with what we discussed in &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; and &lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Internals - IV&lt;/a&gt;; while a single user executes &lt;code&gt;sp_execute_external_script&lt;/code&gt; 6 RTerm processes are alive, and one of the processes is the process where the script executes under. In this case it was process id 10120, and we determined that from the CPU value (.32) as well as Private Bytes: 1,023,376 K and Working Set 189,268 K respectively.  We can further confirm the process the code executed under by looking at the result coming back:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_lin_reg1_result.png&quot; width=&quot;270&quot; height=&quot;133&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Result from Code Execution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From &lt;em&gt;Figure 2&lt;/em&gt; we can indeed see that the process id was 10120, and that we ran the regression model over 30 million rows. The time it took to execute the code was ~16 seconds. The query plan looks like in &lt;em&gt;Figure 3&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_lin_reg1_result_udx.png&quot; width=&quot;520&quot; height=&quot;145&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Actual Query Plan&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 3&lt;/em&gt; we see how we do clustered index scan for our rows and then hand it over to the UDX operator. The UDX operator comes normally in play when we do XML related processes, but - as we can see - it also comes into the picture for external scripts. It kind of makes sense as it is an &lt;strong&gt;Extended Operator&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is all well and good, but it is not really anything new from what we discussed in &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; and &lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;IV&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So what about parallel execution? When you read documentation about &lt;strong&gt;SQL Server R Services&lt;/strong&gt; it always mentions how efficient it is to execute external scripts as one can utilize SQL's parallelism. How does this work then? In &quot;normal&quot; SQL Server parallelism, SQL Server decides whether to execute a statement in parallel or not, and the &lt;code&gt;MAXDOP&lt;/code&gt; setting defines the number of processors the statement will execute on.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;SQL Server R Services&lt;/strong&gt; it works in a similar way, except that you have to explicitly say that you want to execute in parallel. To specify parallel execution you use a parameter on the &lt;code&gt;sp_execute_external_script&lt;/code&gt; procedure: &lt;code&gt;@parallel&lt;/code&gt;. The parameter can either be either 0, no parallelism which is default, or 1.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Even if you specify that you want to execute in parallel, SQL may choose not to do it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So in order to enable parallelism, we need to add the parameter to the stored procedure, and in &lt;em&gt;Code Snippet 4&lt;/em&gt; below we have inserted the parameter right after &lt;code&gt;@input_data1&lt;/code&gt; parameter:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Enable Parallelism&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- preceding code not shown&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              SELECT  y, rand1, rand2, rand3,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      rand4, rand5
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              FROM dbo.rand_30M'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLOAT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATEDIFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SYSUTCDATETIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElapsedTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;Using the @parallel Parameter&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So let's see what impact the change we did in &lt;em&gt;Code Snippet 4&lt;/em&gt; has. For now we will not look at the RTerm processes, so you can just execute the code with the &lt;code&gt;@parallel = 1&lt;/code&gt; parameter set. On my machine which is a 4 core machine with hyper threading (i.e. 8 processors) and &lt;code&gt;MAXDOP&lt;/code&gt; is set to 0 (use all processors), I get the following result when I execute:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_lin_reg2_result.png&quot; width=&quot;260&quot; height=&quot;270&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Result from Parallel Execution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 4&lt;/em&gt; we see how the results are returned from 8 RTerm process id's. This is to be expected when SQL uses parallelism and &lt;code&gt;MAXDOP&lt;/code&gt; is 0. Oh, and BTW - according to people &quot;in the know&quot; you should not have &lt;code&gt;MAXDOP&lt;/code&gt; set to 0 if you run on an HT box. &lt;a href=&quot;https://www.mssqltips.com/sqlservertip/2650/what-maxdop-setting-should-be-used-for-sql-server/&quot;&gt;Here&lt;/a&gt; is an article about &lt;code&gt;MAXDOP&lt;/code&gt; settings.&lt;/p&gt;

&lt;p&gt;We also see from &lt;em&gt;Figure 4&lt;/em&gt; that we executed in ~8.7 seconds, roughly half the time it took when we didn't use parallelism.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; There is no guarantee that you will improve performance by using parallelism, so it is a good idea to always test against the workloads you are using.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The query plan from the execution also shows parallelism:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_lin_reg2_qp.png&quot; width=&quot;650&quot; height=&quot;144&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Query Plan With Parallelism&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The interesting part with the query plan, as Bob pointed out to me, is that the UDX operator gets pushed &lt;strong&gt;before&lt;/strong&gt; the &lt;em&gt;Parallelism&lt;/em&gt; operator.&lt;/p&gt;

&lt;p&gt;Let us now get back to what we started this with; how parallelism affects process creation. From what we have seen above, we can be fairly certain that 8 processes have been created, but let's make sure that it really happens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Un-comment the line in the R script saying &lt;code&gt;Sys.sleep(30)&lt;/code&gt;. We'll use this pause to be able to closer see what happens.&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;li&gt;Navigate to the &lt;code&gt;Launchpad.exe&lt;/code&gt; process in &lt;em&gt;Process Explorer&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Execute the code.&lt;/li&gt;
&lt;li&gt;While the code executes look closely at the RTerm processes under the launchpad process in &lt;em&gt;Process Explorer&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;On my box the RTerm processes looks like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_lin_reg2_processes.png&quot; width=&quot;414&quot; height=&quot;273&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; RTerm Processes and Parallelism*&lt;/p&gt;

&lt;p&gt;From &lt;em&gt;Figure 6&lt;/em&gt; we can see how there are 8 executing processes (the outlined rows), and 16 processes altogether. So when executing in parallel, the launchpad service creates two processes for each task, where one of the two processes are used for execution of the R code, and the other is being added to the process pool. The processes that are being used to executed on, are torn down after execution - and left are the ones in the process pool.&lt;/p&gt;

&lt;p&gt;However if the level of parallelism (tasks) are less than the number of processes to be created, (5 by default or the value of &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt;), then the launchpad service creates as many process as required so that there always is the required number of processes in the pool.&lt;/p&gt;

&lt;p&gt;An example of this is if &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt; has not been set, and we are working with 5 as default; if the level of parallelism is 4, then 9 processes will be created - 4 for execution, and 5 for the pool.&lt;/p&gt;

&lt;p&gt;So why would the level of parallelism be less than the required number of processes? Well, we may execute on a box with few processors, maybe not so likely, or &lt;code&gt;MAXDOP&lt;/code&gt; is set (see below).&lt;/p&gt;

&lt;h3&gt;CRAN R Functions&lt;/h3&gt;

&lt;p&gt;So far we have used RevoScaleR functions in our script code, what happens if we want to use a CRAN R function instead. Something similar to what is in &lt;em&gt;Code Snippet 2&lt;/em&gt;? That works fine as well, multiple RTerm processes will process the data. I will not show the code here, but you can easily try it our yourselves.&lt;/p&gt;

&lt;h2&gt;Max Degree of Parallelism (MAXDOP)&lt;/h2&gt;

&lt;p&gt;So &lt;code&gt;MAXDOP&lt;/code&gt; is a way to indicate to SQL Server how many processors to execute a piece of code on. Or rather, it is a way to limit SQL Server from running a statement over all processors on the box. As this post is not about &lt;code&gt;MAXDOP&lt;/code&gt; as such, I won't go into details about it, but if you want to know more &lt;a href=&quot;https://blogs.msdn.microsoft.com/arali/2009/11/25/sql-server-max-degree-of-parallelism-maxdop/&quot;&gt;here is an MSDN article&lt;/a&gt; covering &lt;code&gt;MAXDOP&lt;/code&gt;. Anyway, &lt;code&gt;MAXDOP&lt;/code&gt; is set on SQL Server instance level, but can also be used as query hint on individual queries.&lt;/p&gt;

&lt;p&gt;Setting &lt;code&gt;MAXDOP&lt;/code&gt; for individual statements also work for the statement used in the &lt;code&gt;@input_data_1&lt;/code&gt; parameter on the &lt;code&gt;sp_execute_external_script&lt;/code&gt; procedure. So in our code example was can change the &lt;code&gt;@input_data_1&lt;/code&gt; parameter to look like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;MAXDOP&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              SELECT  y, rand1, rand2, rand3,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      rand4, rand5
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              FROM dbo.rand_30M OPTION(MAXDOP 4)'&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;Using MAXDOP in SELECT&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The code in &lt;em&gt;Code Snippet 5&lt;/em&gt; will now restrict the parallelism to use 4 processors, and results coming back will show 4 different process id's, and - as I mentioned above - during execution there will be 9 RTerm processes created, and when the execution has finished 5 will be in the process pool.&lt;/p&gt;

&lt;h2&gt;Some Unclear Points&lt;/h2&gt;

&lt;p&gt;All this seems pretty straight forward, however what is unclear for me is how the interaction between SQL Server and the launchpad service works when executing with parallelism. On the SQL Server side we can see how multiple tasks and workers are invoked when parallelism is in play by executing something like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Tasks and Workers&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spid_from_script_execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduler_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker_address&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm_os_tasks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 6:&lt;/strong&gt; &lt;em&gt;Viewing Tasks and Workers When Executing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To see this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a second query window and copy the code from &lt;em&gt;Code Snippet 6&lt;/em&gt; into that window.&lt;/li&gt;
&lt;li&gt;Replace the &lt;code&gt;&amp;lt;spid_from_script_execute&amp;gt;&lt;/code&gt; with the session id (&lt;code&gt;@@SPID&lt;/code&gt;) from where you execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Highlight the &lt;em&gt;Code Snippet 6&lt;/em&gt; code in the query window.&lt;/li&gt;
&lt;li&gt;Execute the &lt;code&gt;sp_execute_external_script&lt;/code&gt; code, where &lt;code&gt;@parallel&lt;/code&gt; is set to 1.&lt;/li&gt;
&lt;li&gt;Quickly change over to the other query window and execute the code.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The result from the query window where you execute the code from &lt;em&gt;Code Snippet 6&lt;/em&gt; looks something like what you see in &lt;em&gt;Figure 7&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_lin_reg2_tasks.png&quot; width=&quot;440&quot; height=&quot;220&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; Tasks, Workers and Schedulers*&lt;/p&gt;

&lt;p&gt;Ok, we see multiple schedulers, tasks and workers being active when we execute our code, and there is nothing strange in that. Seeing that, I would then have expected that there would be a one-to-one relationship between the tasks and the calls into the launchpad service, but that is not the case.&lt;/p&gt;

&lt;p&gt;I verified that by &quot;firing up&quot; my trusted debugger &lt;strong&gt;WinDbg&lt;/strong&gt; and attached it to the launchpad process, similar to what we did in &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Internals - II&lt;/a&gt;. I then set a breakpoint at &lt;code&gt;launchpad!CLaunchContext::LaunchServTask&lt;/code&gt;, and executed the code. My expectation was that I would see how the breakpoint was hit multiple times when I executed with parallelism.&lt;/p&gt;

&lt;p&gt;That did not happen, the breakpoint was hit once, and that was it. That leaves me with the question how SQL Server interacts with the launchpad service when executing with parallelism. My guess is that when SQL Server calls into the launchpad service, (which we discussed at length in &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Internals - I&lt;/a&gt; and &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;II&lt;/a&gt;), it tells the launchpad service that this call requires parallelism, and the level of it. But as I said, this is just a guess. Maybe someone out there can clarify what goes on.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post I wanted to look at how parallelism affects the creation of RTerm processes in &lt;strong&gt;SQL Server R Services&lt;/strong&gt;. The conclusion is that it does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When executing with no parallelism, the launchpad service creates 6 processes by default (can be altered by &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt;), and the code runs on one, the others are added to the process pool. When the code has finished executing, the executing process is torn down.&lt;/li&gt;
&lt;li&gt;When executing under parallelism the launchpad service creates two processes per degree of parallelism. One of the two processes are used to execute on, the other is added to the pool.

&lt;ul&gt;
&lt;li&gt;If the level of parallelism is lower than default number of process to be created (or &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt;) then the launchpad service creates enough processes to satisfy the required level.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Parallelism works with CRAN R functions as well as RevoScaleR.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;MAXDOP&lt;/code&gt; setting has impact on the parallelism.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So that's for now! Thanks once again to &lt;a href=&quot;https://twitter.com/bob_albright&quot;&gt;Bob&lt;/a&gt; for his input and code!! And as I mentioned above, if anyone has input how SQL Server interacts with the launchpad service, when parallelism is in play - I'd be more than happy to hear about it.&lt;/p&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 17</title>
   <link href="http://nielsberglund.com/2017/04/30/interesting-stuff-week-17/"/>
   <updated>2017-04-30T20:24:37+02:00</updated>
   <id>http://nielsberglund.com/2017/04/30/interesting-stuff---week-17</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/04/nikita-ivanov-apache-ignite&quot;&gt;Nikita Ivanov on Apache Ignite In-Memory Computing Platform&lt;/a&gt;. You can hardly turn around without &quot;bumping&quot; into a platform offering in-memory computing. Apcahe Ignite is a newcomer to the mix, and - in an &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; interview - Nikita Ivanov talks about what Apache Ignite is. To me it is interesting as it supports both both key-value persistence as well as streaming and complex-event processing.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/04/24/how-to-find-query-plan-choice-regressions-with-sql-server-2017-ctp2/&quot;&gt;How to find query plan choice regressions with SQL Server 2017 CTP2&lt;/a&gt;. A blog post by Jovan Popovic from Microsoft about how &lt;strong&gt;SQL Server 2017&lt;/strong&gt; introduces functionality to allow you to easily identify performance regressions in SQL queries. I know some DBA's at &lt;a href=&quot;/derivco&quot;&gt;&lt;strong&gt;Derivco&lt;/strong&gt;&lt;/a&gt; who'd sell their first-born for this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/dataplatforminsider/2017/04/28/sql-server-community-driven-enhancements-in-sql-server-2017/&quot;&gt;SQL Server community-driven enhancements in SQL Server 2017&lt;/a&gt;. A post by the &lt;a href=&quot;https://blogs.msdn.microsoft.com/sql_server_team/&quot;&gt;SQL Server engineering a.k.a TIGER&lt;/a&gt; team, how a lot of new functionality in &lt;strong&gt;SQL Server 2017&lt;/strong&gt; has been introduced due to ideas/requests from the community. Very cool!!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlskills.com/blogs/paul/how-are-default-column-values-stored/&quot;&gt;How are default column values stored?&lt;/a&gt;. Paul from &lt;a href=&quot;https://www.sqlskills.com&quot;&gt;SQLskills&lt;/a&gt; &quot;spelunks&quot; about how default column values are stored.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/tool-data-preparation&quot;&gt;Data Preparation for Data Science: A Field Guide&lt;/a&gt;. An &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; presentation about a utility written with Apache Spark to automate data preparation, discovering missing values, values with skewed distributions and discovering likely errors within data. This could come in very handy for &lt;a href=&quot;/derivco&quot;&gt;us&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/04/25/using-microsofts-deep-learning-toolkit-with-spark-on-azure-hdinsight-clusters/&quot;&gt;Using Microsoft’s Deep Learning Toolkit with Spark on Azure HDInsight Clusters&lt;/a&gt;. How to do distributed deep learning over big datasets on Azure HSInsight Spark with  Microsoft Cognitive Toolkit. This is very, very interesting!!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/04/r-340-now-available.html&quot;&gt;R 3.4.0 now available&lt;/a&gt;. The guys at &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; points out that R 3.4.0 is available, and some of the new functionality in the release. Go and get it before it is sold out!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/04/24/bringing-iot-to-sports-analytics/&quot;&gt;Bringing IoT to sports analytics&lt;/a&gt;. &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;the morning paper&lt;/a&gt; is back after vacation! This is about sports analytics and how IoT devices can help analyzing various things, and potentially replacing very, very expensive high-quality cameras.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/rserver/2017/04/27/leveraging-microsoft-r-and-in-database-analytics-of-sql-server-with-r-services-through-alteryx/&quot;&gt;Leveraging Microsoft R and in database analytics of SQL Server with R Services through Alteryx Designer&lt;/a&gt;. In the roundup for &lt;a href=&quot;/2017/03/26/interesting-stuff-week-12/&quot;&gt;week 12&lt;/a&gt; I wrote about how &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; mentioned this visual designer for R supporting SQL Server R Services: Alteryx. In the post I link to in this roundup, the Microsoft R Product Team tries out the designer against SQL Server R Services. It looks quite a lot like Azure ML. I so need to try it out!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thenewstack.io/microsoft-puts-ai-data/&quot;&gt;Microsoft Puts AI Where the Data Is&lt;/a&gt;. A very nice article about how Microsoft tries to pu the Data Science / AI where the data is, in the database.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tomaztsql.wordpress.com/2017/04/28/performance-differences-between-revoscaler-columnstore-table-and-in-memory-oltp-table/&quot;&gt;Performance differences between RevoScaleR, ColumnStore Table and In-Memory OLTP Table&lt;/a&gt;. A comparison, by &lt;a href=&quot;https://tomaztsql.wordpress.com&quot;&gt;Tomaz&lt;/a&gt;, of performance between various data stores and applying data science:ish functions against the data.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://buckwoody.wordpress.com/2017/04/28/does-data-science-replace-bi/&quot;&gt;Does Data Science Replace BI?&lt;/a&gt;. Buck Woody asks the question whether BI is being replaced by Data Science.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;Just an update about where I am with my series about &lt;strong&gt;SQL Server R Services&lt;/strong&gt;. I am busy working on &lt;strong&gt;Internals - V&lt;/strong&gt;, and I had hoped to have it out by now, but there are some things I still want to investigate further. I hope I will be able to publish it early this coming week. In the meantime you can always go back and read the previous posts :):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Microsoft SQL Server R Services - Internals III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Microsoft SQL Server R Services - Internals IV&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 16</title>
   <link href="http://nielsberglund.com/2017/04/23/interesting-stuff-week-16/"/>
   <updated>2017-04-23T20:22:38+02:00</updated>
   <id>http://nielsberglund.com/2017/04/23/interesting-stuff---week-16</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;Wow! Wow is all I can say! Sure, of course I knew that &lt;strong&gt;Microsoft Data Amp&lt;/strong&gt; would take place this week, but I had no idea that there would be so much interesting stuff coming out of it!! So instead of pointing to each and every really cool announcement (RCA), I'll try to keep it contained somewhat, and point to the &lt;a href=&quot;https://channel9.msdn.com&quot;&gt;Channel 9&lt;/a&gt; site for all the videos, plus a couple of the Really, Really Cool Announcements (RRCA).&lt;/p&gt;

&lt;h2&gt;Microsoft Data Amp&lt;/h2&gt;

&lt;p&gt;This section will be SQL Server heavy, but still a x-section of various interesting things from &lt;strong&gt;Microsoft Data Amp&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/Data-Science/Microsoft-Data-Amp-2017&quot;&gt;Microsoft Data Amp 2017&lt;/a&gt;. The central site for all videos from &lt;strong&gt;Microsoft Data Amp&lt;/strong&gt;. If you only can watch two videos, please, please do yourself a favor and watch the keynotes: &lt;a href=&quot;https://channel9.msdn.com/Events/Data-Science/Microsoft-Data-Amp-2017/Keynote-Scott-Guthrie&quot;&gt;Scott &quot;Red-Shirt&quot; Guthrie&lt;/a&gt;, and &lt;a href=&quot;https://channel9.msdn.com/Events/Data-Science/Microsoft-Data-Amp-2017/Keynote-Joseph-Sirosh&quot;&gt;Joseph Siro&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/Data-Science/Microsoft-Data-Amp-2017/SQL-Server-2017-Building-applications-using-graph-data&quot;&gt;SQL Server 2017: Building applications using graph data&lt;/a&gt;. &lt;strong&gt;SQL Server 2017&lt;/strong&gt; (the &quot;artist&quot; formerly known as SQL v.Next) has support for graph data. Shreya Verma presents about what you can do with it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/Data-Science/Microsoft-Data-Amp-2017/SQL-Server-2017-Advanced-Analytics-with-Python&quot;&gt;SQL Server 2017: Advanced Analytics with Python&lt;/a&gt;. Oh, ah - &lt;strong&gt;SQL Server 2017&lt;/strong&gt; supports Python in addition to R for analysis tasks!! See more below.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/Data-Science/Microsoft-Data-Amp-2017/Whats-new-in-R-Server-91-and-SQL-Server-R-Services&quot;&gt;What's new in R Server 9.1 and SQL Server R Services&lt;/a&gt;. So let's not let Python run away with all the &quot;glory&quot; in &lt;strong&gt;SQL Server 2017&lt;/strong&gt;. The release of &lt;strong&gt;R Server 9.1&lt;/strong&gt; in &lt;strong&gt;SQL Server R Services&lt;/strong&gt; does have some cool stuff up its sleeve!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/Data-Science/Microsoft-Data-Amp-2017/SQL-Server-2017-Adaptive-Query-Processing&quot;&gt;SQL Server 2017: Adaptive Query Processing&lt;/a&gt;. Let's not forget my roots; T-SQL, OLTP, the &quot;black art&quot; of query processing. Microsoft in &lt;strong&gt;SQL Server 2017&lt;/strong&gt; introduces a new family of adaptive query processing improvements that will enhance the performance of workloads that have historically been difficult to tune through classic methodologies. How cool is that?!!!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;OK, so let us &lt;em&gt;somewhat&lt;/em&gt; return to the &quot;normal&quot; program.&lt;/p&gt;

&lt;h2&gt;.NET&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/04/CSharp-Nullable&quot;&gt;C# Futures: Nullable Reference Types&lt;/a&gt;. Well, well, well - it looks like Microsoft is moving towards an &lt;strong&gt;F#&lt;/strong&gt; / &lt;strong&gt;Haskell&lt;/strong&gt; model where types, reference or value, are non-nullable by default. It will be very interesting to see how the community reacts to this.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;p&gt;Admittedly , there was a lot of SQL Server new (almost all?) coming from &lt;strong&gt;Microsoft Data Amp&lt;/strong&gt;, but there is still some &quot;other&quot; noteworthy SQL Server topics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tomaztsql.wordpress.com/2017/04/17/saving-input-and-output-with-sp_execute_external_script-using-temporal-table-and-file-table-part-2/&quot;&gt;Saving input and output with sp_execute_external_script using temporal table and file table (part #2)&lt;/a&gt;. In last week's &lt;a href=&quot;/2017/04/16/interesting-stuff-week-15/&quot;&gt;roundup&lt;/a&gt;, I mentioned how &lt;a href=&quot;https://tomaztsql.wordpress.com&quot;&gt;Tomaz&lt;/a&gt; tries to figure out how to see what statements have been executed from &lt;code&gt;sp_execute_external_script&lt;/code&gt;. This is part two of the &quot;saga&quot;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/sql-agent-and-the-hairiest-dateadd-in-town/&quot;&gt;SQL Agent and the hairiest Dateadd in town&lt;/a&gt;. Another &quot;epic&quot; drill down in the bowels of SQL Server by &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt;, this time trying to find about weird &lt;code&gt;DATEADD&lt;/code&gt; behavior.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/bobsql/2017/04/21/sql-server-mysteries-the-case-of-the-not-100-restore/&quot;&gt;SQL Server Mysteries: The Case of the Not 100% RESTORE…&lt;/a&gt;. Awesome &quot;spelunking&quot; by &lt;a href=&quot;https://twitter.com/bobwardms&quot;&gt;Bob Ward&lt;/a&gt;, where he tries to figure out why &lt;code&gt;RESTORE&lt;/code&gt; doesn't work as expected!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/dataplatforminsider/2017/04/19/sql-server-2017-community-technology-preview-2-0-now-available/&quot;&gt;SQL Server 2017 Community Technology Preview 2.0 now available&lt;/a&gt;. &lt;strong&gt;READ ALL ABOUT IT&lt;/strong&gt;, and then go and download the bits. &lt;strong&gt;SQL Server 2017&lt;/strong&gt; CTP 2.0 is available for download.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/04/stirman-data-preparation&quot;&gt;Data Preparation Pipelines: Strategy, Options and Tools&lt;/a&gt;. Article from &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; about how data preparation is an important aspect of data processing and analytics use cases, and how business analysts and data scientists spend about 80% of their time gathering and preparing the data rather than analyzing it or developing machine learning models.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/04/microsoft-r-server-91-now-available.html&quot;&gt;Microsoft R Server 9.1 now available&lt;/a&gt;. My friends over at &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt;, also watched (or attended) &lt;strong&gt;Microsoft Data Amp&lt;/strong&gt; and blogs about how &lt;strong&gt;Microsoft R Server 9.1&lt;/strong&gt; is now available, and some of the new interesting features in it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/04/18/deep-learning-on-the-new-ubuntu-based-data-science-virtual-machine-for-linux/&quot;&gt;Deep Learning on the New Ubuntu-Based Data Science Virtual Machine for Linux&lt;/a&gt;. Microsoft’s Data Science Virtual Machine (DSVM) is a family of popular VM images published on the Azure marketplace with a broad choice of machine learning and data science tools. Microsoft is extending it with the introduction of a brand-new offering in this family – the Data Science Virtual Machine for Linux, based on Ubuntu 16.04LTS – that also includes a comprehensive set of popular deep learning frameworks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/04/18/deep-learning-with-caffe2-on-the-azure-data-science-virtual-machine/&quot;&gt;Deep Learning with Caffe2 on the Azure Data Science Virtual Machine&lt;/a&gt;. Caffe has been one such early and popular open source deep learning framework. It has now been rewritten and greatly improved in the latest iteration, named Caffe2. Microsoft and Facebook have worked together to bring Caffe2 to Azure on the Data Science Virtual Machine (DSVM) which can run on either GPU or CPU based virtual machines on the cloud.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/dataplatforminsider/2017/04/19/delivering-ai-with-data-the-next-generation-of-microsofts-data-platform/&quot;&gt;Delivering AI with data: the next generation of Microsoft’s data platform&lt;/a&gt;. An overview of Microsoft's offerings in he data and AI space.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Shameless Self Promotion&lt;/h2&gt;

&lt;p&gt;Some &quot;plugs&quot; about a couple of recent blog-posts by yours truly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/20/sql-server-2017-python-executing-from-sql/&quot;&gt;SQL Server 2017 - Python Executing Inside SQL Server&lt;/a&gt;. Straight after the &lt;strong&gt;Microsoft Data Amp&lt;/strong&gt; event I downloaded &lt;strong&gt;SQL Server 2017&lt;/strong&gt; and started &lt;del&gt;playing around&lt;/del&gt;, (erm, I mean) researching. This post is a &quot;Hello World&quot; Python running in &lt;strong&gt;SQL Server 2017&lt;/strong&gt;. There will be more posts coming about Python in &lt;strong&gt;SQL Server 2017&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Microsoft SQL Server R Services - Internals IV&lt;/a&gt;. The fourth post in the &lt;strong&gt;Microsoft SQL Server R Services - Internals&lt;/strong&gt; &quot;saga&quot;. In this episode, the fearless hero (me) looks more into process creation, process pools and other cool stuff!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft SQL Server R Services - Internals IV</title>
   <link href="http://nielsberglund.com/2017/04/23/microsoft-sql-server-r-services-internals-iv/"/>
   <updated>2017-04-23T14:42:01+02:00</updated>
   <id>http://nielsberglund.com/2017/04/23/microsoft-sql-server-r-services---internals-iv</id>
   <content type="html">&lt;p&gt;This post is part of a series of blog-posts about Microsoft SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Microsoft SQL Server R Services - Internals III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server R Services - Internals IV (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Microsoft SQL Server R Services - Internals V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Microsoft SQL Server R Services - Internals VI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This post is the fifth post about Microsoft SQL Server R Services, and the fourth post that drills down into the internal of how it works. In &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;, I wrote about how the launchpad service creates multiple processes when executing an external script.&lt;/p&gt;

&lt;p&gt;Seeing that some of the conclusions I came to was somewhat educated guesses, I asked you guys to correct me where I was in-correct and/or add more information. After that post - Bob Albright (&lt;a href=&quot;https://twitter.com/bob_albright&quot;&gt;@bob_albright&lt;/a&gt;) - wrote me an email and pointed me to some resources around process creation, as well as some demo code. Thanks Bob!&lt;/p&gt;

&lt;p&gt;So today we'll drill even further into the creation of processes, and see how they are used.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;, we talked about how, during installation of an R enabled SQL Server instance, 20 Windows accounts are created. These accounts are created for the purpose to be able to provide isolation between users when executing external scripts.&lt;/p&gt;

&lt;p&gt;In addition to the Windows user accounts created during installation, folders named as the individual Windows accounts are also created in the &lt;code&gt;c:\&amp;lt;sql_instance_path&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; folder. These folders act as storage for files, results, objects, etc., during execution of an external script.&lt;/p&gt;

&lt;p&gt;When a user executes an external script in SQL Server, that account is being mapped to one of the 20 Windows account created, and it is under that Windows account the external part of the script is executed. Subsequently the files, etc., mentioned above, ends up in that folder somewhere. I write somewhere, because it is not entirely correct to say that the files, results, etc., are stored directly in the user folder. They are in fact stored in sub-folders of the user folder.&lt;/p&gt;

&lt;p&gt;During execution the launchpad service creates working directories (the sub-folders above) and processes, and assigns the working directories and processes the same names (&lt;code&gt;Guid&lt;/code&gt; values).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 1&lt;/em&gt; below shows the flow when executing a script:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad_processes_post.png&quot; width=&quot;650&quot; height=&quot;466&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Flow when Executing a Script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As per the figure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We see backing folders in &lt;code&gt;c:\&amp;lt;sql_instance_path&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; for the group of user accounts that are mapped to SQL Server users when executing code via &lt;code&gt;sp_execute_external_script&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When executing, &lt;code&gt;launchpad!CLaunchContext::LaunchServTask&lt;/code&gt; is called, and a satellite session and a session object is created.&lt;/li&gt;
&lt;li&gt;Then the working directories (the sub-folders mentioned above), and RTerm processes are created. In the figure the working directories are named &lt;code&gt;WorkingDir1&lt;/code&gt; etc., whereas in reality the names are &lt;code&gt;Guid&lt;/code&gt; values. The processes are RTerm processes and are assigned the same &lt;code&gt;Guid&lt;/code&gt; as the working directory name. So a RTerm process always executes &quot;under&quot; one user account sub-folder.&lt;/li&gt;
&lt;li&gt;After two initial directories and processes have been created, one of the two processes are assigned to the created session.&lt;/li&gt;
&lt;li&gt;When the process has been assigned to the session, the script is executed via; &lt;code&gt;launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo&lt;/code&gt; and &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;. This normally happens while the third process is created.&lt;/li&gt;
&lt;li&gt;Processes and working directories 4 - 6 are created. These processes are available for subsequent executions.&lt;/li&gt;
&lt;li&gt;When the execution has finished the session is torn down together with the process.

&lt;ul&gt;
&lt;li&gt;At this stage we now have 5 processes running, and 5 working folders.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The above is in essence what &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; covered, and if you want all the &quot;nitty-gritty&quot;, please read that &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Processes&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;, we figured out that, by default, the launchpad service creates 5 processes, plus the process that is used for execution, when executing an external script. In the post I assumed that the reason for creating 5 (well 6 actually), was for performance, and I also wondered where that magic number 5 came from - seeing I couldn't find it in any config files. That's where &lt;a href=&quot;https://twitter.com/bob_albright&quot;&gt;Bob's&lt;/a&gt; email comes in, as he pointed me to a &lt;a href=&quot;https://blogs.msdn.microsoft.com/microsoftrservertigerteam/2016/09/20/tips-sql-r-services-optimization-for-concurrent-execution-of-in-database-analytics-using-sp_execute_external_script/&quot;&gt;blog-post&lt;/a&gt; by the &lt;a href=&quot;https://blogs.msdn.microsoft.com/sql_server_team/&quot;&gt;SQL Server engineering&lt;/a&gt; team, a.k.a TIGER (cool name!).&lt;/p&gt;

&lt;p&gt;So, that particular blog-post mentions that the number of processes spun up can be controlled by a setting in the &lt;code&gt;rlauncher.config&lt;/code&gt; file: &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt;. If not set, it defaults to 5, and in the end, when executing, the setting + 1 processes has been created as per above.&lt;/p&gt;

&lt;p&gt;The post also &quot;kind of&quot; confirms that my assumption about performance being a reason for spinning up multiple processes is correct, considering that a user may execute concurrent requests and it takes around 100 ms to spin up a process. In &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; I mentioned how the processes that are created are added to a pool of processes. So, the  assumption on my part is that when there are multiple processes available, a new request will not execute on a newly created process, but will use a process from the pool.&lt;/p&gt;

&lt;p&gt;Let us see if we can confirm the points about the config setting as well as performance.&lt;/p&gt;

&lt;h3&gt;Controlling Number of Processes&lt;/h3&gt;

&lt;p&gt;Initially we'll begin with looking into the &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt; setting and see if it has any effect on the number of processes being created. In &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; we looked at the number of processes having been spun up while the code was executing and we saw something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad-rterm_processes.png&quot; width=&quot;583&quot; height=&quot;100&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;RTerm Processes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So 6 processes alive while the code is executing. After the code has finished, the executing process is torn down, and we have 5 processes in the pool. That was without having changed any settings, so let's change the settings:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;rlauncher.config&lt;/code&gt; file with your text editor of choice (you need to run the editor as administrator).&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The config file looks something like what you see in &lt;em&gt;Figure 3&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rlauncher_config.png&quot; width=&quot;617&quot; height=&quot;213&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;RLauncher Configuration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you see, there is no &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt; setting. Let us add the setting with a value of 15: &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH=15&lt;/code&gt; and see what happens.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Save the config file after you have added the setting as per above.&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Well, it looks like the launchpad service started, so the setting is not causing any issues (yet). We'll now execute some code and try and figure out if more processes will be created. We use the same code as we did in &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;, where the code has a pause statement, so we can easier look at what is happening:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Script with Pause&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OutputDataSet&amp;lt;-InputDataSet;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                              Sys.sleep(120);'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 42'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TheAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Execute with Sys.sleep&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As in &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;, I use &lt;a href=&quot;https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx&quot;&gt;&lt;em&gt;Process Explorer&lt;/em&gt;&lt;/a&gt; from &lt;strong&gt;Sysinternals&lt;/strong&gt;. So, let's go ahead and see what happens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start &lt;em&gt;Process Explorer&lt;/em&gt;, order by Process, and scroll down to where you see process names starting with &quot;RT&quot; (on my box there are none at this stage), or where those processes should be.

&lt;ul&gt;
&lt;li&gt;If you at this stage see RTerm, restart the launchpad service again and kill those processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 1&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;While the code is running, take a quick look in &lt;em&gt;Process Explorer&lt;/em&gt;, and you should see something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rterm_processes15.png&quot; width=&quot;469&quot; height=&quot;276&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;RTerm Processes after Setting Change&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 4&lt;/em&gt; you can now see 16 &lt;code&gt;RTerm.exe&lt;/code&gt; processes running. Once again, the reason for 16 instead of 15 is that the launchpad service spins up the number it is supposed to, plus one more. After the execution has finished, you will see 15 RTerm processes.&lt;/p&gt;

&lt;p&gt;So yes, the setting does have impact. If you want, you can now delete the setting from the config file and restart the launchpad service.&lt;/p&gt;

&lt;h3&gt;Process Pool Impact on Executions from the Same Session / Concurrent Executions&lt;/h3&gt;

&lt;p&gt;Above I mentioned that I thought that by spinning up these processes, we'll get a performance benefit when executing concurrently or if we are, under the same &lt;code&gt;SPID&lt;/code&gt;, doing subsequent executions. After all, as mentioned above, the processes are added to a process pool, and they should then be available for usage. A bit like connection pooling in ADO.NET or thread pooling in the .CLR.&lt;/p&gt;

&lt;h4&gt;Same Session Multiple Execs&lt;/h4&gt;

&lt;p&gt;Let us start with looking what happens when doing multiple executions in the same SQL Server session (&lt;code&gt;SPID&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;So the way we will do this is to look at the process id of the RTerm processes, and the process id of the executing code. The process id's of the RTerm process we get from &lt;em&gt;Process Explorer&lt;/em&gt;, and in &lt;em&gt;Figure 5&lt;/em&gt; below you see the process id's in the outlined column furthest to the right:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rterm_processids.png&quot; width=&quot;406&quot; height=&quot;85&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;RTerm ProcessId's&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 5&lt;/em&gt; tells us how we can see the id's of the RTerm processes, but how can we see the process id under which the code executes? It's not like we have &lt;code&gt;@@SPID&lt;/code&gt; in the external engine. Fortunately R has a function to get the process id of the process in which the code is executing: &lt;code&gt;Sys.getpid()&lt;/code&gt;. So if we change the code to something like in &lt;em&gt;Code Snippet 2&lt;/em&gt;, we should be able to see the process id, and then be able to compare what we see from the RTerm processes:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Process ID&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    pid &amp;lt;- Sys.getpid()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    data&amp;lt;-InputDataSet
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    data$pid &amp;lt;- pid
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    OutputDataSet&amp;lt;-data;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    Sys.sleep(120);'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 42'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TheAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code  Snippet 2:&lt;/strong&gt; &lt;em&gt;Get the Process Id&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice how we create and add a new column, &lt;code&gt;pid&lt;/code&gt;, to the R data-frame, &lt;code&gt;data&lt;/code&gt;, by: &lt;code&gt;data$pid&lt;/code&gt; (the names &lt;code&gt;pid&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;could be anything). Now, the way we will do this is to, in the same session:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execute the code&lt;/li&gt;
&lt;li&gt;Capture the process id's of the created RTerm processes, before the code has finished executing.&lt;/li&gt;
&lt;li&gt;Look at the result from executing the code in &lt;em&gt;Code Snippet 2&lt;/em&gt; and compare the process id which is part of the result with the process id's we captured from the RTerm processes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When we have done the steps above we repeat it a second time. If my assumption is correct that during a subsequent execution, a process will be used from the pool that was created at first execution; then the process id that comes back from the result of the second execution, should be found in the process id's that were captured during the first execution.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It is important that the second run of the code is done immediately after the first. If not, some of the pooled processes may have been torn down.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let's do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you haven't deleted the &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt; setting from the config file, go ahead and do that.&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;li&gt;Navigate to the &lt;code&gt;Launchpad.exe&lt;/code&gt; process in &lt;em&gt;Process Explorer&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;While the code is executing capture the process id's from the &lt;code&gt;RTerm.exe processes&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The capture of the first execution is shown in &lt;em&gt;Figure 6&lt;/em&gt; below:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rterm_processids_executing.png&quot; width=&quot;414&quot; height=&quot;115&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;Process Id's from First Run&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The result from the code came back with a process id of 16956. If you were to look at the processes directly after the result came back, you would see 5 processes, as process 16956 (the executing process) has been torn down. Now execute the code a second time. The captured processes are now like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rterm_processids_executing2.png&quot; width=&quot;401&quot; height=&quot;115&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; &lt;em&gt;Process Id's from Second Run&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 7&lt;/em&gt; we indeed see that process 16956 is not there any more. When the result comes back the process id is 19028 as in &lt;em&gt;Figure 8&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rterm_processids_result2.png&quot; width=&quot;210&quot; height=&quot;75&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;Result from 2:nd Run&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, looking back at &lt;em&gt;Figure 6&lt;/em&gt;, we see how process id 19028 is part of the processes initially created, so it seems that the assumptions about how processes are used are correct.&lt;/p&gt;

&lt;p&gt;But wait a second when we look at &lt;em&gt;Figure 8&lt;/em&gt;, we see a new process id - 19192, and if we were to look at the processes right after the code has finished running, it would look something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rterm_processids_after_executing2.png&quot; width=&quot;400&quot; height=&quot;86&quot;  &gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; &lt;em&gt;After 2:nd Run&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 9&lt;/em&gt; we see that the process that we executed under in the second run is gone as expected, but we have a new process running - 19192. So what happens is that, in parallel with R executing the code, the launchpad service is spinning up a new process.&lt;/p&gt;

&lt;p&gt;The theory that for executions by the same user and &lt;code&gt;SPID&lt;/code&gt; - the launchpad service uses processes from the pool seems to be correct.&lt;/p&gt;

&lt;h4&gt;Concurrent Executions Different Sessions&lt;/h4&gt;

&lt;p&gt;To see what happens for concurrent executions, by the same user but from different &lt;code&gt;SPID&lt;/code&gt;'s, we'll do it in almost the same way as above. Start with restarting the launchpad service, so we don't have any &quot;hangers on-ers&quot; from previous runs. We copy the code in &lt;em&gt;Code Snippet 2&lt;/em&gt; to a new query window in &lt;em&gt;SQL Server Management Studio&lt;/em&gt;, (this ensures a new &lt;code&gt;SPID&lt;/code&gt;), and then we:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Execute the code in query window 1.&lt;/li&gt;
&lt;li&gt;Capture the RTerm process id's.&lt;/li&gt;
&lt;li&gt;Execute the code in query window 2, while the code in query window 1 still executes.&lt;/li&gt;
&lt;li&gt;Capture the RTerm process id's.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;After both queries have finished executing, you will see that executing concurrently from the same user but different sessions will behave the same was as executing multiple times from the same session:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A process will be picked up from the pool and the code will execute under that session.&lt;/li&gt;
&lt;li&gt;The launchpad service creates a new process, and adds it to the pool.&lt;/li&gt;
&lt;li&gt;When the code has finished executing, the process which it executed under is being torn down,&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;So the theory holds true here as well.&lt;/p&gt;

&lt;h4&gt;Concurrent Executions Different Sessions Different Users&lt;/h4&gt;

&lt;p&gt;So what happens then if there are multiple users executing code concurrently? In this scenario nothing is different from when a single user executes for the first time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The second user will be mapped to another user account,&lt;/li&gt;
&lt;li&gt;The launchpad service creates it's normal 5 processes, plus one.&lt;/li&gt;
&lt;li&gt;The code is executed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rterm_processids_mult_users.png&quot; width=&quot;407&quot; height=&quot;212&quot;  &gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; &lt;em&gt;Two Users Executing Concurrently&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 10&lt;/em&gt; shows what it looks like in &lt;em&gt;Process Explorer&lt;/em&gt; when two different users executes concurrently. I either of these users would then execute another statement, it would be exactly as above where we looked at the single user scenario.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; When looking in &lt;em&gt;Process Explorer&lt;/em&gt; at the RTerm processes you can actually see what process is active. The active process has a value in the &lt;em&gt;CPU&lt;/em&gt; column.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this blog-post I set out to prove/disprove two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;That the setting &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt; can be used to control the number of processes being created by the launchpad service.&lt;/li&gt;
&lt;li&gt;Processes that are added to the pool is being picked up and used for subsequent executions for a user.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;What we saw was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt; is absent from the &lt;code&gt;rlauncher.config&lt;/code&gt; file, the launchpad service creates 5 processes plus 1 by default, and after execution the executing process is torn down. The others are added to the pool.&lt;/li&gt;
&lt;li&gt;When a value has been set for &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt;, the launchpad service creates that number of processes plus one, and after execution the executing process is torn down. The others are added to the pool.&lt;/li&gt;
&lt;li&gt;When a user executes subsequent requests, or concurrent requests from different sessions, processes are picked up and used from the pool.

&lt;ul&gt;
&lt;li&gt;The launchpad service simultaneously creates a new process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, thanks &lt;a href=&quot;https://twitter.com/bob_albright&quot;&gt;Bob&lt;/a&gt; for sending me the mail with the link the the &lt;a href=&quot;https://blogs.msdn.microsoft.com/microsoftrservertigerteam/2016/09/20/tips-sql-r-services-optimization-for-concurrent-execution-of-in-database-analytics-using-sp_execute_external_script/&quot;&gt;post&lt;/a&gt;. That made me look deeper into how this &quot;stuff&quot; works! In that email Bob also sent some code, which will be used as a topic for another internals blog-post. That post will be about parallelism and the RTerm processes.&lt;/p&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SQL Server 2017 - Python Executing Inside SQL Server</title>
   <link href="http://nielsberglund.com/2017/04/20/sql-server-2017-python-executing-from-sql/"/>
   <updated>2017-04-20T20:49:08+02:00</updated>
   <id>http://nielsberglund.com/2017/04/20/sql-server-2017---python-executing-from-sql</id>
   <content type="html">&lt;p&gt;On April 19, 2017 Microsoft held an on-line conference &lt;strong&gt;Microsoft Data Amp&lt;/strong&gt; to showcase how Microsoft’s latest innovations put data, analytics and artificial intelligence at the heart of business transformation. The keynotes speakers were &lt;a href=&quot;https://en.wikipedia.org/wiki/Scott_Guthrie&quot;&gt;Scott &quot;Red Shirt&quot; Guthrie&lt;/a&gt; who is an &lt;em&gt;Microsoft Executive Vice President&lt;/em&gt; (fairly high on the food-chain), and &lt;a href=&quot;https://social.technet.microsoft.com/Profile/Joseph%20Sirosh&quot;&gt;Joseph Sirosh&lt;/a&gt; a &lt;em&gt;Corporate Vice President&lt;/em&gt;, head of the Information Management and Machine Learning group. Joseph probably knows a thing or two about data, and Scott - well, Scott knows &lt;strong&gt;A LOT&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;During the keynotes, Scott and Joseph shared how Microsoft’s latest innovations put data, analytics and artificial intelligence at the heart of business transformation. A big enabler for this is &lt;strong&gt;SQL Server 2017&lt;/strong&gt; (the &quot;artist&quot; formerly known as SQL Server V.Next), which introduces a lot of very cool new &quot;stuff&quot;.&lt;/p&gt;

&lt;p&gt;The keynote speeches were followed by recorded short:ish sessions drilling down into certain aspects of Microsoft's new offerings. If you are interested in the various presentations at &lt;strong&gt;Microsoft Data Amp&lt;/strong&gt;, they all are on &lt;a href=&quot;https://channel9.msdn.com/Events/Data-Science/Microsoft-Data-Amp-2017&quot;&gt;Channel 9&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What caught my eye was the announcement of how &lt;strong&gt;SQL Server 2017&lt;/strong&gt; now supports Python as an extensible script engine. When Microsoft introduced support for R in SQL Server 2016, rumors immediately surfaced how other engines also would be supported, where Python was high on the list (&lt;a href=&quot;https://julialang.org/&quot;&gt;Julia&lt;/a&gt; another one).&lt;/p&gt;

&lt;p&gt;Seeing that I am somewhat into &lt;strong&gt;SQL Server R Services&lt;/strong&gt; (the SQL Server 2016 flavor) &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;here&lt;/a&gt;, and more posts to come, I really had to have a look.&lt;/p&gt;

&lt;p&gt;The rest of this post is a brief introduction to executing Python code in &lt;strong&gt;SQL Server 2017&lt;/strong&gt;, in essence I just want to be able to execute some sort of Python code.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;The installation steps of external scripts engines doe not differ much (at all) from the installation in SQL Server 2016, apart from the fact you now can install Python. So if you feel you need more information abut the install process, please go and read my &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;&lt;strong&gt;Microsoft SQL Server 2016 R Services Installation&lt;/strong&gt;&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;I downloaded the &lt;strong&gt;SQL Server 2017&lt;/strong&gt; CTP 2.0, and after battling trying to register (I assume a couple of other people had the same idea as myself), I managed to get an &lt;code&gt;iso&lt;/code&gt; down to my machine and installed it as an instance. During &lt;em&gt;Feature Selection&lt;/em&gt; at installation time we can see that the promise of Python was not a lie. It is part of &lt;em&gt;Machine Learning Services&lt;/em&gt;, as in &lt;em&gt;Figure 1&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql2k17_python_install.png&quot; width=&quot;289&quot; height=&quot;145&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Python Option In Database&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Looking further we also see how Python can be installed as a stand-alone engine:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql2k17_python_standalone.png&quot; width=&quot;260&quot; height=&quot;74&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Python Option In Database&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The stand-alone installation option is useful, for example,if a data scientist want to run Python (or R) on his or her own machine.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may wonder why, in &lt;em&gt;Figure 2&lt;/em&gt;, the check boxes for R as well as Python is checked, but &quot;dimmed&quot; out? This is because, on this particular machine, I have already installed the standalone versions once.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, so after successful installation, and if you have installed the SQL Server engine, R services and Python services you should see something like so in the &lt;code&gt;C:\path_to_instance&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql2k17_python_directories.png&quot; width=&quot;428&quot; height=&quot;135&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Finished Install&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, let's test this &quot;shiny new thing out&quot;. Oh, in this post I leave out all &quot;grunge&quot; about the launchpad service, etc. If you are interested go ahead and read about it in the &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;previously mentioned post&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Execute Python Code in SQL Server 2017&lt;/h2&gt;

&lt;p&gt;After we have done the installation, but before we can execute the Python (or R) code we need to enable the execution of external scripts. As I covered in the post &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;&lt;strong&gt;Microsoft SQL Server 2016 R Services Installation&lt;/strong&gt;&lt;/a&gt; you enable external scripts by changing the configuration as in &lt;em&gt;Code Snippet 2&lt;/em&gt; &lt;strong&gt;AND&lt;/strong&gt; restarting the instance.&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Enable External Scripts&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_configure&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'external scripts enabled'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;RECONFIGURE&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OVERRIDE&lt;/span&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Execute sp_configure&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After having enabled everything let's execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;. The code is very, very basic - more or less the least what we can get by with for Python. It does have some similarities with the code in the &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;&lt;strong&gt;Microsoft SQL Server 2016 R Services Installation&lt;/strong&gt;&lt;/a&gt; post, and &lt;em&gt;Code Snippet 2&lt;/em&gt; shows the code:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execution of Python Script&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Python'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'print(&quot;The Answer Is 42!!!&quot;)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Test That Python Installation Works&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 3&lt;/em&gt;, we say that the language is Python (the &lt;code&gt;@language&lt;/code&gt; parameter), and that the script we want to execute is a Python print statement: &lt;code&gt;print(&quot;The Answer Is 42!!!&quot;)&lt;/code&gt;. That's all!&lt;/p&gt;

&lt;p&gt;When executing this, something like so should be printed out in the &lt;em&gt;Messages&lt;/em&gt; tab in &lt;strong&gt;SQL Server Management Studio&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql2k17_python_execution_result.png&quot; width=&quot;515&quot; height=&quot;100&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Result from Python Execution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have now executed our first Python code in &lt;strong&gt;SQL Server 2017&lt;/strong&gt;. Just for &quot;giggles&quot;, let us ensure that we still can execute R code:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execution of R Script&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OutputDataSet&amp;lt;-InputDataSet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 42'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TheAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;Test That Execution of R Still Works&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That &lt;em&gt;should&lt;/em&gt; work, and you will see something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/r_result_set.png&quot; width=&quot;160&quot; height=&quot;80&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Result of Execution of R Script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That seemed to work OK, let's ship it!&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;We have in this post seen how &lt;strong&gt;SQL Server 2017&lt;/strong&gt; introduces support for execution if Python in addition to R scripts. There is obviously a lot more to the above than what I have covered in the above, and I will definitely come back to both Python as well as R in future posts.&lt;/p&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 15</title>
   <link href="http://nielsberglund.com/2017/04/16/interesting-stuff-week-15/"/>
   <updated>2017-04-16T20:53:40+02:00</updated>
   <id>http://nielsberglund.com/2017/04/16/interesting-stuff---week-15</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;This week I do not have that much material, but there are still some interesting &quot;stuff&quot;.&lt;/p&gt;

&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/concurrency-distributed-computing&quot;&gt;Our Concurrent Past; Our Distributed Future&lt;/a&gt;. In the roundup for week 11, I had a &lt;a href=&quot;https://www.infoq.com/news/2017/03/distributed-programming-qcon&quot;&gt;link&lt;/a&gt; to a summary of &lt;a href=&quot;http://joeduffyblog.com/&quot;&gt;Joe Duffy's&lt;/a&gt; keynote at &lt;a href=&quot;https://qconlondon.com/&quot;&gt;QCon&lt;/a&gt; in London. This is the actual presentation, video and slides.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;.NET&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mattwarren.org/2017/04/13/The-CLR-Thread-Pool-Thread-Injection-Algorithm/&quot;&gt;The CLR Thread Pool 'Thread Injection' Algorithm&lt;/a&gt;. Ah, deep, &quot;down in the plumbing&quot; of .NET stuff. &lt;a href=&quot;http://mattwarren.org/&quot;&gt;Matt Warren&lt;/a&gt; discusses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hill_climbing&quot;&gt;Hill Climbing&lt;/a&gt; algorithm, and how it is used to control the rate at which threads are added to the CLR thread pool. Oh and if you are interested in the plumbing of .NET/CLT Matt's &lt;a href=&quot;http://mattwarren.org/&quot;&gt;blog&lt;/a&gt; is a treasure trove, full of information.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/04/service-fabric-sdk-open-source&quot;&gt;Azure Service Fabric SDK Becomes Open Source&lt;/a&gt;. An &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; article about, how, Microsoft open sourcing parts of its Service Fabric SDK.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Microsoft Azure&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/appserviceteam/2017/04/06/azure-functions-application-insights/&quot;&gt;Azure Functions now has direct integration with Application Insights&lt;/a&gt;. A blog-post from the &lt;a href=&quot;https://blogs.msdn.microsoft.com/appserviceteam&quot;&gt;Microsoft App Service Team&lt;/a&gt; how Azure Functions now support integration with Azure Application Insights. This is cool on so very many levels, and you guys should really check it out!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://data-artisans.com/continuous-queries-on-dynamic-tables-analyzing-data-streams-with-sql/&quot;&gt;Continuous Queries on Dynamic Tables: Analyzing Data Streams with SQL&lt;/a&gt;. It seems that each weeks &quot;roundup&quot;, has something about Apache Flink, and it's dynamic tables and SQL support. This is yet another blog-post about it. It is really cool &quot;stuff&quot;!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tomaztsql.wordpress.com/2017/04/10/saving-input-and-output-with-sp_execute_external_script/&quot;&gt;Saving input and output with sp_execute_external_script&lt;/a&gt;. &lt;a href=&quot;https://tomaztsql.wordpress.com&quot;&gt;Tomaz&lt;/a&gt; is, as myself, playing around with SQL Server R Services, and in this blog-post he tries to figure out how to store and save the R code being executed with &lt;code&gt;sp_execute_external_script&lt;/code&gt;. It is not as straightforward as it may seem!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Microsoft SQL Server R Services - Internals III&lt;/a&gt;. I finally managed to finish the third part of the &lt;strong&gt;Microsoft SQL Server R Services - Internals&lt;/strong&gt; &quot;saga&quot;. This &quot;episode&quot; looks at how the launchpad service creates various processes.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/04/checkpoint-new-features.html&quot;&gt;New features in the checkpoint package, version 0.4.0&lt;/a&gt;. &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; blogs about the new version of their checkpoint package. The package is designed to make it easy to write reproducible R code by allowing you to go backward (or forward) in time to retrieve the exact versions of the packages you need.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://buckwoody.wordpress.com/2017/04/14/the-team-data-science-process/&quot;&gt;The Team Data Science Process&lt;/a&gt;. Buck Woody writes about the Microsoft Team Data Science Process.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft SQL Server R Services - Internals III</title>
   <link href="http://nielsberglund.com/2017/04/13/microsoft-sql-server-r-services-internals-iii/"/>
   <updated>2017-04-13T06:13:14+02:00</updated>
   <id>http://nielsberglund.com/2017/04/13/microsoft-sql-server-r-services---internals-iii</id>
   <content type="html">&lt;p&gt;This post is part of a series of blog-posts about Microsoft SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server R Services - Internals III (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Microsoft SQL Server R Services - Internals IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Microsoft SQL Server R Services - Internals V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Microsoft SQL Server R Services - Internals VI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This post is the fourth post about Microsoft SQL Server R Services, and the third post that drills down into the internal of how it works. In the previous internals posts &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;here&lt;/a&gt; we have looked at what goes on inside SQL Server when executing an R script, and what happens in the launchpad service when executing.&lt;/p&gt;

&lt;p&gt;This post was initially to be about the R runtime, and what other parts are involved when executing R scripts in SQL Server. However, during my &quot;spelunking&quot; around I realized that I did not really understand what happens when we create the processes for the R runtime from the launchpad service and the launcher (which is what I covered in the &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;internals II post&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So, instead of looking at the R runtime and the other R related components, we'll look at what happens when creating external processes. A subsequent blog-post will cover the R runtime and components.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;To begin with, the code we use in this post to execute R scripts are the same as we have used in the other posts:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execution of Procedure&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OutputDataSet&amp;lt;-InputDataSet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 42'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TheAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Execute sp_execute_external_script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The code in &lt;em&gt;Code Snippet 1&lt;/em&gt; doesn't do much, but it is quite sufficient for our purposes. Having said that, let us get on with it.&lt;/p&gt;

&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;Let us refresh our memories about what the two previous internals posts covered, by looking at some images from those two posts. In &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;internals I&lt;/a&gt; we said that the following happened when executing what &lt;em&gt;Code Snippet 1&lt;/em&gt; shows:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad_post.png&quot; width=&quot;650&quot; height=&quot;241&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Call Flow Executing sp_execute_external_script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 1&lt;/em&gt; we see how an named pipe connection is opened from the SQL Server engine into the launchpad service, and eventually the routine &lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; writes a message to the service. The message will at one stage or another cause the &lt;code&gt;launchpad!CLaunchContext::Launch&lt;/code&gt; routine in the launchpad service to be called.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 2&lt;/em&gt; below, from the &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;internals II&lt;/a&gt; shows the flow the call in &lt;em&gt;Figure 1&lt;/em&gt; enters the launchpad service:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad-r-post.png&quot; width=&quot;650&quot; height=&quot;325&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Launchpad Service Call Flow&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Various routines are called, and eventually &lt;code&gt;launchpad!PhysicalUserContext::LaunchProcess&lt;/code&gt; is called followed by &lt;code&gt;KERNELBASE!CreateProcessInternalW&lt;/code&gt; which creates the &lt;em&gt;RTerm.exe&lt;/em&gt; process, which you can see in &lt;em&gt;Figure 3&lt;/em&gt;. The script to be executed is sent to the R process in the &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;In the beginning of this post I mentioned that I had changed what to cover in this post, and what you see in &lt;em&gt;Figure 3&lt;/em&gt; is partly why I did that:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_launchpad_after_launch_process.png&quot; width=&quot;275&quot; height=&quot;229&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;RTerm Process&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We see a number of RTerm processes, why is that? Let us see if we can answer that question as well as see what happens when we create the processes as well as when the R script code executes. To understand how that works we should however first talk about users and user accounts.&lt;/p&gt;

&lt;h2&gt;User Accounts&lt;/h2&gt;

&lt;p&gt;When we execute something in SQL Server we do it in context of a user, either a SQL Server user or Windows user, and SQL Server has the concept of &lt;code&gt;ISOLATION LEVELS&lt;/code&gt; to ensure that the same code can be executed concurrently. When we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt; however, we exit SQL Server and the actual execution takes place outside of the SQL Server engine; inside the external runtime. The external engine does not have the notion of &lt;code&gt;ISOLATION LEVELS&lt;/code&gt;, so if multiple users executed the same script concurrently, bad things could potentially happen. How can we ensure isolation between users executing concurrently?&lt;/p&gt;

&lt;p&gt;To ensure isolation, SQL Server R Services creates during installation a pool of Windows accounts in a Windows account group. The group (and accounts) are created per instance of SQL Server R Service. The group for SQL Server R Services installed on the default SQL Server instance is &lt;strong&gt;SQLRUserGroup&lt;/strong&gt; and for non-default instances it is &lt;strong&gt;SQLRUserGroupInstanceName&lt;/strong&gt;. On my machine I have three installations of SQL Server, with SQL Server R Services installed on all of them, and &lt;em&gt;Figure 4&lt;/em&gt; shows the groups that have been created:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_usergroups.png&quot; width=&quot;590&quot; height=&quot;228&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;SQL Server R Services User Groups&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So what does a user group look like then? If we double click on the &lt;strong&gt;SQLRUserGroup&lt;/strong&gt;, we'll see something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_usergroup_users.png&quot; width=&quot;389&quot; height=&quot;367&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Members in User Group&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The installation of SQL Server R Services creates by default 20 user accounts, named MSSQLSERVER01...20 for the default instance, and InstanceName01...20 for named instances. When executing external scripts the executing user will be mapped to one of these accounts by the launchpad service.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The number of accounts created can be altered. See this &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/advanced-analytics/r-services/modify-the-user-account-pool-for-sql-server-r-services&quot;&gt;MSDN post&lt;/a&gt; for information about that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;While executing external scripts, there may be a need to store script objects, intermediate results, etc. For this reason the installation of SQL Server R Services not only creates the user accounts as per above, but it also creates folders for each account where to store the objects, results etc. The folders are created at: &lt;code&gt;C:\&amp;lt;path_to_sql_server_instance&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt;, and are named as the user account. In &lt;em&gt;Figure 6&lt;/em&gt; below you see an example of this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_userfolders.png&quot; width=&quot;620&quot; height=&quot;220&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;Folders for User Accounts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is not entirely correct to say that the files, results, etc., are stored directly in the user folder. They are in fact stored in sub-folders of the user folder. Let us do some coding to see an example of the mapping to a user account as well as sub-folders:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service if it is running.&lt;/li&gt;
&lt;li&gt;Delete any sub folders of the user account folders in the &lt;code&gt;C:\&amp;lt;path_to_sql_server_instance&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do NOT delete the user account folders themselves.&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 1&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When you have executed go to the &lt;code&gt;C:\&amp;lt;path_to_sql_server_instance&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory and check in the various user account folders. If you are the only user on the server, you should now see in the &lt;em&gt;xxx01&lt;/em&gt; folder some sub-folders as in &lt;em&gt;Figure 7&lt;/em&gt; below:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_subfolders.png&quot; width=&quot;602&quot; height=&quot;209&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; &lt;em&gt;Sub-folders of the User Account Folder&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If two SQL Server users had executed scripts concurrently two of the user folders would have had sub-folders. If you open one of the sub-folder you should see some files and a folder. This comes from what we mentioned above, about storage of files etc.&lt;/p&gt;

&lt;p&gt;The question is why are there more than one sub-folder, since we only executed the code once? The same question can be asked when you look at &lt;em&gt;Figure 3&lt;/em&gt;, the RTerm processes; why do we have more than one RTerm process for one execution? The other question to ask is if the multiple RTerm processes are related to the multiple sub-folders? We can probably guess that is the case, but can we prove it?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Ina future blog-post I'll look into what the files are that are stored in the sub-folders.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;RTerm Processes&lt;/h2&gt;

&lt;p&gt;The assumption is that there is something in common between the user account's sub-folders and the multiple RTerm processes we saw in &lt;em&gt;Figure 3&lt;/em&gt;. Let us execute some code and see if we can figure out if our assumption is right. For this we should change the code in &lt;em&gt;Code Snippet 1&lt;/em&gt; slightly, to inject an artificial pause in the execution. That way it should be easier for us to see what is going on. The code to execute now looks like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Script with Pause&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OutputDataSet&amp;lt;-InputDataSet;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                              Sys.sleep(120);'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 42'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TheAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Execute with Sys.Sleep&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you can see in &lt;em&gt;Figure 2&lt;/em&gt;, the code looks almost the same as in &lt;em&gt;Code Snippet 1&lt;/em&gt;, apart from that we have injected a &lt;code&gt;Sys.sleep(120)&lt;/code&gt;, which will make the execution stop for 2 minutes. That should give us ample time to do some &quot;spelunking&quot;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; For this investigation I use &lt;strong&gt;Sysinternals&lt;/strong&gt; &lt;a href=&quot;https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx&quot;&gt;&lt;em&gt;Process Explorer&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Delete any sub folders of the user account folders in the &lt;code&gt;C:\&amp;lt;path_to_sql_server_instance&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do &lt;strong&gt;NOT&lt;/strong&gt; delete the user account folders themselves. Keep the &lt;em&gt;File Explorer&lt;/em&gt; open at the &lt;code&gt;ExtensibilityData&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;li&gt;Start &lt;em&gt;Process Explorer&lt;/em&gt;, order by Process, and scroll down to where you see process names starting with &quot;RT&quot; (on my box there are none at this stage), or where the processes should be.

&lt;ul&gt;
&lt;li&gt;If you at this stage see RTerm, restart the launchpad service again and kill those processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;While the code is running, take a quick look in &lt;em&gt;Process Explorer&lt;/em&gt;, and you should see something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad-rterm_processes.png&quot; width=&quot;583&quot; height=&quot;100&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;RTerm Processes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You will see multiple RTerm processes running, quickly right click on each of them and you'll see some properties like in the figure below:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad-rterm_properties.png&quot; width=&quot;650&quot; height=&quot;125&quot;  &gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; &lt;em&gt;RTerm Process Properties&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you look in the properties pop-up window, you can see the part highlighted in &lt;em&gt;Figure 9&lt;/em&gt;, is actually the path and folder name of one of the sub-folders of the user account:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rterm_subfolders.png&quot; width=&quot;605&quot; height=&quot;201&quot;  &gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; &lt;em&gt;User Account Sub-folders&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 10&lt;/em&gt; is just to prove that the above is correct. So it seems that our assumption was correct and that there is a one-to-one relationship between the RTerm processes and the sub-folders.&lt;/p&gt;

&lt;p&gt;It looks like we have answered the question above about correlation between the sub-folders and the RTerm processes, but what about the question why? Well, in my opinion it is for performance reasons. By having a pool of processes for a user, it should be quicker to to execute multiple scripts: a new process does not have to be &quot;spun up&quot; for the execution but can be taken from the process pool.&lt;/p&gt;

&lt;p&gt;So how does this work under the covers?&lt;/p&gt;

&lt;h3&gt;Process Pools&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;internals II post&lt;/a&gt; I covered how an external runtime is launched. However we are not launching a runtime as such, we are launching multiple runtime processes (in this case &lt;code&gt;RTerm.exe&lt;/code&gt;). So even if the &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;previous post&lt;/a&gt; is correct, there are more things going on that what was covered there, and that is related to the multiple processes and the process pool I mentioned above. The way I came across this was due to me pondering why there are multiple RTerm processes launched, and if there was any logic behind the number. I quite often saw 5 processes, and 5 or 6 sub-folders.&lt;/p&gt;

&lt;p&gt;My initial thought was that this is stored in some config file, and the obvious file would be for the launcher(s), and we looked at this file in the previous post:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rlauncher_config.png&quot; width=&quot;617&quot; height=&quot;213&quot;  &gt;
&lt;strong&gt;Figure 11:&lt;/strong&gt; &lt;em&gt;RLauncher Configuration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, the file doesn't contain that much, and nothing that seems to relate to number of processes. There is the &lt;code&gt;USER_POOL_SIZE&lt;/code&gt; setting, but it is set to 0, so I guess it is not that. When looking at the file, I saw the &lt;code&gt;TRACE_LEVEL&lt;/code&gt; setting, and I browsed through the web and came across &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/advanced-analytics/r-services/configure-and-manage-advanced-analytics-extensions&quot;&gt;this post&lt;/a&gt;, which briefly discusses &lt;code&gt;rlauncher.config&lt;/code&gt;, In that post they mention the &lt;code&gt;TRACE_LEVEL&lt;/code&gt; setting which is used to configure the trace verbosity level of the launchpad service, and the traces stored in the log file for the launchers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 = Error (default)&lt;/li&gt;
&lt;li&gt;2 = Performance&lt;/li&gt;
&lt;li&gt;3 = Warning&lt;/li&gt;
&lt;li&gt;4 = Information&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Maybe if we change the &lt;code&gt;TRACE_LEVEL&lt;/code&gt; to 4, we'd be able to get more information. I stopped the launchpad service, and opened the config file as an administrator and changed the &lt;code&gt;TRACE_LEVEL&lt;/code&gt; to 4, and saved it. I then deleted all log files in the &lt;code&gt;C:\&amp;lt;path_to_slq_server_instance&amp;gt;\MSSQL\Log\ExtensibilityLog&lt;/code&gt;, and restarted the launchpad service.&lt;/p&gt;

&lt;p&gt;When opening the &lt;code&gt;rlauncher.log&lt;/code&gt; file, there is quite a lot if interesting information, and in the code snippet below I have selected out some of the more interesting bits and pieces:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Log&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;[2017-04-09 05:37:50.253]
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; # &quot;stuff&quot; from config
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; File=C:\&amp;lt;path_to_sql_server_Instance&gt;\MSSQL\Binn\rlauncher.config
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; RHome=C:\&amp;lt;path_to_sql_server_Instance&gt;\R_SERVICES
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; MpiHome=C:\Program Files\Microsoft MPI
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; InstanceName=MSSQLSERVER
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; LogDirectory=
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      C:\&amp;lt;path_to_sql_server_Instance&gt;\MSSQL\LOG\ExtensibilityLog
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; WorkingDirectory=C:\PROGRA~1\MICROS~2\MSSQL1~1.MSS\MSSQL\EXTENS~1
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; WorkingDirectoryLongPath=
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      C:\&amp;lt;path_to_sql_server_Instance&gt;\MSSQL\ExtensibilityData
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; 1.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; SqlSatellitePath=
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      C:\&amp;lt;path_to_sql_server_Instance&gt;\MSSQL\Binn\sqlsatellite.dll
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; SqlSatelliteRPath=
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      C:\&amp;lt;path_to_sql_server_Instance&gt;\MSSQL\Binn\sqlsatellite.dll
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; SqlSatelliteDirectory=C:\&amp;lt;path_to_sql_server_Instance&gt;\MSSQL\Binn
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; 2.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; ProcessPoolingEnabled=1
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; ProcessRecycleEnabled=0
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; StaleProcessTime=300000 msecs
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; StaleProcessPollTime=60000 msecs
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; TelemetryFlushInterval=300000
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; 3.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; ProcessPoolSqlSatelliteGrowth=5
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; ProcessPoolRxJobGrowth=3&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Excerpt from rlauncher.log&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, some comments about the above:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We have some log entries about &lt;strong&gt;SqlSatellite&lt;/strong&gt;. This is an API to support external code and external run times. We will see more about it in later blog-posts.&lt;/li&gt;
&lt;li&gt;Process pooling, settings if it is enabled and when a process is considered stale. In this case a process is considered stale after 5 minutes of inactivity, and we poll every minute against the processes.&lt;/li&gt;
&lt;li&gt;Aha, settings about size of the pool.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;From the above we can see that the number of processes are not a random number. I still can't find where the actual number is stored, so my assumption is that it is hard coded into respective launcher.&lt;/p&gt;

&lt;p&gt;If you remember from the &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;internal II post&lt;/a&gt;, I said that I believe that the launcher(s) are loaded when the launchpad service starts up. At the end of the log-file we see some entries that points to that as well:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Log&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;SQLSatellite_InitLauncher(600000, 1, 1,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:\&amp;lt;path_to_sql_server_Instance&gt;\MSSQL\LOG\ExtensibilityLog,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:\&amp;lt;path_to_sql_server_Instance&gt;\MSSQL\Binn\sqlsatellite.dll,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:\&amp;lt;path_to_sql_server_Instance&gt;\MSSQL\ExtensibilityData)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    completed: 00000000
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&amp;lt; SQLSatellite_InitLauncher, dllmain.cpp, 157 (4 msecs)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&gt; SQLSatellite_RegisterLaunchContext, dllmain.cpp, 209
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    SQLSatellite_RegisterLaunchContext(000000664E9FF750)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;               completed: 00000000
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&amp;lt; SQLSatellite_RegisterLaunchContext, dllmain.cpp, 209 (0 msecs)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&gt; SQLSatellite_GetSupportedScriptTypes, dllmain.cpp, 107
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    SQLSatellite_GetSupportedScriptTypes(1) completed: 00000000
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&amp;lt; SQLSatellite_GetSupportedScriptTypes, dllmain.cpp, 107 (0 msecs)&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;Initialization of Launcher(s)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The way I read what is in &lt;em&gt;Code Snippet 4&lt;/em&gt; is that at the very end of the launchpad service startup, launchers are initialized, and information about what script types are supported is retrieved.&lt;/p&gt;

&lt;p&gt;We have now seen what happens when the launchpad service is started, and have drawn some conclusions from that. What will the log-file tell us when we execute some code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Delete any sub folders of the user account folders in the &lt;code&gt;C:\&amp;lt;path_to_sql_server_instance&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do &lt;strong&gt;NOT&lt;/strong&gt; delete the user account folders themselves.&lt;/li&gt;
&lt;li&gt;Delete all log files in the &lt;code&gt;C:\&amp;lt;path_to_slq_server_instance&amp;gt;\MSSQL\Log\ExtensibilityLog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 1&lt;/em&gt; (the code without pause).&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When looking through the log-file, it is a LOT of information logged. I have tried to excerpt the most important bits below:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Log-file&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;1.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Session(3291DD7C-4451-48E1-9838-C5A0DF67FA74)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   CleanupOnExit=1, Settings.JobCleanupOnExit=1
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Session 3291DD7C-4451-48E1-9838-C5A0DF67FA74
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   assigned to MSSQLSERVER01 user
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;2.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;ProcessPool(MSSQLSERVER01-ss-2) with minimum processes 5 created
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;3.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;WorkingDirectory(C:...\MSSQLSERVER01\5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF) created (1)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;WorkingDirectory(C:...\MSSQLSERVER01\E7AB7781-A8C7-421F-BAA0-074075B41082) created (1)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;4.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;CreateProces(C:...\R_SERVICES\bin\x64\rterm.exe
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    --slave --no-restore --no-save
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -e &quot;library(RevoScaleR);
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    sessionDirectory &amp;lt;- 'C:\...\5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    sessionId &amp;lt;- '5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;CreateProces(C:...\R_SERVICES\bin\x64\rterm.exe
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    --slave --no-restore --no-save
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -e &quot;library(RevoScaleR);
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    sessionDirectory &amp;lt;- 'C:\...\E7AB7781-A8C7-421F-BAA0-074075B41082';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    sessionId &amp;lt;- 'E7AB7781-A8C7-421F-BAA0-074075B41082';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;5.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Assigning PooledProcess(..., ..., 5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:...\R_SERVICES\bin\x64\rterm.exe)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    to Job PooledProcess-5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF(0000081C)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Assigning PooledProcess(..., ..., E7AB7781-A8C7-421F-BAA0-074075B41082,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:...\R_SERVICES\bin\x64\rterm.exe)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='33' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    to Job PooledProcess-E7AB7781-A8C7-421F-BAA0-074075B41082(00000804)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='34' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='35' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;6.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='36' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Session[3291DD7C-4451-48E1-9838-C5A0DF67FA74]
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='37' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    attached to pooled processes [5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF]
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='38' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='39' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;7.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='40' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;WorkingDirectory(C:...\A379EE0B-385A-41A9-86C3-A5C9D1FFDE7F) created (1)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='41' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;CreateProces
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='42' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:...\R_SERVICES\bin\x64\rterm.exe
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='43' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    ...
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='44' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    sessionId &amp;lt;- 'A379EE0B-385A-41A9-86C3-A5C9D1FFDE7F';
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='45' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='46' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;8. This is interleaved with 7
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='47' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;SQLSatellite_LaunchSatellite(1, 3291DD7C-4451-48E1-9838-C5A0DF67FA74,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='48' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    1, 51008, nullptr, 000000CC5ADFE720,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='49' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:...\ExtensibilityData\MSSQLSERVER01) completed: 00000000  &lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='50' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='51' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;7a. here we continue with creation of processes started at 7
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='52' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Assigning PooledProcess(..., ..., A379EE0B-385A-41A9-86C3-A5C9D1FFDE7F,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='53' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:...\R_SERVICES\bin\x64\rterm.exe)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='54' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    to Job PooledProcess-A379EE0B-385A-41A9-86C3-A5C9D1FFDE7F(00000854)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='55' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='56' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;...
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='57' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='58' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;9.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='59' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;ProcessPool(MSSQLSERVER01-ss-2) adding PooledProcess(..., ...,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='60' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    E7AB7781-A8C7-421F-BAA0-074075B41082,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='61' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:...\R_SERVICES\bin\x64\rterm.exe)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='62' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;ProcessPool(MSSQLSERVER01-ss-2) adding PooledProcess(..., ...,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='63' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    A379EE0B-385A-41A9-86C3-A5C9D1FFDE7F,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='64' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:...\R_SERVICES\bin\x64\rterm.exe)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='65' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;ProcessPool(MSSQLSERVER01-ss-2) adding PooledProcess(..., ...,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='66' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    8CE5541F-3A70-4538-9329-9A74FC0580DE,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='67' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:...\R_SERVICES\bin\x64\rterm.exe)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='68' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;ProcessPool(MSSQLSERVER01-ss-2) adding PooledProcess(..., ...,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='69' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    97608E5B-B70D-4E69-9D6D-56BEC2FC0F81,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='70' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:...\R_SERVICES\bin\x64\rterm.exe)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='71' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;ProcessPool(MSSQLSERVER01-ss-2) adding PooledProcess(..., ...,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='72' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    74E3C23C-56B6-4A16-B1E3-E4C00335FB97,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='73' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    C:...\R_SERVICES\bin\x64\rterm.exe)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='74' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='75' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;10.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='76' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Job PooledProcess-5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF(0000081C)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='77' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    WaitAll(1, 5000) completed with 0
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='78' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Job PooledProcess-5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF(0000081C)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='79' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    destroyed
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='80' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;~WorkingDirectory
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='81' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    (C:...\MSSQLSERVER01\5F3BEB48-4E0A-4D0C-ACCF-3D8C6EB972EF)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='82' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    deleted (0)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='83' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;11.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='84' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Session 3291DD7C-4451-48E1-9838-C5A0DF67FA74
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='85' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   removed from MSSQLSERVER01 user
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='86' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Session(3291DD7C-4451-48E1-9838-C5A0DF67FA74)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='87' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    [SqlSatellite] deleted. Elapsed time: 1222 msecs
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;Log when Executing Script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Geez, quite a lot of information, and - as I mentioned above - I have tried to just show the log entries that I deem important. The entries themselves are also abbreviated quite a bit. So what do we see:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We create a session for this request, and assigns the session to the executing user (MSSQLSERVER01).&lt;/li&gt;
&lt;li&gt;A pool for the processes is created.&lt;/li&gt;
&lt;li&gt;Two working directories (sub-folders) are created for the user (MSSQLSERVER01).&lt;/li&gt;
&lt;li&gt;Two physical RTerm process are created and assigned the id of the sub-folders.&lt;/li&gt;
&lt;li&gt;The processes are added to a job object (which has been created prior to this).&lt;/li&gt;
&lt;li&gt;The session is attached to one of the two processes. This process will now execute the request.&lt;/li&gt;
&lt;li&gt;Four new processes and working directories are created. Interleaved with this is point 8 (below). The existing session is not assigned to any of these. At this stage there are 6 processes in total, two from the original process creation and these four new ones. Five of these processes do not have any session attached.&lt;/li&gt;
&lt;li&gt;From what I can gather, here is where the request is actually executed.&lt;/li&gt;
&lt;li&gt;The 5 processes without the session are added to the process pool, and are available for new requests from the same user.&lt;/li&gt;
&lt;li&gt;The process which executed the request finishes and is being destroyed.&lt;/li&gt;
&lt;li&gt;The session is removed and deleted.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;From the above we can see how processes are created and then being pooled. The processes will eventually be torn down if they are not in use, as per the &lt;code&gt;StaleProcessTime&lt;/code&gt; in &lt;em&gt;Code Snippet 3&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How does all this now fit into what we covered in the &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;internals II post&lt;/a&gt;, and &lt;em&gt;Figure 2&lt;/em&gt; above?&lt;/p&gt;

&lt;h2&gt;WinDbg&lt;/h2&gt;

&lt;p&gt;Well, let us try to find out. For this we use our trusty WinDbg (go back to the &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;internals I post&lt;/a&gt; if you need a re-fresher about WinDbg):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Delete any sub folders of the user account folders in the &lt;code&gt;C:\&amp;lt;path_to_sql_server_instance&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do &lt;strong&gt;NOT&lt;/strong&gt; delete the user account folders themselves.&lt;/li&gt;
&lt;li&gt;Delete all log files in the &lt;code&gt;C:\&amp;lt;path_to_slq_server_instance&amp;gt;\MSSQL\Log\ExtensibilityLog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;li&gt;Attach WinDbg to the launchpad process.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;As we did in the &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;internals I post&lt;/a&gt;, let's hunt for routines from the symbols. When looking at the log files above we see some references to &lt;code&gt;SQLSatellite&lt;/code&gt; and in previous posts we have also seen satellite references. So, let us do a very coarse search: &lt;code&gt;x /n launchpad!*Satellite*&lt;/code&gt;. By using the &lt;code&gt;/n&lt;/code&gt; flag you sort everything by name, which can make things a bit more readable. Looking through what was returned, I have below listed some classes that looks interesting as well a couple of independent routines:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Satellite&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;//classes&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteCommunication&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteMessage&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSatelliteCargoContext&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSatelliteRuntimeContext&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteSessionManager&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satellite_ResourceManager&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;//independent routines&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessForSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_Init&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_InitLaunchContext&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 6:&lt;/strong&gt; &lt;em&gt;Interesting Output&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Having identified interesting classes and function as in &lt;em&gt;Code Snippet 6&lt;/em&gt;, it is time to fine interesting routines, and through trial and error (setting breakpoints and executing code) finding out what is happening. I eventually arrived at the following (please remember from the previous post that I do not have symbols for the &lt;code&gt;RLauncher.dll&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Call Chain&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLaunchContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchServTask&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteSessionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstructSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateSatelliteJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteSessionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateNewSessionObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLaunchContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Launch&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;Rlauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MiscCalls&quot;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessForSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhysicalUserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessInternalW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;Rlauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MiscCalls&quot;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessForSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhysicalUserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessInternalW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satellite_ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcessToJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satellite_ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcessToJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;Rlauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MiscCalls&quot;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessForSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhysicalUserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessInternalW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;5.&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteCommunication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendResumeWithLoginInfo&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;5.&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMessage&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satellite_ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcessToJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;                 &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;Rlauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MiscCalls&quot;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessForSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhysicalUserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='33' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessInternalW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='34' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satellite_ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcessToJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='35' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='36' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;Rlauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MiscCalls&quot;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='37' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='38' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessForSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='39' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhysicalUserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='40' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessInternalW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='41' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satellite_ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcessToJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='42' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='43' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;Rlauncher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MiscCalls&quot;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='44' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='45' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessForSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='46' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhysicalUserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='47' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessInternalW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='48' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satellite_ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcessToJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='49' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;6.&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='50' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;7.&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteSessionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DestroySatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='51' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mf&quot;&gt;7.&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteSessionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveSessionObjectFromStore&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 7:&lt;/strong&gt; &lt;em&gt;High Level Call Chain&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From &lt;em&gt;Code Snippet 7&lt;/em&gt; we see how we:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Call &lt;code&gt;LaunchServTask&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Creating a satellite session, a job object and a session object.&lt;/li&gt;
&lt;li&gt;We then come into the code path were we launch the launcher and create the RTerm processes: &lt;code&gt;launchpad!CLaunchContext::Launch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In there we do calls to the launcher dll (&lt;code&gt;Rlauncher!&quot;MiscCalls&quot;&lt;/code&gt;), create the actual processes and assigns that to the job object. We initially create two processes, and one of the processes will be mapped to the session (as we saw from the log-file).&lt;/li&gt;
&lt;li&gt;The calls &lt;code&gt;launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo&lt;/code&gt; and &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; is where the script is sent to the R process and executed. These calls are interleaved with the create process calls.&lt;/li&gt;
&lt;li&gt;We continue creating processes until we have six in total.&lt;/li&gt;
&lt;li&gt;The executing process (and session) is torn down when the execution has finished.&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; While the code executes we may see six RTerm processes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;So, what does all this come to then? We have &lt;em&gt;Figure 2&lt;/em&gt; which originates from the &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;internals II post&lt;/a&gt;, where we looked into what is going on in the launchpad service. In this post we have seen the log files in &lt;em&gt;Code Snippet 3, 4, 5&lt;/em&gt; and then we have the WinDbg output in &lt;em&gt;Code Snippet 7&lt;/em&gt;. In &lt;em&gt;Figure 12&lt;/em&gt; I try to summarize what we have discussed in this post:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad_processes_post.png&quot; width=&quot;650&quot; height=&quot;466&quot;  &gt;
&lt;strong&gt;Figure 12:&lt;/strong&gt; &lt;em&gt;Summary&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 12&lt;/em&gt; we see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How there are backing folders in &lt;code&gt;C:\&amp;lt;path_to_sql_server_instance&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; for the group of user accounts that are mapped to SQL Server users when executing code via &lt;code&gt;sp_execute_external_script&lt;/code&gt;. These backing folders will be storage for files etc., when executing.

&lt;ul&gt;
&lt;li&gt;The files are not placed directly in the account folder but in sub-folders created when the processes are created (see below).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When executing we, as in &lt;em&gt;Code Snippet 7&lt;/em&gt;, call &lt;code&gt;launchpad!CLaunchContext::LaunchServTask&lt;/code&gt;, and create a satellite session and a session object.&lt;/li&gt;
&lt;li&gt;We then go on and start creating working directories (the sub-folders mentioned above), and processes. In the figure the working directories are named &lt;code&gt;WorkingDir1&lt;/code&gt; etc., whereas in reality the names are &lt;code&gt;Guid&lt;/code&gt; values. The processes are RTerm processes and are assigned the same &lt;code&gt;Guid&lt;/code&gt; as the working directory name. So a RTerm process always executes &quot;under&quot; one user account sub-folder.&lt;/li&gt;
&lt;li&gt;After two initial directories and processes have been created, one of the two processes are assigned to the created session.&lt;/li&gt;
&lt;li&gt;When the process has been assigned to the session, the script is executed via; &lt;code&gt;launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo&lt;/code&gt; and &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;. This normally happens while the third process is created.&lt;/li&gt;
&lt;li&gt;Processes and working directories 4 - 6 are created. These processes are available for subsequent executions.&lt;/li&gt;
&lt;li&gt;When the execution has finished the session is torn down together with the process.

&lt;ul&gt;
&lt;li&gt;At this stage we now have 5 processes running, and 5 working folders.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As was the case in the &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;internals II post&lt;/a&gt;, some parts of this post is educated guesswork. If anyone have more information I wild be more than happy to correct any inaccuracies. In either case, I hope you have enjoyed this journey in the &quot;bowels&quot; of the launchpad service.&lt;/p&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 

</feed>
