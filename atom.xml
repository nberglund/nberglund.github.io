<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>MANAGED DATA</title>
 <link href="http://nielsberglund.com/atom.xml" rel="self"/>
 <link href="http://nielsberglund.com/"/>
 <updated>2017-04-02T16:42:06+02:00</updated>
 <id>http://nielsberglund.com</id>
 <author>
   <name>Niels Berglund</name>
   <email></email>
 </author>

 
 <entry>
   <title>Interesting Stuff - Week 13</title>
   <link href="http://nielsberglund.com/2017/04/02/interesting-stuff-week-13/"/>
   <updated>2017-04-02T16:39:25+02:00</updated>
   <id>http://nielsberglund.com/2017/04/02/interesting-stuff---week-13</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/uber-flink-stream&quot;&gt;Stream Processing &amp;amp; Analytics with Flink @Uber&lt;/a&gt;. A presentation about how Uber builds its next generation of stream processing system to support real-time analytics as well as complex event processing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/uber-linkedin-analytics&quot;&gt;Scaling up Near Real-time Analytics @Uber &amp;amp;LinkedIn&lt;/a&gt;. Another presentation involving Uber. This time in combination with LinkedIn, and how they use Apache Samza, Apache Calcite and Pinot.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/netflix-recommendation-spark&quot;&gt;Real-time Recommendations using Spark Streaming&lt;/a&gt;. Presentation about how Netflix uses Kafka, Spark Streaming, and Cassandra for real-time recommendations.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://labs.spotify.com/2016/02/25/spotifys-event-delivery-the-road-to-the-cloud-part-i/&quot;&gt;Spotify’s Event Delivery – The Road to the Cloud (Part I)&lt;/a&gt;. First post in a series about what Spotify is handling event delivery. Really interesting!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/context-in-perspective-6-taking-sessions-to-task/&quot;&gt;Context in perspective 6: Taking Sessions to Task&lt;/a&gt;. The sixth post by &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt; about context in SQL Server. As usual it is a treasure trove of SQL Server internals information!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlskills.com/blogs/kimberly/sqlskills-sql101-partitioning/&quot;&gt;SQLskills SQL101: Partitioning&lt;/a&gt;. Kimberly continues &lt;a href=&quot;https://www.sqlskills.com&quot;&gt;SQLskills&lt;/a&gt; SQL101 series with a post about partitioning.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/bobsql/2017/03/27/sql-server-on-linux-core-minidumps-and-breakpad/&quot;&gt;SQL Server On Linux: Core-minidumps and Breakpad&lt;/a&gt;. An awesome post by Bob Dorr about debugging SQL Server on Linux and core dumps.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;. Earlier today I finished the third post in my series about Microsoft SQL Server R Services. This post being the second about the internals. The post drills down into the launchpad service.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/03/uk-statistics.html&quot;&gt;UK government using R to modernize reporting of official statistics&lt;/a&gt;. A post from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; how the UK government uses R.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/03/scrabblr.html&quot;&gt;Learning Scrabble strategy from robots, using R&lt;/a&gt;. Another post from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt;, this time about how R has been used to analyze Scrabble games.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft SQL Server R Services - Internals II</title>
   <link href="http://nielsberglund.com/2017/04/02/microsoft-sql-server-r-services-internals-ii/"/>
   <updated>2017-04-02T09:38:00+02:00</updated>
   <id>http://nielsberglund.com/2017/04/02/microsoft-sql-server-r-services---internals-ii</id>
   <content type="html">&lt;p&gt;This post is part of a series of blog-posts about Microsoft SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server R Services - Internals II (this post)&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This post is the third post about Microsoft SQL Server R Services, and the second post that drills down into the internal of how it works. In the &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;previous internals post&lt;/a&gt; we looked at what happens inside the SQL Server engine when  we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;. In that post we wrapped up when we reached the launchpad service (&lt;em&gt;Launchpad.exe&lt;/em&gt;). This post will look closer at the launchpad service, and we will do it by some more &quot;spelunking&quot;&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;In both previous posts about SQL Server R Services I have mentioned that the launchpad service is responsible for launching an external runtime when we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;. In the &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Internals I&lt;/a&gt; post the following picture showed what happened inside the SQL server engine when executing the procedure:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad_post.png&quot; width=&quot;650&quot; height=&quot;241&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Call Flow Executing sp_execute_external_script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From &lt;em&gt;Figure 1&lt;/em&gt; we see how an named pipe connection is opened from the SQL Server engine into the launchpad service, and eventually the routine &lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; writes a message to the service. The message will at one stage or another cause the &lt;code&gt;launchpad!CLaunchContext::Launch&lt;/code&gt; routine in the launchpad service to be called. In a little while we'll see how we came to that conclusion.&lt;/p&gt;

&lt;h2&gt;Launchpad&lt;/h2&gt;

&lt;p&gt;Launchpad is a new service installed together with SQL Server 2016, and it is there to support execution of scripts targeting external runtimes/engines. The launchpad service calls into launchers, and it is the launcher's job to launch the correct runtime/engine. How does the launchpad service know what launcher dll to call into? To answer that, cast your mind back to the previous post about &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;internals&lt;/a&gt;, in that post we looked at the procedure used to execute external scripts: &lt;code&gt;sp_execute_external_script&lt;/code&gt;, and we executed some code like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execution of Procedure&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OutputDataSet&amp;lt;-InputDataSet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 42'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TheAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Execute sp_execute_external_script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Looking at the code in &lt;em&gt;Code Snippet 1&lt;/em&gt; we see the first parameter being the &lt;code&gt;@language&lt;/code&gt; parameter, and it is this parameter that tells the launchpad service to use (in this case) the launcher for R.&lt;/p&gt;

&lt;h3&gt;Launchers&lt;/h3&gt;

&lt;p&gt;The question still remains though; how does the launchpad service know what specific launcher dll to use? To answer that let us look a little bit more closely at the launchpad service, in the properties dialog:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad_service.png&quot; width=&quot;645&quot; height=&quot;367&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;SQL Server Launchpad Service&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If we look at the &lt;em&gt;Path to executable&lt;/em&gt; setting under the &lt;em&gt;General&lt;/em&gt; as in &lt;em&gt;Figure 2&lt;/em&gt; tab we may get some more insight:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;launchpad.exe&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&quot;C:\&amp;lt;path_to_SQL_instance\&gt;\MSSQL\Binn\launchpad.exe&quot;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; -launcher RLauncher.dll
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; -pipename sqlsatellitelaunch
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; -timeout 600000
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; -logPath &quot;C:\&amp;lt;path_to_SQL_instance&gt;\MSSQL\LOG\ExtensibilityLog&quot;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; -workingDir &quot;C:\&amp;lt;path_to_SQL_instance&gt;\MSSQL\ExtensibilityData&quot;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; -satelliteDllPath &quot;C:\&amp;lt;path_to_SQL_instance&gt;\MSSQL\Binn\sqlsatellite.dll&quot;&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
 &lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Path to Executable for Launchpad.exe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After having copied the value in &lt;em&gt;Path to executable&lt;/em&gt; we see is shown in &lt;em&gt;Code Snippet 2&lt;/em&gt;. And in there we can see a command line argument &lt;code&gt;-launcher&lt;/code&gt; with a value of &lt;em&gt;RLauncher.dll&lt;/em&gt;. If we search for a file named &lt;em&gt;RLauncher.dll&lt;/em&gt; we find it in the &lt;em&gt;Binn&lt;/em&gt; directory together with all other SQL Server files:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rlauncher.png&quot; width=&quot;610&quot; height=&quot;230&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;RLauncher&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, a theory is that during startup, the launchpad service reads in the value of the -launcher argument, and perhaps even loads the dll. Is there any way we can prove that theory? We can try:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;em&gt;Services&lt;/em&gt; and stop the launchpad service&lt;/li&gt;
&lt;li&gt;Delete all files from the directory the &lt;code&gt;-logPath&lt;/code&gt; parameter points to.&lt;/li&gt;
&lt;li&gt;Start the launchpad service.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;You should now see a couple of new files in the log directory, and when you open them you can see how there are log messages about &lt;em&gt;RLauncher.dll&lt;/em&gt;. If you have &lt;em&gt;Process Explorer&lt;/em&gt; installed you can also verify that &lt;em&gt;RLauncher.dll&lt;/em&gt; is loaded by finding the launchpad service process and then look at dll's as in &lt;em&gt;Figure 4&lt;/em&gt; below:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_launchpad_rlauncher.png&quot; width=&quot;390&quot; height=&quot;295&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;RLauncher Loaded&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before we start &quot;spelunking&quot; with WinDbg, let's look at the arguments used by the launchpad service (as seen in &lt;em&gt;Code Snippet 2&lt;/em&gt;) and see what they mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-launcher&lt;/code&gt;: Full path to the launcher.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-logPath&lt;/code&gt;: The launchpad's base log path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-satelliteDllPath&lt;/code&gt;: The sql satellite dll path for the satellites, we'll talk more about them in subsequent posts.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-workingDir&lt;/code&gt;: The launchpad and satellite process base working directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-cleanupLog&lt;/code&gt;: Whether to cleanup the log directory after every execution [0|1] (not set above).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-cleanupWorkingDir&lt;/code&gt;: Whether to cleanup the working directory after every execution [0|1] (not set above).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-pipeName&lt;/code&gt;: Define the launchpad's name pipe's name - this is from connection from SQL Server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-timeout&lt;/code&gt;: Define the default timeout in ms.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-SqlInstanceName&lt;/code&gt;: Define the SqlInstanceName as in MSSQLSERVER or blank for default or an instance name (not set above).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some of the arguments (most in fact) I found in what I copied from the properties dialog for the service and the field &lt;em&gt;Path to executable&lt;/em&gt; mentioned above. However a couple of the arguments were found by, from command prompt, trying to run the launchpad executable like so: &lt;code&gt;C:\&amp;lt;path_to_sql_server_instance&amp;gt;\MSSQL\Binn&amp;gt;launchpad.exe&lt;/code&gt; without any arguments. That resulted in an error and some help how to run the launchpad service.&lt;/p&gt;

&lt;p&gt;What was interesting in that, was that it - apart from listing the arguments above - also gave an example:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Launchpad Example&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;Example:
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;launchpad.exe
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -launcher RLauncher.dll
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -launcher PythonLauncher.dll
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -logPath C:\Temp
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -pipeName mypipename
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -timeout 60000
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    -SqlInstanceName MSSQLSERVER&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Example of How to Launch Launchpad Defining Multiple Launchers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice how in &lt;em&gt;Code Snippet 3&lt;/em&gt; above, multiple launchers are defined, and a launcher for Python being one of them. Maybe we'll soon see Python being supported as well!&lt;/p&gt;

&lt;h3&gt;WinDbg Investigations&lt;/h3&gt;

&lt;p&gt;By now we know (or at least we have a strong hunch) that during startup of the launchpad service, the launchers are loaded. Now it is time to start drilling down in what happens inside the launchpad service when we execute code as in &lt;em&gt;Code Snippet 1&lt;/em&gt;. First, let us look at what happens during connection from the SQL Server engine to the launchpad service. In the &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Internals - I post&lt;/a&gt; I mentioned how SQL Server opens a named pipe connection to the launchpad service in the &lt;code&gt;sqllang!CSQLSatelliteConnection::OpenNPConnection&lt;/code&gt; routine.&lt;/p&gt;

&lt;p&gt;When named pipes are used, the client connects to a certain named pipe through the &lt;code&gt;ConnectNamedPipe&lt;/code&gt; routine. Let's do some &quot;spelunking&quot; in the launchpad service using WinDbg, and see if we can find anything that can have anything to do with named pipes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service if it is running.&lt;/li&gt;
&lt;li&gt;Restart the service.&lt;/li&gt;
&lt;li&gt;Open an instance of WinDbg and attach to the &lt;em&gt;Launchpad.exe&lt;/em&gt; process.&lt;/li&gt;
&lt;li&gt;Reload the symbols: &lt;code&gt;.reload /f&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;internals - I post&lt;/a&gt; has more information how to attach to a process, and what commands to use.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Now, do a search for routines named like &lt;code&gt;ConnectNamedPipe&lt;/code&gt;: &lt;code&gt;x *!*ConnectNamedPipe*&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_windbg_launchpad_connectnamedpipe.png&quot; width=&quot;616&quot; height=&quot;190&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Routines Named ConnectNamedPipe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 5&lt;/em&gt; shows the result after the search, and the &lt;code&gt;KERNELBASE!ConnectNamedPipe&lt;/code&gt; routine looks promising. To find out what happens, we'll:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a second instance of WinDbg.&lt;/li&gt;
&lt;li&gt;Attach it to the &lt;em&gt;sqlservr.exe&lt;/em&gt; process.&lt;/li&gt;
&lt;li&gt;Reload the symbols by: &lt;code&gt;.reload /f&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set a breakpoint at the &lt;code&gt;OpenNPConnection&lt;/code&gt; routine: &lt;code&gt;bp sqllang!CSQLSatelliteConnection::OpenNPConnection&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;In the debugger attached to the launchpad service we set a breakpoint at &lt;code&gt;ConnectNamedPipe&lt;/code&gt;: &lt;code&gt;bp KERNELBASE!ConnectNamedPipe&lt;/code&gt;. We then execute the code in &lt;em&gt;Code Snippet 1&lt;/em&gt; and see what happens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;sqllang!CSQLSatelliteConnection::OpenNpConnection&lt;/code&gt; breakpoint is hit.&lt;/li&gt;
&lt;li&gt;After continuing, the &lt;code&gt;KERNELBASE!ConnectNamedPipe&lt;/code&gt; breakpoint in the launchpad service is hit.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The call-stack at this point looks something like so (call stack output by &lt;code&gt;k c&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Callstack&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;007&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;span class=&quot;cp&quot;&gt;# Call Site&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectNamedPipe&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsyncAccept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x143&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrepareForNextAccept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x9b&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mo&quot;&gt;03&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SNIAcceptDoneWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x83&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqldk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOS_Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x231&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mo&quot;&gt;05&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqldk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOS_Scheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RunTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xaa&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqldk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOS_Scheduler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessTasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3cd&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mo&quot;&gt;07&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqldk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SchedulerManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkerEntryPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2a1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqldk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SystemThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RunWorker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x8f&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqldk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SystemThreadDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessWorker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2de&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqldk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SchedulerManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThreadEntryPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1d8&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERNEL32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseThreadInitThunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x14&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ntdll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RtlUserThreadStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x21&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;Callstack at KERNELBASE!ConnectNamedPipe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So that is how SQL Server connects into the launchpad service:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;SQL Server calls &lt;code&gt;sqllang!CSQLSatelliteConnection::OpenNpConnection&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The launchpad service is doing &lt;code&gt;launchpad!SNIAcceptDoneWrapper&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Followed by &lt;code&gt;KERNELBASE!ConnectNamedPipe&lt;/code&gt;, and the named pipe is now open.&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The above is very simplified, in fact a lot of things happen in parallel, and we'll touch upon that a bit later.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let us now go on and have a look what happens after the connection has been made. How do we go about finding out what happens? Well, we can do it the &quot;brute force&quot; way:&lt;/p&gt;

&lt;p&gt;We know that the launcher for R will try and load the R runtime, and if we look in the &lt;code&gt;MSSQL\Binn&lt;/code&gt; folder where the &lt;code&gt;RLauncher.dll&lt;/code&gt; resides we find a config file for the launcher: &lt;code&gt;rlauncher.config&lt;/code&gt;. Let's see what it contains:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rlauncher_config.png&quot; width=&quot;617&quot; height=&quot;213&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;RLauncher Configuration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 5&lt;/em&gt; we see that the configuration file for the launcher contains the &lt;code&gt;RHOME&lt;/code&gt; path. With that in mind we can assume that the launcher will call into there and launch the runtime. What happens if the launcher cannot find the path? An exception would probably be thrown, and if we were debugging we could hopefully catch it and have a look at the stack. To test this theory:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service if it is running.&lt;/li&gt;
&lt;li&gt;Remove the &lt;code&gt;R_SERVICES&lt;/code&gt; directory and its content and place it somewhere else.&lt;/li&gt;
&lt;li&gt;Delete all files from the directory the &lt;code&gt;-logPath&lt;/code&gt; argument in &lt;em&gt;Code Snippet 3&lt;/em&gt; points to.&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Please, please, please &lt;strong&gt;DO NOT&lt;/strong&gt; do this on a production server!!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The restart should just go fine, and you can now attach WinDbg to the launchpad process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open an instance of WinDbg and attach to the &lt;em&gt;Launchpad.exe&lt;/em&gt; process.&lt;/li&gt;
&lt;li&gt;Reload the symbols: &lt;code&gt;.reload /f&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hit F5 to let the debugger run.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When the debugger runs, you execute the code in &lt;em&gt;Code Snippet 1&lt;/em&gt;, and you get an ugly error in management studio:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_rlauncher_exception.png&quot; width=&quot;617&quot; height=&quot;213&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;SQL Exception&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yeah, kind of obvious that the runtime for R cannot be launched as it is nowhere to be found. WinDbg also reports some exceptions but the debugger is still running. When looking at the exceptions you see something like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;WinDbg Exception&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;(2fcc.34c8): C++ EH exception - code e06d7363 (first chance)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;(2fcc.35c): C++ EH exception - code e06d7363 (first chance)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;[2017-04-01 07:14:54.605][Error]
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;ProcessPool::CreateProcess(MSSQLSERVER01-ss-2,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  78A18DD6-14A7-4BFA-BC1C-664A653A070C) failed with:
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  Failed with (80070003) to start executable
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  C:\&amp;lt;path_to_sql_instance&gt;\R_SERVICES\bin\x64\rterm.exe
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  with args  --slave --no-restore --no-save -e &quot;library(RevoScaleR);&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;C++ EH Exception&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 5&lt;/em&gt; we see that the launcher tries and create a process for &lt;code&gt;RTerm.exe&lt;/code&gt; which is the entry-point to the R runtime. So the question is what was being called to get to this point. If you break out of the debugger and under the &lt;em&gt;Debug&lt;/em&gt; menu choose &lt;em&gt;Event Filters&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_windbg_eventfilters.png&quot; width=&quot;430&quot; height=&quot;399&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; &lt;em&gt;Event Filter&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In there you can choose how certain events are handled. In &lt;em&gt;Code Snippet 5&lt;/em&gt; we see that the exception we encounter is a &lt;code&gt;C++ EH&lt;/code&gt; exception, so in the &lt;em&gt;Event Filters&lt;/em&gt; dialog you can set how that particular exception should be handled. We want it to be enabled, but not handled:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_windbg_eventfilters_enable.png&quot; width=&quot;543&quot; height=&quot;392&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;Enable C++ EH Exception&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you execute the code again after having enabled the exception as in &lt;em&gt;Figure 8&lt;/em&gt;, the debugger will now break at the exception, and you can view the call-stack through the &lt;code&gt;k&lt;/code&gt; command. In &lt;em&gt;Code Snippet 6&lt;/em&gt; below I show an abbreviated part of the call-stack:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Call-stack&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;0:010&gt; k
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;...
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;06  RLauncher!GetInstance+0x3239f
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;07  RLauncher!GetInstance+0x32a5d
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;08  RLauncher!GetInstance+0x5aeee
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;09  RLauncher!GetInstance+0x3fbca
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;0a  RLauncher!GetInstance+0x1c864
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;0b  RLauncher!SQLSatellite_GetLauncherAPI+0x9dd
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;0c  launchpad!CLaunchContext::Launch+0x160
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;0d  launchpad!CLaunchContext::LaunchInternal+0x2df
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;0e  launchpad!CLaunchContext::LaunchServTask+0x357
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;0f  sqldk!SOS_Task::Param::Execute+0x231&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 6:&lt;/strong&gt; &lt;em&gt;Call Stack at Exception&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 6&lt;/em&gt; we see the &lt;code&gt;launchpad!CLaunchContext::Launch&lt;/code&gt; routine, the same we identified in the &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;internals I post&lt;/a&gt;. That routine has an important part to play when calling into the launcher. When you look at &lt;em&gt;Code Snippet 5&lt;/em&gt; you also see routines from the &lt;code&gt;RLauncher&lt;/code&gt; module. Unfortunately we cannot really see what goes on inside the launcher as there is no symbol file for it.&lt;/p&gt;

&lt;p&gt;Coming back to &lt;code&gt;launchpad!CLaunchContext::Launch&lt;/code&gt;; I said it has an important part to play, and it does. However the &lt;code&gt;launchpad!CLaunchContext::LaunchServTask&lt;/code&gt; routine which you also can see in &lt;em&gt;Code Snippet 6&lt;/em&gt; is even more important. That routine sets up most of the things that happen when SQL Server calls into the launchpad service. When I talked about the named pipe connection and how things happened in parallel, if you were to set a breakpoint at &lt;code&gt;launchpad!CLaunchContext::Launch&lt;/code&gt; and then output the call-stack and compared that call-stack to what is shown in &lt;em&gt;Code Snippet 4&lt;/em&gt;, you would see that both call-stacks have the same originating methods and addresses.&lt;/p&gt;

&lt;p&gt;Seeing that we don't have symbol files for the RLauncher module we have to &quot;hunt&quot; around in WinDbg as well as making some assumptions of what is happening if we want to go further in the &quot;spelunking&quot;. When we, in &lt;em&gt;Code Snippet 5&lt;/em&gt; looked at the exception we received in the debugger we saw something about &lt;code&gt;CreateProcess&lt;/code&gt;, and we already saw the &lt;code&gt;Launch&lt;/code&gt; routine in &lt;em&gt;Code Snippet 6&lt;/em&gt;. What if we were to look for something like that in the &lt;code&gt;launchpad&lt;/code&gt; module: &lt;code&gt;x launchpad!*Launch*Process*&lt;/code&gt;. That reveals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;launchpad!SQLSatellite_LaunchProcess&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!PhysicalUserContext::LaunchProcess&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Especially the second; &lt;code&gt;launchpad!PhysicalUserContext::LaunchProcess&lt;/code&gt;, is interesting - as when launching the R runtime it should be done in the context of a user. So let us set a couple of breakpoints and see what happens. Set one breakpoint at: &lt;code&gt;bp launchpad!CLaunchContext::Launch&lt;/code&gt; and the other at: &lt;code&gt;launchpad!PhysicalUserContext::LaunchProcess&lt;/code&gt;. Then execute the code again.&lt;/p&gt;

&lt;p&gt;When executing we see how we first break at &lt;code&gt;bp launchpad!CLaunchContext::Launch&lt;/code&gt;, followed by &lt;code&gt;launchpad!PhysicalUserContext::LaunchProcess&lt;/code&gt;, and we still have not had any exceptions. If you now hit F5, you will hit the exceptions immediately. So it seems that the &lt;code&gt;launchpad!PhysicalUserContext::LaunchProcess&lt;/code&gt;, is where it happens; where we try and load the R runtime.&lt;/p&gt;

&lt;p&gt;To confirm this we can copy back the &lt;code&gt;R_SERVICES&lt;/code&gt; directory to where it is supposed to be, and while still having a breakpoint at &lt;code&gt;launchpad!PhysicalUserContext::LaunchProcess&lt;/code&gt; execute the code again. When you hit the breakpoint, go to process explorer and have a look at running processes where the process is named something with R. On my machine it looks something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_launchpad_before_launch_process.png&quot; width=&quot;246&quot; height=&quot;231&quot;  &gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; &lt;em&gt;Before LaunchProcess&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After having continued the debugger, it looks like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_launchpad_after_launch_process.png&quot; width=&quot;275&quot; height=&quot;229&quot;  &gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; &lt;em&gt;After LaunchProcess&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 10&lt;/em&gt; we now see how some instances of &lt;code&gt;RTerm.exe&lt;/code&gt; has been spun up. In next post we'll look at why there are multiple instances.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;We should now have a somewhat better understanding of what happens when the launchpad service is called from SQL Server. In &lt;em&gt;Figure 11&lt;/em&gt; below shows some of the significant events/calls when &lt;code&gt;sp_execute_external_script&lt;/code&gt; is executed:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad-r-post.png&quot; width=&quot;650&quot; height=&quot;325&quot;  &gt;
&lt;strong&gt;Figure 11:&lt;/strong&gt; &lt;em&gt;Launchpad Service Call Flow&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The flow is something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A call comes in from SQL Server.&lt;/li&gt;
&lt;li&gt;Enters the launchpad process, and workers, schedulers, tasks, etc., comes into play.&lt;/li&gt;
&lt;li&gt;Eventually &lt;code&gt;sqldk!SOS_Scheduler::RunTask&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;Named pipe connection is accepted and opened.&lt;/li&gt;
&lt;li&gt;More or less in parallel &lt;code&gt;launchpad!CLaunchContext::LaunchServTask&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;We get into &lt;code&gt;launchpad!CLaunchContext::Launch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;launchpad!CLaunchContext::Launch&lt;/code&gt; routine calls into the launcher.&lt;/li&gt;
&lt;li&gt;Finally &lt;code&gt;launchpad!PhysicalUserContext::LaunchProcess&lt;/code&gt; is called and the RTerm process is started.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Some of the above are somewhat educated guesswork since I don't have the symbol file for &lt;code&gt;RLauncher.dll&lt;/code&gt;. I do however believe it is more or less accurate. In the next internals post we'll look at what happens in the RTerm process.&lt;/p&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 12</title>
   <link href="http://nielsberglund.com/2017/03/26/interesting-stuff-week-12/"/>
   <updated>2017-03-26T19:59:37+02:00</updated>
   <id>http://nielsberglund.com/2017/03/26/interesting-stuff---week-12</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Transaction Systems&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/03/17/omid-reloaded-scalable-and-highly-available-transaction-processing/&quot;&gt;Omid reloaded: scalable and highly-available transaction processing&lt;/a&gt;. &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;the morning paper&lt;/a&gt; looks at &lt;a href=&quot;https://omid.incubator.apache.org/&quot;&gt;Apache Omid&lt;/a&gt;, which is a transactional framework that allowing ACID transactions on top of MVCC key/value NoSQL data-stores.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/context-in-perspective-5-living-next-door-tls/&quot;&gt;Context in perspective 5: Living next door TLS&lt;/a&gt;. &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt; continues his series about context in SQL Server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/sql-server-linux&quot;&gt;SQL Server on Linux: Will it Perform or Not?&lt;/a&gt;. In the &lt;a href=&quot;/2017/03/12/interesting-stuff-week-10/&quot;&gt;roundup for week 10&lt;/a&gt;, I pointed to Slava Oks slide deck from QCon in London about SQL Server on Linux. This is the video from the presentation.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://engineering.skybettingandgaming.com/2017/03/22/implementing-the-schema-registry/&quot;&gt;Implementing The Schema Registry&lt;/a&gt;. Interesting article about how &lt;a href=&quot;http://engineering.skybettingandgaming.com/&quot;&gt;Sky Betting &amp;amp; Gaming&lt;/a&gt; use the Confluent Schema Registry to ensure that various teams always encode and decode messages using the same schema.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://data-artisans.com/queryable-state-use-case-demo/&quot;&gt;Queryable State in Apache Flink® 1.2.0: An Overview &amp;amp; Demo&lt;/a&gt;. A very interesting post about &lt;a href=&quot;https://flink.apache.org/&quot;&gt;Apache Flink&lt;/a&gt; now allows you to query application state from external applications.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/03/20/convolutional-neural-networks-part-1/&quot;&gt;Convolutional neural networks, Part 1&lt;/a&gt;. &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;the morning paper&lt;/a&gt; dissects some white papers about Convolutional Neural Networks (CNN).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tomaztsql.wordpress.com/2017/03/20/is-it-possible-to-use-revoscaler-package-in-power-bi/&quot;&gt;Is it possible to use RevoScaleR package in Power BI?&lt;/a&gt;. &lt;a href=&quot;https://tomaztsql.wordpress.com/&quot;&gt;Tomaz&lt;/a&gt; shows how RevoScaleR can be used from inside Power BI, pretty cool!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/03/alteryx-integrates-with-microsoft-r.html&quot;&gt;Alteryx integrates with Microsoft R&lt;/a&gt;. &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; posts about how Alteryx now supports Microsoft R Server as well as SQL Server R Services. Alteryx is a workflow tool combining data preparation, data blending, and analytics – predictive, statistical and spatial. It looks very interesting!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/03/running-your-r-code-azure.html&quot;&gt;Running your R code on Azure with mrsdeploy&lt;/a&gt;. Another blog-post from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt;, this explains how to provision and run an Azure virtual machine (VM), using the mrsdeploy library that comes installed with Microsoft’s R Server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/03/22/retail-customer-churn-prediction-free-how-to-guide-now-available/&quot;&gt;Retail Customer Churn Prediction: How-To Guide Now Available&lt;/a&gt;. Predicting customer churn is almost the &quot;holy grail&quot; in machine learning. Microsoft has done a lot of research about churn prediction, and have now released their &lt;em&gt;Retail Customer Churn Prediction Solution How-to Guide&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/03/22/end-to-end-data-science-walkthrough-with-spark-2-0-on-azure-hdinsight-hadoop-clusters/&quot;&gt;End-to-End Data Science Walkthrough with Spark 2.0 on Azure HDInsight Hadoop Clusters&lt;/a&gt;. Microsoft has published a tutorial how to use &lt;em&gt;pySpark&lt;/em&gt; and &lt;em&gt;MLlib&lt;/em&gt; for data science on Spark 2.0 clusters.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/03/23/announcing-r-tools-1-0-for-visual-studio-2015/&quot;&gt;Announcing R Tools 1.0 for Visual Studio 2015&lt;/a&gt;. More about R Tools for Visual Studio.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 11</title>
   <link href="http://nielsberglund.com/2017/03/19/interesting-stuff-week-11/"/>
   <updated>2017-03-19T07:59:04+02:00</updated>
   <id>http://nielsberglund.com/2017/03/19/interesting-stuff---week-11</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/03/microliths-microsystems&quot;&gt;From Microliths to Microsystems: Jonas Bonér at QCon London&lt;/a&gt;. Jonas Boner discusses micro-services and points out that quite a few micro-services are really microliths (mini monoliths). A micro-service needs to be designed as a distributed system.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/03/distributed-programming-qcon&quot;&gt;Concurrent and Distributed Programming in the Future&lt;/a&gt;. Joe Duffy, who previously was Director of Engineering for Languages and Compilers at Microsoft, gives a keynote at &lt;a href=&quot;https://qconlondon.com/&quot;&gt;QCon London&lt;/a&gt; where he talks about concurrent programming. I am so looking forward to the video and slides of this keynote.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://joeduffyblog.com/&quot;&gt;Joe Duffy's Blog&lt;/a&gt;. So I didn't come across this blog this week, but having mentioned Joe Duffy above, I have to point out his blog which is a goldmine if you are interested in concurrent programming and distributed systems. His series of posts about &lt;a href=&quot;http://joeduffyblog.com/2015/11/03/blogging-about-midori/&quot;&gt;Midori&lt;/a&gt; is a must read.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/03/google-cloud-next&quot;&gt;Conference Recap: Google Cloud Next&lt;/a&gt;. As the title says; a recap of Google's &lt;a href=&quot;https://cloudnext.withgoogle.com/&quot;&gt;Cloud Next&lt;/a&gt; conference.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlskills.com/blogs/paul/sqlskills-sql101-temporary-table-misuse/&quot;&gt;SQLskills SQL101: Temporary table misuse&lt;/a&gt;. A post in the &lt;a href=&quot;https://www.sqlskills.com/help/sql101/&quot;&gt;SQLSkills SQL101&lt;/a&gt; series, by Paul Randal, about temp-tables and how they can be mis-used.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/03/14/comparing-performance-of-data-access-libraries-using-stackexchangedapper-benchmark/&quot;&gt;Comparing performance of data access libraries using StackExchange/Dapper benchmark&lt;/a&gt;. Disclaimer: I detest &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;ORM&lt;/a&gt;'s with a vengeance. So, some benchmarking by Jovan Popovic, from Microsoft, comparing different data access libraries. I'll let you draw your own conclusions, but I am a happy &quot;bunny&quot;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.tedneward.com/post/the-vietnam-of-computer-science/&quot;&gt;The Vietnam of Computer Science&lt;/a&gt;. A post I read a long, long time ago - but as it has some touch-points with the post above I thought I'd share it. Ted Neward, an ex colleague of mine, wrote this post back in 2006 where he compared ORM's with the Vietnam war.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlskills.com/blogs/kimberly/sqlskills-sql101-indexing/&quot;&gt;SQLskills SQL101: Indexing Basics&lt;/a&gt;. Another post from the &lt;a href=&quot;https://www.sqlskills.com/help/sql101/&quot;&gt;SQLSkills SQL101&lt;/a&gt; series. This one is by Kimberly Tripp, and it talks about indexes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/tsql2sday-the-string-length-server/&quot;&gt;#TSQL2SDAY: The string length server&lt;/a&gt;. A tongue in cheek entry for &lt;a href=&quot;http://tsqltuesday.com/&quot;&gt;T-SQL Tuesday&lt;/a&gt; by Ewald. As a side note, as I wrote in lasts week &lt;a href=&quot;/2017/03/12/interesting-stuff-week-10/&quot;&gt;roundup&lt;/a&gt;, read his &lt;a href=&quot;http://sqlonice.com/&quot;&gt;blog&lt;/a&gt; if you want to get into the &quot;nitty gritty&quot; of SQL Server internals.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;. This post is part 2 of my &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;series about Microsoft SQL Server R Services&lt;/a&gt;. This post is about the internals, more specifically about what happens in the SQL engine when you execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/apache-spark-introduction&quot;&gt;Big Data Processing with Apache Spark – Part 1: Introduction&lt;/a&gt;. This article is the first in a series named &quot;Big Data Processing with Apache Spark&quot;. A lot of very useful articles!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/03/neural-networks-r.html&quot;&gt;Neural Networks: How they work, and how to train them in R&lt;/a&gt;. Neural networks are so &quot;in&quot; at the moment in the data science world. This post by &lt;a href=&quot;http://blog.revolutionanalytics.com/&quot;&gt;Revolution Analytics&lt;/a&gt; summarizes various R packages useful for neural networks and points to a video about neural networks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/sql-server/data-amp&quot;&gt;Microsoft Data Amp—where data gets to work&lt;/a&gt;. Information and registration for an upcoming Microsoft virtual conference about Microsoft's data platform.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/monte-carlo-planning&quot;&gt;Monte Carlo Planning Improves Decision Making&lt;/a&gt;. An article which discusses some innovative uses for Monte Carlo simulation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/doazureparallel/&quot;&gt;doAzureParallel: Take advantage of Azure’s flexible compute directly from your R session&lt;/a&gt;. This post introduces &lt;a href=&quot;https://github.com/Azure/doAzureParallel&quot;&gt;doAzureParallel&lt;/a&gt;, an R package which allows R users to scale up their work to take advantage of cloud compute.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft SQL Server R Services - Internals I</title>
   <link href="http://nielsberglund.com/2017/03/18/microsoft-sql-server-r-services-internals-i/"/>
   <updated>2017-03-18T16:21:21+02:00</updated>
   <id>http://nielsberglund.com/2017/03/18/microsoft-sql-server-r-services---internals-i</id>
   <content type="html">&lt;p&gt;This post is part of a series of blog-posts about Microsoft SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server R Services - Internals I (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;In this post, and one or two more we will look at what goes on under the covers when we execute some R code inside SQL Server. This post looks at quite in detail what happens in the SQL engine when we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To try and get an understanding we'll do something that we did quite a lot back in the day when I worked at Developmentor; we'll &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=945136&quot;&gt;&quot;spelunk&quot;&lt;/a&gt; the SQL Server code via &lt;em&gt;WinDbg&lt;/em&gt;. This can be really useful when trying to understand and get to grips with new technology/functionality.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Developmentor were back in the day THE training company to go to if you wanted highly, highly technical training about COM, .NET, SQL Server, etc. &lt;a href=&quot;http://www.javaworld.com/article/2073792/core-java/a-eulogy--developmentor--rip.html&quot;&gt;This article&lt;/a&gt; by my old colleague &lt;a href=&quot;http://blogs.tedneward.com/&quot;&gt;Ted Neward&lt;/a&gt; (@tedneward) sums DM up quite accurately (apart from the fact that DM hadn't closed its doors when the article was written, ooops).&lt;/p&gt;&lt;/blockquote&gt;

&lt;!--more--&gt;


&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;The first post in the series discussed how to install and enable SQL Server R Services. In there I mentioned how the SQL Server R Services are different from SQLCLR in that the R engine is external to SQL Server, whereas in SQLCLR, CLR is loaded into the same process as the SQL Server engine.&lt;/p&gt;

&lt;p&gt;So in SQL Server R Services, there must be a way to communicate out of the SQL engine, and into the R engine/runtime, and back into the SQL Server process. Before we'll start trying to figure out what is going on, let's make sure WinDbg is set up.&lt;/p&gt;

&lt;h2&gt;WinDbg&lt;/h2&gt;

&lt;p&gt;If you want to follow along with what I did, and you haven't used WinDbg before, this section talks about how to attach to a process etc. If you are used to this, please skip it.&lt;/p&gt;

&lt;p&gt;In order to use WinDbg, we need to ensure we have the symbol file path set. The easiest is to have the symbol path pointing to Microsoft's Symbol Server. To set things up and also get an introduction to debugging SQL Server with WinDbg, go and read &lt;a href=&quot;http://www.sqlpassion.at/archive/2014/05/05/sql-server-debugging-with-windbg-an-introduction/&quot;&gt;Klaus Aschenbrenner's (@Aschenbrenner) excellent introduction&lt;/a&gt; to the subject.&lt;/p&gt;

&lt;p&gt;When you want to debug and having the symbol path set you can attach to the SQL Server process, either by doing it as in Klaus' post, or you can attach from within WinDbg:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_windbg_attach_menu.png&quot; width=&quot;327&quot; height=&quot;150&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Attach to Process Menu&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In WinDbg you either choose &lt;em&gt;Attach to a Process&lt;/em&gt; from the File menu as in &lt;em&gt;Figure 1&lt;/em&gt;, or you click F6. You are then presented with the &lt;em&gt;Attach to Process&lt;/em&gt; dialog, where you choose &lt;em&gt;sqlservr.exe&lt;/em&gt; as in &lt;em&gt;Figure 2&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_windbg_attach_process.png&quot; width=&quot;372&quot; height=&quot;128&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Attach to Process Dialog&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;strong&gt;NEVER, EVER&lt;/strong&gt; run WinDbg against a production SQL Server, &lt;strong&gt;NEVER&lt;/strong&gt;!!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When you have attached to the process it can be prudent to reload the symbols for that process, by executing &lt;code&gt;.reload -f sqlservr.exe&lt;/code&gt; from the WinDbg command line:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_windbg_reload_symbols.png&quot; width=&quot;435&quot; height=&quot;179&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Reload Symbols&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You should now be good to go.&lt;/p&gt;

&lt;h2&gt;sp_execute_external_script&lt;/h2&gt;

&lt;p&gt;We'll start with the procedure &lt;code&gt;sp_execute_external_script&lt;/code&gt;. When reading official documentation, it says that the procedure is an extended stored procedure, and, indeed, if we try and do &lt;code&gt;sp_helptext sp_execute_external_script&lt;/code&gt;, the result coming back is like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_ext_proc.png&quot; width=&quot;158&quot; height=&quot;68&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Result of sp_helptext Against sp_execute_external_script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The result indicates that this is internal to the server. Let us see if we can find out what happens when executing the proc by using WinDbg.&lt;/p&gt;

&lt;p&gt;An assumption we'll make is that when we execute the proc, there will be some symbols with a name something like &lt;code&gt;ExternalScript&lt;/code&gt; among the various SQL Server modules. So, let us see what we can find. We do it by using the &lt;code&gt;x&lt;/code&gt; command from the WinDbg command-line, like so: &lt;code&gt;x *!*ExternalScript*&lt;/code&gt; (the &quot;*&quot; denotes a wild-card, like &quot;%&quot; in T-SQL). Whoops, that returned quite a lot of information:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_windbg_extscript_symbols.png&quot; width=&quot;650&quot; height=&quot;171&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Result of Looking for Symbols With ExternalScript in the Name&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OK, but we are probably onto something here. When skimming the result we see that &lt;code&gt;ExternalScript&lt;/code&gt; occurs in two modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sqllang&lt;/code&gt; - Implements things to do with T-SQL as well as the query engine.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlmin&lt;/code&gt; - Implements things related to the relational engine.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Seeing that it occurs in &lt;code&gt;sqllang&lt;/code&gt; and &lt;code&gt;sqllang&lt;/code&gt; has to do with T-SQL etc., a fairly solid assumption is that we should look in the &lt;code&gt;sqllang&lt;/code&gt; module for anything that has to do with that procedure. So just for giggles, let us execute on the WinDbg command-line the following: &lt;code&gt;x sqllang!*execute*externalscript*&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_windbg_spexecuteextscript.png&quot; width=&quot;580&quot; height=&quot;67&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;sqllang!SpExecuteExternalScript&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Cool, we found something that probably is what we are after: &lt;code&gt;SpExecuteExternalScript&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To see if our assumption is correct we now set a break-point at &lt;code&gt;SpExecuteExternalScript&lt;/code&gt;: &lt;code&gt;bp sqllang!SpExecuteExternalScript&lt;/code&gt;. After the breakpoint is set, do not forget to click F5 to continue the process. At this stage we can now execute the &lt;code&gt;sp_execute_external_script&lt;/code&gt; procedure and see if the breakpoint was hit:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execution of Procedure&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OutputDataSet&amp;lt;-InputDataSet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 42'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TheAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Execute sp_execute_external_script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As can be seen in &lt;em&gt;Figure 7&lt;/em&gt; below, the breakpoint is hit. It seems that our assumption is right:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_windbg_hitting_breakpoint.png&quot; width=&quot;480&quot; height=&quot;85&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; &lt;em&gt;Hitting the Breakpoint&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we have hit the breakpoint as in &lt;em&gt;Figure 7&lt;/em&gt;, what do we do then? Well, we can always use the &lt;code&gt;k&lt;/code&gt; command to look at the call-stack up until the breakpoint:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_windbg_callstack1.png&quot; width=&quot;650&quot; height=&quot;177&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;Partial call-stack&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 8&lt;/em&gt; shows part of the call-stack, and we can see what routines were called leading up to &lt;code&gt;SpExecuteExternalScript&lt;/code&gt;. When you have looked at the call-stack you can hit F5, to let the routine complete and you should see a result in the Results tab in SSMS.&lt;/p&gt;

&lt;p&gt;But we are not really anywhere closer to understand what is going on, except that we know what has been called up until the breakpoint. We are interested in what routines &lt;code&gt;SpExecuteExternalScript&lt;/code&gt; calls. To find out about that, there is a command in WinDbg, which allows us to disassemble routines; the &lt;code&gt;uf&lt;/code&gt; command. The command signature looks like so: &lt;code&gt;uf [options] &amp;lt;address&amp;gt;&lt;/code&gt;, where the address is the routine, and the options define how to display the result. One of the options is &lt;code&gt;/c&lt;/code&gt; which displays only the call instructions in a routine. Let's execute &lt;code&gt;uf /c sqllang!SpExecuteExternalScript&lt;/code&gt; and see what is being called. Quite a few calls are made and the figure below shows some of them:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_windbg_calls1.png&quot; width=&quot;640&quot; height=&quot;148&quot;  &gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; &lt;em&gt;Calls Being Made by SpExecuteExternalScript&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When looking at the calls, there is nothing really that stands out, apart from the &lt;code&gt;sqllang!CSQLSource::Execute (00007ff9 ee237ec0)&lt;/code&gt; call. We can assume that, that call takes us further down the &quot;rabbit-hole&quot;, and we eventually could figure out what is going on. Tracing down could however take quite a while, so let us try another angle.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; When you have hit a breakpoint in WinDbg you can use a trace command &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/hardware/ff561497(v=vs.85).aspx&quot;&gt;&lt;code&gt;wt&lt;/code&gt;&lt;/a&gt; to continue the execution and at the same time print out the calls being made. For a call like &lt;code&gt;SpExecuteExternalScript&lt;/code&gt; the output will get very, very large, and also not completely easy to interpret, so we will not use it for &lt;code&gt;SpExecuteExternalScript&lt;/code&gt;. We will use it a bit later though .&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What we will do instead is to go back and look at symbols. The assumption is that calls further down the call-chain will have something to do with external scripts, and most likely be executed from within the &lt;code&gt;sqllang&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;So let us execute a variant of what we did when finding &lt;code&gt;SpExecuteExternalScript&lt;/code&gt;; we'll execute &lt;code&gt;x sqllang!*ExternalScript*&lt;/code&gt;. Quite a few routines comes back, I have copied some of the ones that might be of interest to us into the code snippet below:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;ExternalScript Related Classes and Routines&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;113&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;em&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExternalScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&lt;/em&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDXR_ExternalScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrepareLauncherInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDXR_ExternalScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectToSatellite&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDXR_ExternalScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDXR_ExternalScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetupService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Result from &lt;code&gt;x sqllang!*ExternalScript*&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want, you can set breakpoints for the routines in &lt;em&gt;Code Snippet 2&lt;/em&gt;, and see if they are hit when executing the code in &lt;em&gt;Code Snippet 1&lt;/em&gt;. In my tests they were hit in the following order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sqllang!SpExecuteExternalScript&lt;/li&gt;
&lt;li&gt;sqllang!CUDXR_ExternalScript::Open&lt;/li&gt;
&lt;li&gt;sqllang!CUDXR_ExternalScript::SetupService&lt;/li&gt;
&lt;li&gt;sqllang!CUDXR_ExternalScript::PrepareLauncherInfo&lt;/li&gt;
&lt;li&gt;sqllang!CUDXR_ExternalScript::ConnectToSatellite:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;No surprise we hit &lt;code&gt;SpExecuteExternalScript&lt;/code&gt; first, and I guess at one stage the script has to &lt;code&gt;Open&lt;/code&gt;. The question is what the other three routines are doing?&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Overview&lt;/em&gt; section in the beginning of this post I wrote how we need to communicate out of SQL Server in order to get to the R runtime. In my &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;previous post&lt;/a&gt;, I mentioned the &lt;em&gt;Launchpad&lt;/em&gt; service, and how it acts as a &quot;routing&quot; mechanism between SQL Server and external languages/runtimes.&lt;/p&gt;

&lt;p&gt;So, somehow SQL Server calls into the launchpad service in order to have the R engine execute the R code. The routines &lt;code&gt;SetupService&lt;/code&gt; and &lt;code&gt;PrepareLauncherInfo&lt;/code&gt;, has to do with the launchpad service., and we'll shortly have a closer look at what &lt;code&gt;SetupService&lt;/code&gt; does. The &lt;code&gt;ConnectToSatellite&lt;/code&gt; routine is for when results are coming back into SQL Server from the external runtime.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Before we go any further, make sure that you are not sitting at a break-point, e.g. hit F5 to let the debugger run.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What about &lt;code&gt;SetupService&lt;/code&gt; then, let us start with disassemble the routine to see what code is being called: &lt;code&gt;uf /c sqllang!CUDXR_ExternalScript::SetupService&lt;/code&gt; (all code is not showing, I have copied certain interesting parts):&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;SetupService&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;125&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDXR_ExternalScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetupService&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDXR_ExternalScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetupService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77179&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ee6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteCommunication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7763&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bfc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDXR_ExternalScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetupService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x19c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77179&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fdc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpenNpConnection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7763&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDXR_ExternalScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetupService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3ab&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7717&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1eb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7763&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b140&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CUDXR_ExternalScript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetupService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x3b5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7717&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1f5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FreePackets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7763&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bc70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Interesting Calls in SetupService&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When looking at the call in &lt;em&gt;Code Snippet 3&lt;/em&gt; we can see the &lt;code&gt;sqllang!CSQLSatelliteCommunication::Init&lt;/code&gt; call. That is a call to initialize communication with the launchpad service. Then, somewhat later, there is an &lt;code&gt;OpenNpConnection&lt;/code&gt; call. That call opens a named pipe connection to the launchpad service.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;WriteMessage&lt;/code&gt; call finally sends the message packet to the launchpad service, and &lt;code&gt;FreePackets&lt;/code&gt; releases the message packet. To further see what is going on, let's trace what &lt;code&gt;WriteMessage&lt;/code&gt; is doing.&lt;/p&gt;

&lt;p&gt;If you are at a breakpoint right now, F5 out of there and then break into the debugger again, and set a breakpoint at &lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;. Execute your T-SQL code again and continue until you hit the breakpoint you just set. When you hit the breakpoint enter the trace command &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/hardware/ff561497(v=vs.85).aspx&quot;&gt;&lt;code&gt;wt&lt;/code&gt;&lt;/a&gt;. This will now run through the whole function and display what is being called as well as statistics about how many times etc., routines were called. In the code snippet below I have chosen some of the more interesting calls:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;WriteMessage&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;013&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Tracing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00007&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ff8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7717&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1f0&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMessage&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;109&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMessage&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SNIWriteAsync&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteAsync&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendPacketAsync&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SNI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrepareForAsyncCall&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendPacketAsync&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;KERNEL32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteFile&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteFile&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;ntdll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZwWriteFile&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;sqllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SNIWriteAsync&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;Tracing WriteMessage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 4&lt;/em&gt; we see &lt;code&gt;WriteAsync&lt;/code&gt;, &lt;code&gt;SendPacketAsync&lt;/code&gt; and &lt;code&gt;WriteFile&lt;/code&gt; is being called. At this stage, the packet has now been sent to the launchpad service. Before you let the process continue, disable the &lt;code&gt;WriteMessage&lt;/code&gt; breakpoint, as it will be called when the result returns from R.&lt;/p&gt;

&lt;p&gt;To make really sure that what we think happens actually happens we can do a last test, involving &lt;em&gt;Launchpad.exe&lt;/em&gt;. In the next post in this series we will look at what happens in the launchpad service in more detail, but for now let us just do a simple test:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open a second instance of WinDbg and attach to the &lt;em&gt;Launchpad.exe&lt;/em&gt; process.&lt;/li&gt;
&lt;li&gt;Reload the launchpad symbols: &lt;code&gt;.reload -f launchpad.exe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set a breakpoint like so: &lt;code&gt;bp launchpad!CLaunchContext::Launch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the WinDbg instance for the SQL Server process set breakpoints at:

&lt;ul&gt;
&lt;li&gt;sqllang!CUDXR_ExternalScript::SetupService&lt;/li&gt;
&lt;li&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/li&gt;
&lt;li&gt;sqllang!CUDXR_ExternalScript::ConnectToSatellite&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ensure that all other breakpoints for the SQL Server process are disabled&lt;/li&gt;
&lt;li&gt;Make sure that both processes are running (i.e. not sitting in break mode).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Execute the T-SQL code and notice what happens (you need to press F5 after hitting each breakpoint):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You hit the breakpoint in the SQL Server process at &lt;code&gt;SetupService&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You hit the breakpoint in the SQL Server process at &lt;code&gt;WriteMessage&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You now hit the &lt;code&gt;Launch&lt;/code&gt; breakpoint in the launchpad process.&lt;/li&gt;
&lt;li&gt;You are back in the SQL Server process at the &lt;code&gt;ConnectToSatellite&lt;/code&gt; breakpoint.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After you have pressed F5 at the &lt;code&gt;ConnectToSatellite&lt;/code&gt; breakpoint you will hit the &lt;code&gt;WriteMessage&lt;/code&gt; breakpoint quite a few times when the result comes back from R.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;UPDATE &amp;amp; EDIT:&lt;/strong&gt; To make the summary more &quot;readable&quot; I have added &lt;em&gt;Figure 10&lt;/em&gt; and rearranged (and added) some text.&lt;/p&gt;

&lt;p&gt;Through our &quot;spelunking&quot;, we have seen in somewhat detail what happens in the SQL Server engine when we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;. &lt;em&gt;Figure 10&lt;/em&gt; below shows from a very high level what goes on in the SQL Server engine:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad_post.png&quot; width=&quot;650&quot; height=&quot;241&quot;  &gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; &lt;em&gt;Call Flow Executing sp_execute_external_script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Following the flow in &lt;em&gt;Figure 10&lt;/em&gt;, when executing &lt;code&gt;sp_execute_external_script&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;EXEC &lt;code&gt;sp_execute_external_script&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Comes into the SQL Server process, and workers, schedulers, tasks, etc., comes into play.&lt;/li&gt;
&lt;li&gt;Eventually &lt;code&gt;sqllang!CSQLSource::Execute&lt;/code&gt; is called (first invocation - not the one shown in &lt;em&gt;Figure 9&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Our friend &lt;code&gt;sqllang!SpExecuteExternalScript&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;The external script is opened in &lt;code&gt;sqllang!CUDXR_ExternalScript::Open&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Things are hotting up and &lt;code&gt;sqllang!CUDXR_ExternalScript::SetupService&lt;/code&gt; is hit.&lt;/li&gt;
&lt;li&gt;A named pipe connection to the launchpad service is opened in &lt;code&gt;sqllang!CSQLSatelliteConnection::OpenNpConnection&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A message containing the R scrips is written to the launchpad service in &lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;That message eventually ends up in the launchpad process in &lt;code&gt;launchpad!CLaunchContext::Launch&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;In between the calls mentioned, a lot of other calls are also made, but from a high level - this is what happens.&lt;/p&gt;

&lt;p&gt;If you have followed along, you can now go off and do your own &quot;spelunking&quot;. In next post in this series we will look at what happens in the launchpad service in more detail.&lt;/p&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 10</title>
   <link href="http://nielsberglund.com/2017/03/12/interesting-stuff-week-10/"/>
   <updated>2017-03-12T07:39:45+02:00</updated>
   <id>http://nielsberglund.com/2017/03/12/interesting-stuff---week-10</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fwaris.wordpress.com/2017/03/04/deep-learning-for-sensor-fusion-and-sequence-classification/&quot;&gt;Deep Learning for Sensor Fusion and Sequence Classification&lt;/a&gt;. Faisal discusses how the &lt;a href=&quot;https://github.com/Microsoft/CNTK/wiki&quot;&gt;Microsoft Cognitive Toolkit&lt;/a&gt; can be used for sequence classification.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/ml-data-processing&quot;&gt;Data Preprocessing vs. Data Wrangling in Machine Learning Projects&lt;/a&gt;. Article from &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt;, which compares different alternative techniques to prepare data for machine learning. Techniques include extract-transform-load (ETL) batch processing, streaming ingestion and data wrangling.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/03/TensorFlow-Release-1&quot;&gt;TensorFlow 1.0 Released&lt;/a&gt;. Another article from &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt;. This article is about the release of Google's &lt;a href=&quot;https://en.wikipedia.org/wiki/TensorFlow&quot;&gt;TensorFlow&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tomaztsql.wordpress.com/2017/02/20/rxneuralnet-vs-xgboost-vs-h2o/&quot;&gt;rxNeuralNet vs. xgBoost vs. H2O&lt;/a&gt;. In version 9.0.3 of &lt;a href=&quot;https://msdn.microsoft.com/en-us/microsoft-r/microsoft-r-getting-started&quot;&gt;Microsoft R Server&lt;/a&gt;, Microsoft has introduced a new package for Microsoft R Server; &lt;a href=&quot;https://msdn.microsoft.com/microsoft-r/microsoftml-introduction&quot;&gt;MicrosoftML&lt;/a&gt;. The package brings new machine learning functionality with improvements in speed, performance and scalability. In Tomaz blog-post he puts the new functionality to test.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://info.microsoft.com/advanced-analytics-data-science-newsletter.html&quot;&gt;Microsoft Data Science Newsletter&lt;/a&gt;. If you are interested in what Microsoft is doing in data science you should definitely subscribe to the monthly newsletter.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/03/employee-retention.html&quot;&gt;Employee Retention with R Based Data Science Accelerator&lt;/a&gt;. Cool &quot;stuff from&quot; &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; about how to use R to analyze employee retention.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2016/03/09/announcing-r-tools-for-visual-studio-2/&quot;&gt;Announcing R Tools for Visual Studio&lt;/a&gt;. R Tools for Visual Studio has been released!&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;Distributed Computing&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/03/08/redundancy-does-not-imply-fault-tolerance-analysis-of-distributed-storage-reactions-to-single-errors-and-corruptions/&quot;&gt;Redundancy does not imply fault tolerance: analysis of distributed storage reactions to single errors and corruptions&lt;/a&gt;. &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;Adrian&lt;/a&gt; dissects a white-paper pertaining to how distributed storage reacts to errors and corruptions. My conclusion; be afraid, be very afraid!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlskills.com/blogs/paul/why-pfs-pages-cannot-be-repaired/&quot;&gt;Why PFS pages cannot be repaired&lt;/a&gt;. Paul Randal from &lt;a href=&quot;https://www.sqlskills.com&quot;&gt;SQLskills&lt;/a&gt; fame explains why DBCC CHECKDB cannot repair Page Free Space pages. Very cool &quot;stuff&quot;!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qconlondon.com/system/files/presentation-slides/slavaoks_sqlpal_qconfinal.pdf&quot;&gt;SQL  Server  on  Linux, will it perform?&lt;/a&gt;. This is the slide deck from &lt;a href=&quot;https://blogs.msdn.microsoft.com/slavao&quot;&gt;Slava Oks&lt;/a&gt; presentation at QCon in London this year about SQL Server on Linux. Amazing! Cannot wait for the video to be published!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/context-in-perspective-1-what-the-cpu-sees-in-you/&quot;&gt;Context in perspective 1: What the CPU sees in you&lt;/a&gt;. &lt;a href=&quot;http://sqlonice.com&quot;&gt;Ewald&lt;/a&gt; has a series about context in SQL Server, and this is the first post. So, so interesting! As a side note; you should really follow &lt;a href=&quot;http://sqlonice.com&quot;&gt;Ewald's blog&lt;/a&gt; if you are interested in various and sundry, deeply technical topics of how SQL Server works under the covers! WinDbg FTW!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 9</title>
   <link href="http://nielsberglund.com/2017/03/05/interesting-stuff-week-9/"/>
   <updated>2017-03-05T06:58:15+02:00</updated>
   <id>http://nielsberglund.com/2017/03/05/interesting-stuff---week-9</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;Hmm, this week there has not been much catching my eye. What has been is mostly data science / analytics related. Anyway, here we go.&lt;/p&gt;

&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://learnanalytics.microsoft.com/&quot;&gt;LearnAnalytics@MS&lt;/a&gt;. A Microsoft website which contains a lot of really cool resources if you want to learn about data science and analytics.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://buckwoody.wordpress.com/&quot;&gt;Backyard Data Science&lt;/a&gt;. I came across this site from a link from the &lt;a href=&quot;http://learnanalytics.microsoft.com/&quot;&gt;site above&lt;/a&gt;. This site by Buck Woody from Microsoft contains a lot of absolutely awesome articles related to data science.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/minibooks/emag-handle-data-science&quot;&gt;The InfoQ eMag: Getting a Handle on Data Science&lt;/a&gt;. From [InfoQ] an eMag looking at data science from the ground up, across technology selection, assembling raw and unstructured data, statistical thinking, machine learning basics, etc., etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/terryum/awesome-deep-learning-papers&quot;&gt;Awesome - Most Cited Deep Learning Papers&lt;/a&gt;. A curated list of the most cited deep learning papers since 2012. A lot of really interesting papers in there.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471#.jeyqbephu&quot;&gt;Machine Learning is Fun!&lt;/a&gt;. A multi part guide to machine learning. It provides you with a high-level explanation of what machine learning is, and doing it in an easily understandable manner.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/03/01/optimisation-and-training-techniques-for-deep-learning/&quot;&gt;Optimisation and training techniques for deep learning&lt;/a&gt;. Adrian Colyer from &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;the morning paper&lt;/a&gt; has waded through the &lt;a href=&quot;https://github.com/terryum/awesome-deep-learning-papers&quot;&gt;papers mentioned above&lt;/a&gt; pertaining to &quot;optimisation and training techniques&quot;. I believe I have mentioned it before, but I'll do it again: &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;the morning paper&lt;/a&gt; is an excellent source for data science related &quot;stuff&quot;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;. A post from yours truly. The post is the first in a series of posts about Microsoft SQL Server R Services. In this post I cover installation and enabling of SQL Server R Services.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Big Data &amp;amp; Databases&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/02/19/interesting-stuff-week-7/&quot;&gt;Google Launches Cloud Spanner Public Beta&lt;/a&gt;. In my &lt;a href=&quot;/2017/02/19/interesting-stuff-week-7/&quot;&gt;weekly roundup for week 7&lt;/a&gt; I had a link to an article of &lt;a href=&quot;https://cloud.google.com/spanner/&quot;&gt;Spanner&lt;/a&gt;, the Google database that can span multiple geo-locations and still be seen as one instance. This article from &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; talks about how Spanner has gone into public beta.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft SQL Server 2016 R Services Installation</title>
   <link href="http://nielsberglund.com/2017/03/04/microsoft-sql-server-2016-r-services-installation/"/>
   <updated>2017-03-04T10:19:22+02:00</updated>
   <id>http://nielsberglund.com/2017/03/04/microsoft-sql-server-2016-r-services-installation</id>
   <content type="html">&lt;p&gt;A couple of weeks beck I wrote a &lt;a href=&quot;/2017/02/25/microsoft-r-server/&quot;&gt;blog-post where I compared CRAN R with Microsoft R Server&lt;/a&gt;. The comparison was basically how large data sets are handled. In the post I mentioned that SQL Server 2016 (and later) is the delivery mechanism for Microsoft R Server on the Windows platform. In this post we will look at how to install and enable SQL Server R Services.&lt;/p&gt;

&lt;p&gt;This post is the first in a series of posts about SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Microsoft SQL Server 2016 R Services Installation (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;!--more--&gt;


&lt;p&gt;In the &quot;Microsoft R Server&quot; post I wrote that CRAN R, as good as it is, in certain scenarios it is less then ideal:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data movement - the data you work with has to be moved from source to your machine.&lt;/li&gt;
&lt;li&gt;Operationalization - having created an awesome model, how do you put it in production.&lt;/li&gt;
&lt;li&gt;Scale / performance - R is single threaded and all data has to be in memory.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;SQL Server R Services addresses these issues, which we will see later. For now let us see what SQL Server R Services is.&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Back in 2015 Microsoft bought Revolution Analytics. Revolution Analytics is a company who developed a big data, large scale multiprocessor computing, and multi-core functionality version of R: &lt;strong&gt;Revolution R Enterprise&lt;/strong&gt;, which Microsoft re-branded to Microsoft R Server. At the heart of Microsoft R Server is RevoscaleR; an R package providing both High Performance Computing (HPC) and High Performance Analytics (HPA) capabilities for R.  HPC allows distribution of the execution of essentially any R function across cores and nodes, and deliver the results back to the user, whereas HPA adds the ability to handle very large datasets (Big Data).&lt;/p&gt;

&lt;p&gt;SQL Server R Services is the conduit between SQL Server and Microsoft R Server, and allows the execution of R code from inside SQL Server. Hmm, execution of R code from inside SQL Server, let's think about the implications of being able to do that, and put that in relation to the CRAN R issues above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A data scientist can theoretically create his model(s) from inside the database. If the source of the data is the database, there are no movement of data.&lt;/li&gt;
&lt;li&gt;The model(s) can be stored in the database and subsequently be used to analyze/predict new data. For example, a stored procedure can be created to output predictions. All of a sudden the issue of operationalization has been solved.&lt;/li&gt;
&lt;li&gt;SQL Server is multi-threaded and supports parallelism, which should take care of the scale and performance issues in R. Furthermore the various RevoScaleR functions are optimized for multi-threading as well as large data volumes.&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you are executing R code from an IDE (and not from inside SQL Server), you can still have your code execute on SQL Server by using an RevoScaleR feature; the &lt;em&gt;compute context&lt;/em&gt;. The &lt;em&gt;compute context&lt;/em&gt; is not &quot;in scope&quot; for this blog-post, but you can read more about it &lt;a href=&quot;https://msdn.microsoft.com/microsoft-r/scaler/rxcomputecontext&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;The SQL Server R Services has to be explicitly installed in SQL Server, it is not like SQLCLR - which just needs to be enabled. Installing SQL Server R Service can be done when installing a new SQL Server instance or it can be added afterwards as a new feature. Here we'll see how we install the R Services together with a new instance of SQL Server:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_installation_type.png&quot; width=&quot;650&quot; height=&quot;260&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;SQL Server Installation Type&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 1&lt;/em&gt; we are choosing to do a new installation of SQL Server. We then choose what features we want installed:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_in_db.png&quot; width=&quot;650&quot; height=&quot;249&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Features to Install&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you install SQL Server 2016, you find a new feature under the &lt;em&gt;Database Engine Services&lt;/em&gt;: &lt;em&gt;R Services (In-Database)&lt;/em&gt;, as in Figure 2. This is the install option when you want to integrate with R from within SQL Server. In the &lt;em&gt;Feature Selection&lt;/em&gt; dialog, under &lt;em&gt;Shared Features&lt;/em&gt; you also have &lt;em&gt;R Server (Standalone)&lt;/em&gt;, what is that all about:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_windows_r_server.png&quot; width=&quot;650&quot; height=&quot;297&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Windows R Server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;SQL Server 2016 acts as the delivery mechanism for Microsoft R Server on Windows, and the &lt;em&gt;R Server&lt;/em&gt; feature allows you to install Microsoft R Server independent of SQL Server. For example, if a data scientist want to run R on his or her own machine.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may wonder why, in &lt;em&gt;Figure 3&lt;/em&gt;, the check box for R Server is checked, but &quot;dimmed&quot; out? This is because, on this particular machine, I have already installed the standalone R Server once.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Go ahead and install after you have chosen the various features to install on your new instance. After successful installation we should check and make sure everything works, but before that let's talk about a couple of very important pieces of the SQL Server R Services &quot;puzzle&quot;.&lt;/p&gt;

&lt;h2&gt;SQL Server Launchpad&lt;/h2&gt;

&lt;p&gt;Let us start with the launchpad service. After installation, if you go to &lt;em&gt;Services&lt;/em&gt;, you will see your newly installed SQL Server instance &lt;em&gt;SQL Server (InstanceName)&lt;/em&gt;, but also a new service which hasn't been in earlier versions of SQL Server; the Launchpad service. You can see it in &lt;em&gt;Figure 4&lt;/em&gt; below:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_launchpad.png&quot; width=&quot;650&quot; height=&quot;167&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Windows R Server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Introduction&lt;/em&gt; section I wrote how SQL Server R Services is the conduit between SQL Server and Microsoft R Server, and the launchpad service plays a big part of this. The service acts as a &quot;routing&quot; mechanism between SQL Server and external languages/runtimes. The responsibility of the launchpad service is to &quot;spin up&quot; and calling into the correct runtime when calling from inside SQL Server.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Right now, the only &quot;runtime&quot;/language supported by the launchpad service is R.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Another piece of the &quot;puzzle&quot; is the the extended stored procedure: &lt;code&gt;sp_execute_external_script&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;sp_execute_external_script&lt;/h2&gt;

&lt;p&gt;This is the procedure that will be used when executing R code inside SQL Server. The procedure will call into the launchpad service, and have the launchpad service &quot;route&quot; the call to the correct runtime.&lt;/p&gt;

&lt;p&gt;The syntax for the procedure as copied from &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/mt604368.aspx&quot;&gt;MSDN&lt;/a&gt;, looks like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;sp_execute_external_script&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'language'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'script'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'input_data_1'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input_data_1_name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_data_1_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'output_data_1_name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@parameter_name data_type [ OUT | OUTPUT ] [ ,...n ]'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'value1'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OUTPUT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute_option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;[;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute_option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;err&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;err&quot;&gt;&amp;#x7b;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNDEFINED&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#x7b;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NONE&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#x7b;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result_sets_definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;err&quot;&gt;&amp;#x7d;&lt;/span&gt;&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result_sets_definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;err&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;err&quot;&gt;&amp;#x7b;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;n&quot;&gt;data_type&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLLATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;collation_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;[,...&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OBJECT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;schema_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;schema_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;err&quot;&gt;&amp;#x7b;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_valued_function_name&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TYPE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;schema_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_type_name&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='33' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;err&quot;&gt;&amp;#x7d;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Syntax of sp_execute_external_script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you look at the syntax and thinks it looks convoluted, you are right. But do not worry, in a future blog-post we will look more in detail at what &lt;code&gt;sp_execute_external_script&lt;/code&gt; does, and further down in this post we will see a very simple example of it. One thing to notice though is the first parameter in the proc: &lt;code&gt;@language&lt;/code&gt;. This parameter defines the language/runtime, and as mentioned a couple of times before, right now the only language/runtime supported is R. There are rumors that &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; will be supported in the future, as well as &lt;a href=&quot;http://julialang.org/&quot;&gt;Julia&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Making Sure it Works&lt;/h2&gt;

&lt;p&gt;Now when we have installed the SQL Server R Services, and also have had a (very) short introduction to some of the &quot;moving parts&quot;, let's enable SQL Server R Services, and execute something to actually see it works.&lt;/p&gt;

&lt;h3&gt;Enable SQL Server R Services&lt;/h3&gt;

&lt;p&gt;Enable, what do you mean enable? I have just installed it, isn't that enough? No it is not, after installation you need to enable the services. This is a bit like what you do with SQLCLR, you are enabling the execution of SQLCLR on the instance. Here you enable the execution of external scripts. To enable external scripts you change the configuration of the SQL Server instance you are on:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Enable External Scripts&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_configure&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'external scripts enabled'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;RECONFIGURE&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OVERRIDE&lt;/span&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Execute sp_configure&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you have executed the code as in &lt;em&gt;Code Snippet 2&lt;/em&gt;, you might think all is good. Unfortunately it is not, you now have to restart the instance of SQL Server! However, after the restart you can test and see that it works.&lt;/p&gt;

&lt;h3&gt;Executing R Script&lt;/h3&gt;

&lt;p&gt;To test it out we will execute a very simple R script:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execution of R Script&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OutputDataSet&amp;lt;-InputDataSet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 42'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TheAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Test That R Installation Works&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's look at the various parts of the code in &lt;em&gt;Code Snippet 3&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We start with the &lt;code&gt;@language&lt;/code&gt; parameter. We now know that it should be R.&lt;/li&gt;
&lt;li&gt;Then we define the &lt;code&gt;@script&lt;/code&gt; parameter. This is where our R code will go. In the code we are saying that output data (&lt;code&gt;OutputDataSet&lt;/code&gt;) is whatever coming in (&lt;code&gt;InputDataSet&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;@inout_data_1&lt;/code&gt; we define the input dataset&lt;/li&gt;
&lt;li&gt;We finally &quot;formats&quot; the output in the &lt;code&gt;WITH RESULT SETS ...&lt;/code&gt; part.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When you execute the code, the output should be like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/r_result_set.png&quot; width=&quot;160&quot; height=&quot;80&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Result of Execution of R Script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, you have now executed R code inside SQL Server. How cool is that?!&lt;/p&gt;

&lt;p&gt;In future blog-posts we will look at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How things work under the cover&lt;/li&gt;
&lt;li&gt;What exactly is &lt;code&gt;sp_execute_external_script&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Some real world examples&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 8</title>
   <link href="http://nielsberglund.com/2017/02/26/interesting-stuff-week-8/"/>
   <updated>2017-02-26T07:11:45+02:00</updated>
   <id>http://nielsberglund.com/2017/02/26/interesting-stuff---week-8</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://seancremer.github.io/ChoosingAPrimaryKey.html&quot;&gt;Choosing a Primary Key&lt;/a&gt;. Another post in &lt;a href=&quot;https://seancremer.github.io&quot;&gt;Sean Cremer's&lt;/a&gt; series about database design. Full disclosure, he is a colleague of mine - but still a very good guy :). His SQL knowledge is immense!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/02/21/sql-server-2016-developer-edition-in-windows-containers/&quot;&gt;SQL Server 2016 Developer Edition in Windows Containers&lt;/a&gt;. Announcement and introduction to the availability of SQL Server 2016 Developer Edition in Windows containers. This is a &quot;biggie&quot; for me who often want to spin up a new SQL Server instance. Now I can just have a container with the instance on it and spin it up!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlskills.com/blogs/kimberly/sqlskills-sql101-stored-procedures/&quot;&gt;SQLskills SQL101: Stored Procedures&lt;/a&gt;. First in a series of &quot;back to the basics&quot; by &lt;a href=&quot;https://www.sqlskills.com/&quot;&gt;Kimberly and Paul&lt;/a&gt;. This covers my absolutely favorite feature in SQL Server: Stored Procedures! All you who are saying they are no good - I have a word for you: Heathens! :)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/podcasts/slava-oks-linux-sql-server&quot;&gt;Architecting SQL Server on Linux: Slava Oks on Drawbridge, LibOS, &amp;amp; Addressing Between Windows/Linux&lt;/a&gt;. A podcast with Slava Oks, where Slava talks the implementation of SQL Server on Linux.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/02/apache-beam-top-level&quot;&gt;Beam Graduates to Top-Level Apache Project&lt;/a&gt;. &lt;a href=&quot;https://beam.apache.org/&quot;&gt;Beam&lt;/a&gt; is an Apache project seeking to create a unified programming model for streaming and batch processing jobs, and to produce artifacts that can be consumed by a number of supported data processing engines.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/stream-apache-beam&quot;&gt;Fundamentals of Stream Processing with Apache Beam&lt;/a&gt;. More about Beam. This is a presentation about Beam's out-of-order stream processing as well as Beam tries to simplify complex tasks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kafka-summit.org/events/kafka-summit-ny/&quot;&gt;Kafka Summit New York&lt;/a&gt;. If you are doing streaming, then you most likely are interested in or, at least, have heard about Kafka. The yearly Kafka conference are coming up, so go ahead and register.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/stitchfix-cloud&quot;&gt;Data Science in the Cloud @StitchFix&lt;/a&gt;. A conference presentation about how the cloud enables over 80 data scientists to be productive at &lt;a href=&quot;https://www.stitchfix.com/&quot;&gt;StichFix&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/datadog-cloud&quot;&gt;Elastic Data Analytics Platform @Datadog&lt;/a&gt;. Conference presentation about &lt;a href=&quot;https://www.datadoghq.com/&quot;&gt;DataDog's&lt;/a&gt; cloud-based analytics platform and how it differs from a traditional datacenter-based analytics stack.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://microsoft.github.io/RTVS-docs/&quot;&gt;R Tools for Visual Studio&lt;/a&gt;. &lt;strong&gt;R Tools for Visual Studio&lt;/strong&gt; are getting closer and closer to a version 1.0 release.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebookincubator.github.io/prophet/&quot;&gt;Prophet - Forecasting at Scale&lt;/a&gt;. Prophet is an open-source package for R and Python that implements the time-series methodology that Facebook uses in production for forecasting at scale. Looks very, very interesting.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nielsberglund.com/2017/02/25/microsoft-r-server/&quot;&gt;Microsoft R Server&lt;/a&gt;. I have to do some shameless self-promotion :). This is a blogpost by me comparing how CRAN R handles large datasets compared to Microsoft R Server.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft R Server</title>
   <link href="http://nielsberglund.com/2017/02/25/microsoft-r-server/"/>
   <updated>2017-02-25T06:28:25+02:00</updated>
   <id>http://nielsberglund.com/2017/02/25/microsoft-r-server</id>
   <content type="html">&lt;p&gt;Last Saturday (February 18) I was in Cape Town at the second world-wide &lt;a href=&quot;http://capetown2017.satrdays.org/&quot;&gt;satRday conference&lt;/a&gt; ever, where I gave a talk named: &quot;Microsoft, Open Source, R: You gotta be kidding me!&quot;. The talk was about Microsoft's R Server offering, and how it in some cases offered a better performance than Open R. Seeing the session lengths were only 20 minutes, I could not show any code, so in a &quot;weak&quot; moment I promised to put the code up on my web-site together with an accompanying blog-post. This is it :).&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Demo Code - Scenario, Installation and Data&lt;/h2&gt;

&lt;p&gt;This blog-post has some accompanying demo code, which we will use in order to compare R with Microsoft R Server. The code can be downloaded from &lt;a href=&quot;/downloads/code/microsoft_r_server.zip&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Scenario&lt;/h3&gt;

&lt;p&gt;We are using simulated mortgage data for a 10 year period where the data contains information about mortgages and if they were defaulted or not. All in all it is 10 million records, originally stored in &lt;code&gt;.csv&lt;/code&gt; files, but the installation process inserts the data into a SQL Server table.&lt;/p&gt;

&lt;p&gt;What we want to do is to retrieve the data from the database, and then create a model based on the data.&lt;/p&gt;

&lt;h3&gt;Installation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Unzip the downloaded &lt;code&gt;microsoft_r_server.zip&lt;/code&gt; file to some location on your hard-drive.&lt;/li&gt;
&lt;li&gt;Follow the install instructions in the &lt;code&gt;index.html&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Please remember to close the @path variable with a &quot;\&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;At this point you should now have a database, &lt;code&gt;MortgageDb&lt;/code&gt;, with a table, &lt;code&gt;dbo.tb_MortgageData&lt;/code&gt; containing 10 million records.&lt;/p&gt;

&lt;h3&gt;Data&lt;/h3&gt;

&lt;p&gt;To see what the data looks like, execute: &lt;code&gt;SELECT TOP(5) * FROM dbo.tb_MortgageData&lt;/code&gt;, and you'll see something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/top_5_mortgage_data.png&quot; width=&quot;440&quot; height=&quot;145&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Mortgage Data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The data contains 6 variables (columns):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;CreditScore&lt;/em&gt; - credit rating for the holder of the mortgage&lt;/li&gt;
&lt;li&gt;&lt;em&gt;HouseAge&lt;/em&gt; - how old the house is (years)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;YearsEmp&lt;/em&gt; - number of years the mortgage holder has been employed at their current job&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CreditCardDebt&lt;/em&gt; - how much debt the mortgage holder has on his (or hers) credit card&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Year&lt;/em&gt; - the year the data was collected&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DidDefault&lt;/em&gt; - binary variable indicating whether the mortgage holder defaulted (0 - no, 1 - yes)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The variables above are what we will use to create a model.&lt;/p&gt;

&lt;h2&gt;R&lt;/h2&gt;

&lt;p&gt;So onto R. R is awesome! It is no doubt about it, and it has become a defacto standard for advanced analytics. &lt;em&gt;Figure 2&lt;/em&gt; below is from &lt;a href=&quot;http://spectrum.ieee.org/computing/software/the-2016-top-programming-languages&quot;&gt;IEEE Spectrum’s third interactive ranking&lt;/a&gt; of the most popular programming languages:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/top-10-prog-lanf-2016.png&quot; width=&quot;620&quot; height=&quot;373&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Language Popularity&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;During the last few years R has steadily climbed and is now in 5:th place, pushing C# down to 6:th! A lot of R's popularity can probably be attributed to its packages, where there seems to be packages for anything you want to do, plus some more. At the moment (late February 2017) the &lt;a href=&quot;https://cran.r-project.org/web/packages/&quot;&gt;CRAN package repository&lt;/a&gt; features ~10,120 available packages (it increases by the day). To put the number of packages in perspective; in March 2016, there were ~8,000 packages available.&lt;/p&gt;

&lt;h3&gt;Issues&lt;/h3&gt;

&lt;p&gt;As great as R is, there are some shortcomings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data movement&lt;/li&gt;
&lt;li&gt;Operationalization&lt;/li&gt;
&lt;li&gt;Scale / performance&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Data Movement&lt;/h4&gt;

&lt;p&gt;When you use R, you have to move data from the source to R (most likely your machine). Moving large data volumes over the network may not be ideal, and the security department may not be too happy either.&lt;/p&gt;

&lt;h4&gt;Operationalization&lt;/h4&gt;

&lt;p&gt;The data scientist has created the best model - ever! How do you now put this into production; do you have the data science guy retrieve data to predict upon to his (or hers) machine and run the model against live data, or what do you do?&lt;/p&gt;

&lt;h4&gt;Scale / Performance&lt;/h4&gt;

&lt;p&gt;A problem with R is that it is single threaded. Furthermore when working with data, all data has to be in memory. In todays world when we more and more want to analyze &lt;em&gt;big data&lt;/em&gt;, this can become an issue.&lt;/p&gt;

&lt;h3&gt;Demo Code R&lt;/h3&gt;

&lt;p&gt;To showcase some issues with Open R, let us to create a model against our data in &lt;code&gt;dbo.tb_MortgageData&lt;/code&gt;. So in our favorite R editor we probably write some code like:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Get Mortgage Data&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# load in the ODBC library for R&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RODBC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# set up a connection&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odbcDriverConnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Driver=&amp;#x7b;SQL Server native Client 11.0&amp;#x7d;;server=server_name;database=MortgageDb;uid=user_id;pwd=secret_password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# read the data into a dataframe - mydata - this will take a while&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;mydata&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT CreditScore, HouseAge, YearsEmp, CreditCardDebt, Year, DidDefault FROM dbo.tb_MortgageData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# treat HouseAge and Year as a categorical variable&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;mydata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HouseAge&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mydata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HouseAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;mydata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Year&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mydata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Load Mortgage Data into R&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From &lt;em&gt;Code Snippet 1&lt;/em&gt; above you can see how we load all the 10 million rows of data into a data-frame. If you run this code yourself, you will notice it will take a while - but all 10 millions row will eventually be in memory.&lt;/p&gt;

&lt;p&gt;After having read the data, we want to treat &lt;code&gt;Year&lt;/code&gt; and &lt;code&gt;HouseAge&lt;/code&gt; as a categorical/factor variables, so we use the  &lt;code&gt;factor&lt;/code&gt; function for that. At this stage we are now ready to create a model.&lt;/p&gt;

&lt;p&gt;We do believe that a logistic regression model would be useful, where &lt;code&gt;DidDefault&lt;/code&gt; is the dependent variable with &lt;code&gt;CreditScore&lt;/code&gt;, &lt;code&gt;YearsEmp&lt;/code&gt;, &lt;code&gt;CreditCardDebt&lt;/code&gt; and the &lt;code&gt;factor&lt;/code&gt;:ized &lt;code&gt;HouseAge&lt;/code&gt; and &lt;code&gt;Year&lt;/code&gt; as independent variables:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Logistic Regression&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# this comes after the factoring of HouseAge and Year&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;logit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DidDefault&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HouseAge&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Year&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreditScore&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;YearsEmp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreditCardDebt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mydata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;binomial&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Logistic Regression with glm()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before you execute the above, have a look at task manager for how much memory you are consuming. On my development PC it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/memory_before_logreg.png&quot; width=&quot;540&quot; height=&quot;179&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Memory After Loaded Data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The memory consumption is very small, 25% overall. Let us see what happens when we execute the logistic regression as in &lt;em&gt;Code Snippet 2&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you run this yourself, have a very close eye at the memory consumption, and be prepared to kill RStudio, when memory reaches 98 - 99%.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;After a while, the logistic regression is still running and the memory is like below:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/memory_during_logreg.png&quot; width=&quot;540&quot; height=&quot;179&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Memory During Logistic Regression&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My development PC has 24 Gb of Ram and a couple of times when I have tested this, the PC has blue-screened, due to running out of memory. Other times the regression has, run and run and run - and I have finally killed the R Studio session after 10 - 15 minutes.&lt;/p&gt;

&lt;p&gt;We have just seen an example where some of R's limitations are causing problems. In an enterprise scenario the above may cause issues, especially when we - in the enterprise - more and more are analyzing &lt;em&gt;Big Data&lt;/em&gt;. In the example above it was 10 million rows of data, not really &lt;em&gt;Big Data&lt;/em&gt; - but what do we do in these scenarios? Well, there are enterprise software vendors who have their own offering of &lt;em&gt;enterprise R&lt;/em&gt; (obviously for a price), among them are Oracle, Tibco and up until early 2015 Revolution Analytics.&lt;/p&gt;

&lt;h2&gt;Revolution Analytics&lt;/h2&gt;

&lt;p&gt;Revolution Analytics is a statistical software company focusing on developing big data, large scale multiprocessor computing, and multi-core functionality version of R: &lt;strong&gt; Revolution R Enterprise&lt;/strong&gt;. Both &lt;a href=&quot;http://www.teradata.com/Resources/White-Papers/Teradata-and-Revolution-Analytics-For-the-Big-Data-Era-An-Analytics-Revolution/&quot;&gt;Teradata&lt;/a&gt; and &lt;a href=&quot;http://www-01.ibm.com/common/ssi/cgi-bin/ssialias?infotype=an&amp;amp;subtype=ca&amp;amp;appname=gpateam&amp;amp;supplier=897&amp;amp;letternum=ENUS212-455&quot;&gt;IBM&lt;/a&gt; partnered with Revolution Analytics to provide analytical platforms for the enterprise.&lt;/p&gt;

&lt;p&gt;In January 2015 Microsoft purchased Revolution Analytics and re-branded Revolution R Enterprise as &lt;strong&gt;Microsoft R Server&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Microsoft R Server&lt;/h2&gt;

&lt;p&gt;Microsoft R Server is next generation of Revolution R Enterprise server, and offers an enterprise class server for hosting and managing parallel and distributed workloads of R processes on servers (Linux and Windows) and clusters (Hadoop and Apache Spark). It extends open source R with support for high-performance analytics, statistical analysis, machine learning scenarios, and massively large datasets.&lt;/p&gt;

&lt;p&gt;As mentioned above Microsoft R Server can run on both Windows as well as Linux, and in the Windows world, SQL Server is the delivery mechanism for Microsoft R Server.&lt;/p&gt;

&lt;p&gt;Some of the key components of Microsoft R Server are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DeployR - An integration technology for deploying R analytics inside web, desktop, mobile, and dashboard applications as well as backend systems.&lt;/li&gt;
&lt;li&gt;ConnectR - High speed connectors to any data source ranging from simple workstation file systems to complex distributed file systems and MPP databases.&lt;/li&gt;
&lt;li&gt;DistributedR - An adaptable parallel execution framework that includes services for communications, storage integration and memory management.&lt;/li&gt;
&lt;li&gt;R Tools for Visual Studio - Turns Visual Studio into a powerful R development environment, including things like &lt;em&gt;Intellisense&lt;/em&gt;!&lt;/li&gt;
&lt;li&gt;ScaleR - Provides algorithms optimized for parallel execution on big data. These algorithms are optimized for transparent distributed execution, eliminate memory limitations and scale from laptops to servers to large clustered systems. Foundation for &lt;strong&gt;RevoScaleR&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;RevoScaleR&lt;/h3&gt;

&lt;p&gt;RevoScaleR, is an R package providing both High Performance Computing (HPC) and High Performance Analytics (HPA) capabilities for R.  HPC capabilities allow you to distribute the execution of essentially any R function across cores and nodes, and deliver the results back to the user. HPA adds big data to the challenge.&lt;/p&gt;

&lt;p&gt;The data manipulation and analysis functions in RevoScaleR are appropriate for small and large datasets, but are particularly useful in three common situations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To analyze data sets that are too big to fit in memory.&lt;/li&gt;
&lt;li&gt;To perform computations distributed over several cores, processors, or nodes in a cluster,&lt;/li&gt;
&lt;li&gt;To create scalable data analysis routines that can be developed locally with smaller data sets, then deployed to larger data and/or a cluster of computers.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;In the demo code that follows we'll see how RevoScaleR is doing with our mortgage data from above.&lt;/p&gt;

&lt;h3&gt;Demo Code RevoScaleR&lt;/h3&gt;

&lt;p&gt;It is worth noting that in the RevoScaleR code, the editor I used is Visual Studio and R Tools for Visual Studio. To use Microsoft R Server and RevoScaleR you do not need to use Visual Studio, you can use any editor you want. Just make sure the editor uses the Microsoft R Server engine.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; To change engine in RStudio, go to &lt;em&gt;Tools | Global Options&lt;/em&gt;, and under the &lt;em&gt;R General&lt;/em&gt; tab, you change the &lt;em&gt;R version&lt;/em&gt; as in &lt;em&gt;Figure 5&lt;/em&gt; below.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/r_engine_r_studio.png&quot; width=&quot;577&quot; height=&quot;450&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Changing R Version in RStudio&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to follow along in the code, and you are using Visual Studio (with R Tools for Visual Studio), you can open the solution file in the &lt;code&gt;VS\VSMortgage&lt;/code&gt; folder from the unzipped file above. If you use RStudio or some other editor then just open the &lt;code&gt;script.R&lt;/code&gt; file from the &lt;code&gt;VS\VSMortgage&lt;/code&gt; folder,  in your preferred editor. Once again, just make sure that your R engine is Microsoft R Server.&lt;/p&gt;

&lt;p&gt;So, what does the code look like:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;RevoScaleR Code&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# set up a connection string&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sqlServerConnString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Driver=SQL Server;server=server_name;database=MortgageDb;uid=user_id;pwd=secret_password&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# generate a data frame - notice the data won't be read into the frame until it is needed&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;mydata&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RxSqlServerData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlQuery&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT CreditScore, HouseAge, YearsEmp, CreditCardDebt, Year, DidDefault FROM dbo.tb_MortgageData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connectionString&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlServerConnString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rowsPerRead&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# create a histogram&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;rxHistogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreditScore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mydata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# get some info about the data&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;rxGetInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mydata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numRows&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Using RevoScaleR Package&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The code does not differ that much from the original code. We start with defining a connection string to the database. Then we create a data frame using the &lt;code&gt;RxSqlServerData&lt;/code&gt; function. A difference from using &lt;code&gt;sqlQuery&lt;/code&gt; in the previous demo is that the data won't be read into the data frame until it is needed.&lt;/p&gt;

&lt;p&gt;We then go on to create a histogram by using the &lt;code&gt;rxHistogram&lt;/code&gt; function. You will find that most &lt;code&gt;RevoScaleR&lt;/code&gt; specific functions are named with a starting &lt;code&gt;rx&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Microsoft R Server also contains the CRAN R packages you know and love (at least most of them).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When we have our histogram we decide we need some information of the data so we call &lt;code&gt;rxGetInfo&lt;/code&gt;, which is more or less the equivalent of CRAN R &lt;code&gt;summary()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Having come this far, it is time to create a model:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Logistic Regression&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;# do the logistic regression&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;system.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rxLogit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DidDefault&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HouseAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreditScore&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;YearsEmp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreditCardDebt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mydata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blocksPerRead&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reportProgress&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;Logistic Regression using rxLogit&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Instead of using &lt;code&gt;glm()&lt;/code&gt; we use the specialized &lt;code&gt;rxLogit&lt;/code&gt; function which is optimized for performance. We factorize &lt;code&gt;HouseAge&lt;/code&gt; and &lt;code&gt;Year&lt;/code&gt; by using the &lt;code&gt;F&lt;/code&gt; function. So, what happens now when we execute it? If you run this yourself, please keep a close eye on the memory consumption in Task Manager.&lt;/p&gt;

&lt;p&gt;Nothing much seems to happen with memory:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/rxLogit_memory.png&quot; width=&quot;670&quot; height=&quot;293&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;Memory Consumption using rxLogit&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The memory more or less stayed the same during execution, and after 155 seconds (or so) we were done!&lt;/p&gt;

&lt;p&gt;So we have seen how Microsoft R Server can help us when analyzing large data sets.&lt;/p&gt;

&lt;h2&gt;R and SQL Server&lt;/h2&gt;

&lt;p&gt;I mentioned above how SQL Server were the delivery mechanism of Microsoft R Server on Windows. SQL Server is not only that, but it also has R embedded, so you can in SQL Server execute R code - somewhat like extended stored procedures. In a future blog-post (or posts), I'll look at how R in SQL Server works, and what you can do with it.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;At the beginning of this post I mentioned how CRAN R have some issues. Through Microsoft R Server some of these issues can be addressed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data movement - execute on SQL Server&lt;/li&gt;
&lt;li&gt;Operationalization - execute your R code by using SQL Server stored procedures (once again, more about this in another post)&lt;/li&gt;
&lt;li&gt;Scale / performance - RevoScaleR is offers both High Performance Computing (HPC) and High Performance Analytics (HPA).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 7</title>
   <link href="http://nielsberglund.com/2017/02/19/interesting-stuff-week-7/"/>
   <updated>2017-02-19T18:48:02+02:00</updated>
   <id>http://nielsberglund.com/2017/02/19/interesting-stuff---week-7</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;This post is little late as I was in Cape Town during the weekend and gave a talk at &lt;a href=&quot;http://capetown2017.satrdays.org/&quot;&gt;satRday&lt;/a&gt;. The conference was really good, great job by Andrew Collier for arranging this. During the week I'll put the code for my talk up on GitHub.&lt;/p&gt;

&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.analyticsvidhya.com/blog/2017/02/6-deep-learning-applications-beginner-python/&quot;&gt;6 Deep Learning Applications a beginner can build in minutes (using Python)&lt;/a&gt;. Interesting article trying to de-mystify Deep Learning.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rblog.uni-freiburg.de/2017/02/07/deep-learning-in-r/&quot;&gt;Deep Learning in R&lt;/a&gt;. More about Deep Learning. This talks about various R packages for Deep Learning.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/ml-algorhitm&quot;&gt;Real-World, Man-Machine Algorithms&lt;/a&gt;. This article, which is part of the InfoQ series &lt;a href=&quot;https://www.infoq.com/introduction-machine-learning&quot;&gt;An Introduction To Machine Learning&lt;/a&gt;, talks about the end-to-end flow of developing machine learning models: where to get training data, how to pick the ML algorithm, and so forth.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/02/preview-r-340.html&quot;&gt;Performance improvements coming to R 3.4.0&lt;/a&gt;. Talks about what can be expected in the new R release 3.4, scheduled for March.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/02/15/redqueen-an-online-algorithm-for-smart-broadcasting-in-social-networks/&quot;&gt;RedQueen: An online algorithm for smart broadcasting in social networks&lt;/a&gt;. From &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;the morning paper&lt;/a&gt;. This is about algorithms can be used to find the optimal time to post on social networks.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thomaswdinsmore.com/2017/02/14/spark-is-the-future-of-analytics/&quot;&gt;Spark is the Future of Analytics&lt;/a&gt;. Interesting analysis of Spark.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://softwaremill.com/kafka-streams-how-does-it-fit-stream-landscape/&quot;&gt;Kafka Streams - how does it fit the stream processing landscape?&lt;/a&gt;. Post about Kafka Streams, a library for transforming and combining data streams in Kafka.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://engineering.skybettingandgaming.com/2017/01/23/streaming-architectures/&quot;&gt;Towards a real-time streaming architecture&lt;/a&gt;. How Sky Betting &amp;amp; Gaming went with Kafka for real-time streaming.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/distributed-real-time-joins-and-aggregations-on-user-activity-events-using-kafka-streams/&quot;&gt;User Activity Events using Kafka Streams&lt;/a&gt;. More about Kafka and Kafka streams. How to enrich an incoming stream of events with side data, and then compute aggregations based on the enriched stream.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Big Data &amp;amp; Databases&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/netflix-big-data-infrastructure&quot;&gt;Petabytes Scale Analytics Infrastructure @Netflix&lt;/a&gt;. About Netflix' overall big data platform architecture, focusing on Storage and Orchestration.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.wired.com/2017/02/spanner-google-database-harnessed-time-now-open-everyone/&quot;&gt;Spanner, the Google Database That Mastered Time, Is Now Open to Everyone&lt;/a&gt;. About Google Spanner, a database that can span multiple geo-locations and still be seen as one instance.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 6</title>
   <link href="http://nielsberglund.com/2017/02/12/interesting-stuff-week-6/"/>
   <updated>2017-02-12T06:32:10+02:00</updated>
   <id>http://nielsberglund.com/2017/02/12/interesting-stuff---week-6</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that have been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;This week has been somewhat hectic work-wise, so I have not read as much as I have wanted, but this is what I found.&lt;/p&gt;

&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://data-artisans.com/apache-flink-1-2-0/&quot;&gt;Apache Flink Community Announces 1.2.0 Release&lt;/a&gt;. &lt;strong&gt;Flink&lt;/strong&gt; is a high-performing stream processing framework. They have now released version 1.2, which adds really exciting new functionality to the engine.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/02/HazlecastJetOSS&quot;&gt;Hazelcast Release Jet, Open-Source Stream Processing Engine&lt;/a&gt;. While we are on the subject of stream processing engines, this article is about a new stream processing engine that has some new innovative thinking in the way it works.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/microservices-in-practice&quot;&gt;Virtual Panel: Microservices in Practice&lt;/a&gt;. Panel discussion about the state of art of Microservices, and how they are likely to evolve.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/02/09/extreme-25x-compression-of-json-data-using-clustered-columnstore-indexes/&quot;&gt;Extreme 25x compression of JSON data using CLUSTERED COLUMNSTORE INDEXES&lt;/a&gt;. In &lt;a href=&quot;/2017/02/05/interesting-stuff-week-5/&quot;&gt;last weeks roundup&lt;/a&gt;, I pointed out a &lt;a href=&quot;https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/02/02/json-data-in-clustered-column-store-indexes/&quot;&gt;post&lt;/a&gt; by Jovan Popovic about JSON data and Clustered Column Store Indexes. This weeks post drills further into it and shows how you can get really impressive compression of the data.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/02/09/exporting-tables-from-sql-server-in-json-line-delimited-format-using-bcp-exe/&quot;&gt;Exporting tables from SQL Server in json line-delimited format using BCP.exe&lt;/a&gt;. More by Jovan. This time how SQL Server can be used to export content of tables into line-delimited JSON format.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit&quot;&gt;SQL Server First Responder Kit&lt;/a&gt;. Through an &lt;a href=&quot;https://www.infoq.com/news/2017/02/SQL-First-Responder&quot;&gt;article&lt;/a&gt; in &lt;a href=&quot;https://www.infoq.com/news/&quot;&gt;InfoQ&lt;/a&gt;, I came across this very handy tool for anyone that has to do any kind of work with SQL Server.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/sql-server/developer-get-started/r&quot;&gt;Build an intelligent app with SQL Server and R&lt;/a&gt;. By now it should be pretty clear that SQL Server 2016, has some very impressive capabilities when it comes to Data Science. This post outlines how to get started and building a predictive model, using SQL Server 2016 and &lt;strong&gt;R&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/02/retail-applications-with-microsoft-r.html&quot;&gt;Retail customer analytics with SQL Server R Services&lt;/a&gt;. More about SQL Server and R. This time about analytics of retail customers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/machine-learning-api-response&quot;&gt;Machine Learning Your Way to Smarter API Error Responses&lt;/a&gt;. Presentation about how Machine Learning can be used to help you understand malformed API requests and to be able to respond with a best fit response, as well as capturing the user errors for future responses.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/big-data-spark-python-r&quot;&gt;Machine Learning and End-to-End Data Analysis Processes in Spark Using Python and R&lt;/a&gt;. Presentation by Debraj GuhaThakurta from the Microsoft Azure Machine Learning group, where he talks about machine learning and data analysis processes in Spark using Python and R.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Big Data and Data Lakes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/02/09/load-data-from-azure-data-lake-into-azure-sql-data-warehouse-at-3tbhour/&quot;&gt;Load Data from Azure Data Lake into Azure SQL Data Warehouse at 3TB/Hour&lt;/a&gt;. Post about how to use SQL Server Data Warehouse PolyBase support to load data from Azure Data Lake Storage into SQL Server Data Warehouse.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Shameless Self Promotion&lt;/h2&gt;

&lt;p&gt;So this is my shameless self promotion part, where I point out posts I have written etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/02/11/rabbitmq-sql-server/&quot;&gt;RabbitMQ - SQL Server&lt;/a&gt;. Post about how to send data from SQL Server to RabbitMQ.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://capetown2017.satrdays.org/&quot;&gt;satRday - Cape Town&lt;/a&gt;. This is the second satRday conference ever - worldwide! My talk is about Microsoft R Server, and how it compares to CRAN R. I do believe there are still available seats, so come by and say Hi!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>RabbitMQ - SQL Server</title>
   <link href="http://nielsberglund.com/2017/02/11/rabbitmq-sql-server/"/>
   <updated>2017-02-11T12:39:51+02:00</updated>
   <id>http://nielsberglund.com/2017/02/11/rabbitmq---sql-server</id>
   <content type="html">&lt;p&gt;A week or two ago I came across a &lt;a href=&quot;https://groups.google.com/forum/#!searchin/rabbitmq-users/sql$20server%7Csort:relevance/rabbitmq-users/T8fA1KdVtYE/bkRz3JkOCwAJ&quot;&gt;post&lt;/a&gt; on the &lt;a href=&quot;https://groups.google.com/forum/#!forum/rabbitmq-users&quot;&gt;RabbitMQ Users&lt;/a&gt; forum, about how to communicate from SQL Server to RabbitMQ. Seeing that we do that a lot at &lt;a href=&quot;/Derivco&quot;&gt;Derivco&lt;/a&gt;, I came with some suggestions, and also said that I was writing a blog-post about how it can be done. The part of writing was not entirely correct - at least not until now (sorry Jim, it's been hectic at work).&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;&lt;strong&gt;SQL Server&lt;/strong&gt; is awesome, and it is super easy to get data into the database. Getting data out is easy as well by querying the database. What is a bit tricker though is to get data out at the time the data is inserted or updated. Think real-time events; a purchase is made - someone needs to be notified about it at the very second it happens. We can arguable say that the data we are interested in should not be pushed out from the database, but from somewhere else. Sure, that is true - but quite often you don't have a choice.&lt;/p&gt;

&lt;p&gt;This was the case for &lt;a href=&quot;/Derivco&quot;&gt;us&lt;/a&gt; - we needed to send events out of the database for some further processing, and the question was how to do it.&lt;/p&gt;

&lt;h2&gt;SQL Server and External Communication&lt;/h2&gt;

&lt;p&gt;There has been a couple of initiatives in SQL Server to allow for communication out of the database; &lt;strong&gt;SQL Server Notification Services&lt;/strong&gt; (NS), which was introduced in SQL Server 2000, and more recently &lt;strong&gt;SQL Server Service Broker&lt;/strong&gt; (SSB) introduced in SQL Server 2005. I covered both NS and SSB in the book I wrote together with Bob Beauchemin and Dan Sullivan - &lt;a href=&quot;https://www.amazon.com/First-Look-Server-2005-Developers/dp/0321180593/ref=sr_1_1?ie=UTF8&amp;amp;qid=1486701050&amp;amp;sr=8-1&amp;amp;keywords=A+First+Look+at+SQL+Server+2005+for+Developers&quot;&gt;&lt;em&gt;A First Look at SQL Server 2005 for Developers&lt;/em&gt;&lt;/a&gt;. NS was introduced in SQL Server 2000, as I mentioned, and had an overhaul in the beta releases for SQL Server 2005. However, NS was cut before SQL Server 2005 went RTM.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you read the &lt;a href=&quot;https://www.amazon.com/First-Look-Server-2005-Developers/dp/0321180593/ref=sr_1_1?ie=UTF8&amp;amp;qid=1486701050&amp;amp;sr=8-1&amp;amp;keywords=A+First+Look+at+SQL+Server+2005+for+Developers&quot;&gt;book&lt;/a&gt;, you can find us covering a couple of features that never made it to RTM.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;SSB survived, and in SQL Server 2008 Feature Pack, Microsoft introduced &lt;a href=&quot;https://blogs.msdn.microsoft.com/sql_service_broker/2008/11/21/announcing-service-broker-external-activator/&quot;&gt;&lt;strong&gt;Service Broker External Activator&lt;/strong&gt;&lt;/a&gt; (EA). This is a way through SSB to be able to communicate outside of the local database. The theory sounds good, but in reality, it is cumbersome and convoluted. We did some tests with it, but we quickly realized it didn't do what we wanted. Also, SSB did not give us the performance we needed, so we had to come up with something else.&lt;/p&gt;

&lt;h2&gt;SQLCLR&lt;/h2&gt;

&lt;p&gt;What we came up with was based on &lt;strong&gt;SQLCLR&lt;/strong&gt;. SQLCLR is where the .NET framework is embedded in the SQL engine, and you execute .NET code in the SQL Server process. Since you execute .NET code, you can &lt;em&gt;almost&lt;/em&gt; do anything you can in a &quot;normal&quot; .NET application.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I wrote &quot;almost&quot; above, as there actually are certain limitations. For this discussion however, the limitations have &lt;strong&gt;almost&lt;/strong&gt; no impact on what we want to do.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The way SQLCLR works is that you compile your code into a dll, and you then register the &lt;strong&gt;assembly&lt;/strong&gt; with SQL Server:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Create Assembly&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSEMBLY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RabbitMQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AUTHORIZATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rmq&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'F:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ome_path&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\R&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;abbitMQSqlClr4.dll'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PERMISSION_SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNSAFE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Creating an Assembly from Absolute Path&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The code does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CREATE ASSEMBLY&lt;/code&gt; - creates an assembly with a given name (whatever you want it to be).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AUTHORIZATION&lt;/code&gt; - indicates the &lt;em&gt;owner&lt;/em&gt; of the assembly. In this case &lt;code&gt;rmq&lt;/code&gt; is a pre-defined SQL Server role.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FROM&lt;/code&gt; - defines where the original assembly lives. The &lt;code&gt;FROM&lt;/code&gt; statement can also take an UNC patch or a binary definition of the assembly. The installation files for this project uses the binary representation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WITH PERMISSION_SET&lt;/code&gt; - sets the permissions. &lt;code&gt;UNSAFE&lt;/code&gt; is the least restrictive, and needed in this case.&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Whatever role/login the &lt;code&gt;AUTHORIZATION&lt;/code&gt; sets, will also cause an appdomain to be created with that name, as well as loading the assembly into that domain, when the assembly is loaded. It is good practice to try and keep your assemblies separated in different appdomains to prevent an error in one assembly taking down multiple assemblies. If the assemblies have dependencies on each other however, they cannot be separated in different appdomains.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When the assembly is created you create wrappers around the .NET methods in your assembly:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Create Wrapper Procedures&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rmq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_clr_PostRabbitMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndpointID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nvarchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXTERNAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RabbitMQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RabbitMQSqlClr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RabbitMQSqlServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_clr_PostRabbitMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;.NET Method Wrappers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The code above does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a T-SQL stored procedure named &lt;code&gt;rmq.pr_clr_PostRabbitMsg&lt;/code&gt;, and it takes two parameters; @EndpointID and @Message.&lt;/li&gt;
&lt;li&gt;Instead of having a body, the procedure is created against an external source, which consists of:

&lt;ul&gt;
&lt;li&gt;An assembly named &lt;code&gt;RabbitMQ.SqlServer&lt;/code&gt;, i.e. the assembly we created above in &lt;em&gt;Code Snippet 1&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;A fully qualified type (name-space and class): &lt;code&gt;RabbitMQSqlClr.RabbitMQSqlServer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A method in the above name-space and class: &lt;code&gt;pr_clr_PostRabbitMsg&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When executing  the procedure &lt;code&gt;rmq.pr_clr_PostRabbitMsg&lt;/code&gt;, the method &lt;code&gt;pr_clr_PostRabbitMsg&lt;/code&gt; will be called.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; When creating the procedure, the assembly name is not case sensitive, however the fully qualified type and method name are. There is no requirement that the procedure name being created are the same as the method name. However, the eventual data types for the parameters have to match.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As I mentioned before, at &lt;a href=&quot;/Derivco&quot;&gt;Derivco&lt;/a&gt; we have the requirement to send data out of SQL server, and for that we use SQLCLR and &lt;strong&gt;&lt;a href=&quot;http://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt;&lt;/strong&gt; (RMQ).&lt;/p&gt;

&lt;h2&gt;RabbitMQ&lt;/h2&gt;

&lt;p&gt;RMQ is an open source message broker software that implements the Advanced Message Queuing Protocol (AMQP), and is written in the Erlang programming language. As the RMQ is  a message broker, you need AMQP client libraries to connect to the broker. Your application references the client libraries, opens a connection and send messages - think ADO.NET to SQL Server. As opposed to ADO.NET, where you most likely opens a connection each time you communicate with the database, you will keep the connection open for the lifetime of the application.&lt;/p&gt;

&lt;p&gt;So, in order to be able to communicate from the database to RabbitMQ we need an application and the .NET client library for RabbitMQ.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the rest of this post three will be some code snippets showing RabbitMQ code, but there won't be much explanation what they do. If you are new to RabbitMQ I suggest you have a look at the various &lt;a href=&quot;http://www.rabbitmq.com/getstarted.html&quot;&gt;RabbitMQ Tutorials&lt;/a&gt;, to get a feel for what the code is doing. The &lt;a href=&quot;http://www.rabbitmq.com/tutorials/tutorial-one-dotnet.html&quot;&gt;&lt;em&gt;Hello World&lt;/em&gt;&lt;/a&gt; tutorial for &lt;em&gt;C#&lt;/em&gt; is a good place to start. One thing different between the tutorials and the demo code is that in the demo code no exchanges are declared. The expectation is that they are pre-defined.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;RabbitMQ.SqlServer&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ.SqlServer&lt;/strong&gt; is an assembly that uses the .NET client library for RabbitMQ and exposes functionality to post messages from the database to one or more RabbitMQ endpoints (VHosts and Exchanges). The code can be downloaded/forked from my GitHub repository &lt;a href=&quot;https://github.com/nberglund/RabbitMQ-SqlServer&quot;&gt;RabbitMQ-SqlServer&lt;/a&gt;. It contains source code of assemblies as well as install files (so you don't have to build from source).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE: This is demo code, to give an idea how SQL Server can call RabbitMQ. This is NOT production ready code in any shape or form. If the code burns down your house and kills you cat - don't blame me - it is DEMO code.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;Functionality&lt;/h3&gt;

&lt;p&gt;When the assembly is being loaded, either due to en explicit call to initialize it - or implicit by calling wrapper procedure, the assembly loads the connection-string to the local database where the assembly is installed, as well as RabbitMQ endpoints, to which it also connects:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Connecting&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternalConnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;n&quot;&gt;&lt;em&gt;connFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConnectionFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;n&quot;&gt;&lt;/em&gt;connFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&lt;em&gt;connString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;n&quot;&gt;&lt;/em&gt;connFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutomaticRecoveryEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;n&quot;&gt;&lt;em&gt;connFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TopologyRecoveryEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;n&quot;&gt;RabbitConn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&lt;/em&gt;connFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&lt;em&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RabbitConn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;n&quot;&gt;&lt;/em&gt;rabbitChannels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Connection to an Endpoint&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While part of connecting to the endpoint it also creates &lt;code&gt;IModel&lt;/code&gt;s on the connection, and these are used when posting messages:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Posting Message&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;IModel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channelTryCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;em&gt;rabbitChannels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryPop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channelTryCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;n&quot;&gt;channelTryCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channelTryCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Channel pool blocked when trying to post message to Exchange: &amp;#x7b;exchange&amp;#x7d;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplicationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BasicPublish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;n&quot;&gt;&lt;/em&gt;rabbitChannels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;n&quot;&gt;_rabbitChannels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;Sending a Message Using an IModel&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Post&lt;/code&gt; method is called via the method &lt;code&gt;pr_clr_PostRabbitMsg(int endPointId, string msgToPost)&lt;/code&gt; which is exposed as a procedure to the &lt;code&gt;CREATE PROCEDURE&lt;/code&gt; statement in &lt;em&gt;Code Snippet 2&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Method to Call Post&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pr_clr_PostRabbitMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endPointId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgToPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endPointId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplicationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EndpointId cannot be 0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;em&gt;isInitialised&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;nf&quot;&gt;pr_clr_InitialiseRabbitMq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msgToPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endPointId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&lt;/em&gt;remoteEndpoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RoutingKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&lt;em&gt;rabbitPublishers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;          &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;n&quot;&gt;RabbitPublisher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;/em&gt;rabbitPublishers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endPointId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&lt;em&gt;remoteEndpoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endPointId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;&lt;/em&gt;remoteEndpoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endPointId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RoutingKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='33' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='34' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='35' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplicationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;EndpointId: &amp;#x7b;endPointId&amp;#x7d;, does not exist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='36' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='37' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='38' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='39' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='40' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='41' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='42' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='43' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;Method to be Exposed as Procedure&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When executing the method the assumption is that the caller sends in the id of the endpoint to which to send the message, as well as the actual message. If -1 is sent in as endpoint id, we loop through all endpoints and send it to all. The message comes in as a string and from the string we are getting bytes by using &lt;code&gt;Encoding.UTF8.GetBytes&lt;/code&gt;. Calling &lt;code&gt;Encoding.UTF8.GetBytes&lt;/code&gt; should in a production environment be replaced with some type of serialization.&lt;/p&gt;

&lt;h3&gt;Installation&lt;/h3&gt;

&lt;p&gt;In the &lt;em&gt;src\sql&lt;/em&gt; folder are all files needed for installing and running this demo code. To install:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the &lt;code&gt;01.create_database_and_role.sql&lt;/code&gt; file. This creates:

&lt;ul&gt;
&lt;li&gt;the test database &lt;code&gt;RabbitMQTest&lt;/code&gt; where the assembly will be created.&lt;/li&gt;
&lt;li&gt;a SQL Server &lt;code&gt;ROLE&lt;/code&gt;: &lt;code&gt;rmq&lt;/code&gt;, which will own the assembly when it is created.&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;SCHEMA&lt;/code&gt;, also called &lt;code&gt;rmq&lt;/code&gt;. The various database objects are created in this schema.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;02.create_database_objects.sql&lt;/code&gt;. This script creates:

&lt;ul&gt;
&lt;li&gt;a table &lt;code&gt;rmq.tb_RabbitSetting&lt;/code&gt;, in which the local database connection string will be stored.&lt;/li&gt;
&lt;li&gt;a table &lt;code&gt;rmq.tb_RabbitEndpoint&lt;/code&gt;, in which one or more RabbitMQ endpoints is stored.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Edit the &lt;code&gt;@connString&lt;/code&gt; variable in &lt;code&gt;03.create_localhost_connstring.sql&lt;/code&gt; to the correct connection string for the &lt;code&gt;RabbitMQTest&lt;/code&gt; database created in step 1. Then run the script.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Before continuing, you need to have an RabbitMQ broker up and running and a VHost (the default VHost &lt;code&gt;/&lt;/code&gt; will do). We tend to have quite a few VHosts, purely for isolation purposes. The VHost also needs an exchange, in the demo code we use &lt;code&gt;amq.topic&lt;/code&gt;. When you have a RabbitMQ broker you edit the parameters in the &lt;code&gt;rmq.pr_UpsertRabbitEndpoint&lt;/code&gt; procedure which is in the &lt;code&gt;04.upsert_rabbit_endpoint.sql&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;RabbitMQ Endpoint&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rmq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_UpsertRabbitEndpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rabbitEp1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'RabbitServer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5672&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VHost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'testHost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoginName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rabbitAdmin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoginPassword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'some_secret_password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exchange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'amq.topic'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RoutingKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionChannels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsEnabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 6:&lt;/strong&gt; &lt;em&gt;Creating a RabbitMQ Endpoint&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At this stage it is time to deploy the assemblies. What we deploy is different if the SQL Server version is pre SQL Server 2014 (2005, 2008, 2008R2, 2012), or version 2014 or later. The difference comes what version of CLR is supported. Pre SQL Server 2014, the .NET framework ran on version 2 of CLR, whereas for SQL Server 2014, and later, it is version 4.&lt;/p&gt;

&lt;h4&gt;SQL Server 2005 - 2012&lt;/h4&gt;

&lt;p&gt;Let us start with the SQL server versions that run on CLR 2, as it is not completely straight forward what to do. We know that we need to deploy the assembly we wrote, and we also need to deploy the .NET client library assembly for RabbitMQ (&lt;code&gt;RabbitMQ.Client&lt;/code&gt;). The RabbitMQ client library should be referenced from our assembly. As we target CLR 2, our assembly as well as the &lt;code&gt;RabbitMQ.Client&lt;/code&gt; need to be compiled against no later .NET version than 3.5. This is where there are some issues.&lt;/p&gt;

&lt;p&gt;All the later versions of the &lt;code&gt;RabbitMQ.Client&lt;/code&gt; libraries are compiled against CLR 4, which means they cannot be used by our assembly. The latest version of the client libraries compiled against CLR 2 is 3.4.3. However, if we try to deploy that assembly we get a &quot;nasty&quot; error message:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/missing_assembly_servicemodel.png&quot; width=&quot;399&quot; height=&quot;204&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Missing Assembly System.ServiceModel&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This version of the &lt;code&gt;RabbitMQ.Client&lt;/code&gt; references an assembly which is not part of CLR inside SQL Server. It is a WCF assembly, and when I - above - wrote of certain limitations in SQLCR, this is one of them: that particular assembly are for all intents and purposes not allowed to run within SQL Server. The latest versions of &lt;code&gt;RabbitMQ.Client&lt;/code&gt; does not have this reference, and can therefore be used without any issues - apart from that &quot;pesky&quot; CLR 4 requirement. What to do?&lt;/p&gt;

&lt;p&gt;Well, RabbitMQ is open source, and we are developers so, let's recompile from source. Before the latest releases of &lt;code&gt;RabbitMQ.Client&lt;/code&gt; (i.e for versions &amp;lt;3.5.0) I removed the &lt;code&gt;System.ServiceModel&lt;/code&gt; reference, and re-compiled. I did have to change a couple of lines of code which used functionality from &lt;code&gt;System.ServiceModel&lt;/code&gt;, but it was minor changes.&lt;/p&gt;

&lt;p&gt;For this demo code I did not use the 3.4.3 version, but grabbed the &lt;a href=&quot;https://github.com/rabbitmq/rabbitmq-dotnet-client/tree/stable&quot;&gt;3.6.6 stable release&lt;/a&gt;, and recompiled using .NET 3.5 (CLR 2). That almost worked :), except for that later releases of &lt;code&gt;RabbitMQ.Client&lt;/code&gt; uses &lt;code&gt;Task&lt;/code&gt;'s, which are not part of .NET 3.5 natively.&lt;/p&gt;

&lt;p&gt;Fortunately there is a version of &lt;a href=&quot;https://www.nuget.org/packages/System.Threading.dll/&quot;&gt;&lt;code&gt;System.Threading.dll&lt;/code&gt;&lt;/a&gt; for .NET 3.5 which includes &lt;code&gt;Task&lt;/code&gt;. I downloaded that, referenced it and all is good! The implication this has is that &lt;code&gt;System.Threading.dll&lt;/code&gt; need to be installed as well as an assembly.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The source for the &lt;code&gt;RabbitMQ.Client&lt;/code&gt; from which I built the .NET 3.5 version is in my &lt;a href=&quot;https://github.com/nberglund/rabbitmq-dotnet-client-3.6.6-stable_net_3.5&quot;&gt;&lt;strong&gt;RabbitMQ Client 3.6.6 .NET 3.5&lt;/strong&gt;&lt;/a&gt; GitHub repository. The compiled dll together with the &lt;code&gt;System.Threading.dll&lt;/code&gt; for .NET 3.5 is also in the &lt;em&gt;lib\NET3.5&lt;/em&gt; folder in the &lt;a href=&quot;https://github.com/nberglund/RabbitMQ-SqlServer&quot;&gt;demo code (RabbitMQ-SqlServer)&lt;/a&gt; repo.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To install the necessary assemblies (System.Threading, RabbitMQ.Client, and RabbitMQ.SqlServer) run the install scripts from &lt;em&gt;src\sql&lt;/em&gt;, in following order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;05.51.System.Threading.sql2k5-12.sql&lt;/code&gt; - System.Threading&lt;/li&gt;
&lt;li&gt;&lt;code&gt;05.52.RabbitMQ.Client.sql2k5-12.sql&lt;/code&gt; - RabbitMQ.Client&lt;/li&gt;
&lt;li&gt;&lt;code&gt;05.53.RabbitMQ.SqlServer.sql2k5-12.sql&lt;/code&gt; - RabbitMQ.SqlServer&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;SQL Server 2014+&lt;/h4&gt;

&lt;p&gt;For SQL Server 2014 and later, you compile your assembly as .NET 4.xx (the demo code is 4.5.2), and you can reference any of the later &lt;code&gt;RabbitMQ.Client&lt;/code&gt; versions, which you can get from &lt;a href=&quot;https://www.nuget.org/packages/RabbitMQ.Client&quot;&gt;NuGet&lt;/a&gt;. For the demo code I use 4.1.1. The &lt;code&gt;RabbitMQ.Client&lt;/code&gt; is also in the &lt;em&gt;lib\NET4&lt;/em&gt; folder in the &lt;a href=&quot;https://github.com/nberglund/RabbitMQ-SqlServer&quot;&gt;demo code (RabbitMQ-SqlServer)&lt;/a&gt; repo.&lt;/p&gt;

&lt;p&gt;To install you run the install scripts from &lt;em&gt;src\sql&lt;/em&gt;, in following order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;05.141.RabbitMQ.Client.sql2k14+.sql&lt;/code&gt; - RabbitMQ.Client&lt;/li&gt;
&lt;li&gt;&lt;code&gt;05.142.RabbitMQ.SqlServer.sql2k14+.sql&lt;/code&gt; - RabbitMQ.SqlServer&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;SQL Method Wrappers&lt;/h4&gt;

&lt;p&gt;To create procedures that can be used from created assemblies (3.5 or 4), you run the &lt;code&gt;06.create_sqlclr_procedures.sql&lt;/code&gt; script which creates T-SQL procedures for the three .NET methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rmq.pr_clr_InitialiseRabbitMq&lt;/code&gt; calls &lt;code&gt;pr_clr_InitialiseRabbitMq&lt;/code&gt;. Used to load and initialize the &lt;code&gt;RabbitMQ.SqlServer&lt;/code&gt; assembly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rmq.pr_clr_ReloadRabbitEndpoints&lt;/code&gt; calls &lt;code&gt;pr_clr_ReloadRabbitEndpoints&lt;/code&gt;. Loads the various RabbitMQ endpoints.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rmq.pr_clr_PostRabbitMsg&lt;/code&gt; calls &lt;code&gt;pr_clr_PostRabbitMsg&lt;/code&gt;. Used to post a message to RabbitMQ.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The script also creates a &quot;pure&quot; T-SQL procedure - &lt;code&gt;rmq.pr_PostRabbitMsg&lt;/code&gt; - which executes against the &lt;code&gt;rmq.pr_clr_PostRabbitMsg&lt;/code&gt;. This procedure is a &quot;wrapper&quot;, which knows what to do with the data and handles errors etc. In production we have multiple procedures like this, handling different types of messages. More about that in &lt;strong&gt;Usage&lt;/strong&gt; below.&lt;/p&gt;

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;p&gt;From all of the above we can see that to post a message to RabbitMQ we call the &lt;code&gt;rmq.pr_PostRabbitMsg&lt;/code&gt; or &lt;code&gt;rmq.pr_clr_PostRabbitMsg&lt;/code&gt; with an endpoint id and the message in string format. That is cool, but how would it be used in the &quot;real world&quot;.&lt;/p&gt;

&lt;p&gt;What &lt;a href=&quot;/Derivco&quot;&gt;we&lt;/a&gt; do in the production systems - in the stored procedures that processes data and the data should be sent to RabbitMQ - is to build up the data we want to send and then in a &quot;hook point&quot; we call the equivalent of &lt;code&gt;rmq.pr_PostRabbitMsg&lt;/code&gt;. Below is a very simplified example of such a procedure:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Processing Procedure&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_SomeProcessingStuff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;c1&quot;&gt;--create a variable for the endpoint&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endPointId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;c1&quot;&gt;--create a variable for the message&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nvarchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;#x7b;'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;c1&quot;&gt;--do important stuff, and collect data for the message&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;Id&quot;:'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;c1&quot;&gt;-- do some more stuff&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;FName&quot;:&quot;Hello&quot;,'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;LName&quot;:&quot;World&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;#x7d;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;c1&quot;&gt;--do more stuff&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;c1&quot;&gt;-- get the endpoint id from somewhere, based on something&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endPointId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;c1&quot;&gt;--here is the hook-point&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;c1&quot;&gt;--call the procedure to send the message&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rmq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_PostRabbitMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndpointID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endPointId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMsg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nvarchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errLine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMsg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERROR_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERROR_LINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Error: %s at line: %d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 7:&lt;/strong&gt; &lt;em&gt;Procedure with Hook-point&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 7&lt;/em&gt; we see how the data to be sent is captured in the procedure, and when processing is done the data is sent. To use this procedure execute the &lt;code&gt;07.create_processing_procedure.sql&lt;/code&gt; script in the &lt;em&gt;src\sql&lt;/em&gt; folder.&lt;/p&gt;

&lt;h3&gt;Make it All Happen&lt;/h3&gt;

&lt;p&gt;At this stage you should now be ready to send some messages. Before you test it, make sure you have a RabbitMQ queue bound to the exchange your end-point in &lt;code&gt;rmq.tb_RabbitEndpoint&lt;/code&gt; points to.&lt;/p&gt;

&lt;p&gt;So, to test this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the script file &lt;code&gt;99.test_send_message.sql&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;EXEC rmq.pr_clr_InitialiseRabbitMq;&lt;/code&gt;, to initialize the assembly and load the RabbitMQ endpoints. This is not necessarily required, but it is good practice to &quot;pre-load&quot; the assembly after it has been created or altered.&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;EXEC dbo.pr_SomeProcessingStuff @id = 101&lt;/code&gt; (use any id value you want).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If no errors happened you should now see a message in your bound queue in the RabbitMQ broker! Congratulations, you have now used SQLCLR to send a message to a RabbitMQ broker.&lt;/p&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 5</title>
   <link href="http://nielsberglund.com/2017/02/05/interesting-stuff-week-5/"/>
   <updated>2017-02-05T09:58:12+02:00</updated>
   <id>http://nielsberglund.com/2017/02/05/interesting-stuff---week-5</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://queue.acm.org/detail.cfm?id=3025012&quot;&gt;Life Beyond Distributed Transactions&lt;/a&gt;. An excellent piece about distributed transactions in large scale systems. As a side note; the &lt;a href=&quot;http://queue.acm.org/&quot;&gt;queue.acm.org&lt;/a&gt; is a goldmine if you are interested in enterprise computing related papers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://highscalability.com/blog/2016/9/28/how-uber-manages-a-million-writes-per-second-using-mesos-and.html&quot;&gt;How Uber Manages a Million Writes Per Second Using Mesos and Cassandra Across Multiple Datacenter&lt;/a&gt;. Very interesting post about how Uber has designed their systems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2017/01/scaling-twitter-infrastructure&quot;&gt;The Infrastructure Behind Twitter: Scaling Networking, Storage and Provisioning&lt;/a&gt;. Similar to the post above, but this time about Twitter. Some interesting takeaways:

&lt;ul&gt;
&lt;li&gt;There is no such a thing as a “temporary change or workaround”. In most cases, workarounds are technical debt.&lt;/li&gt;
&lt;li&gt;Architect beyond the original specifications and requirements.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mapr.com/blog/real-time-credit-card-fraud-detection-apache-spark-and-event-streaming&quot;&gt;Real Time Credit Card Fraud Detection with Apache Spark and Event Streaming&lt;/a&gt;. A post how you how to build a real time solution for credit card fraud detection.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/ml-intro-python&quot;&gt;Introduction to Machine Learning with Python&lt;/a&gt;. First part in a series about &lt;a href=&quot;https://www.infoq.com/introduction-machine-learning&quot;&gt;machine learning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thomaswdinsmore.com/2017/02/01/year-in-sql-engines/&quot;&gt;THE YEAR IN SQL ENGINES&lt;/a&gt;. So this is not about relational databases, but a roundup of various sql engines for data science and big data.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/02/fst-fast-serialization-of-r-data-frames.html&quot;&gt;fst: Fast serialization of R data frames&lt;/a&gt;. A new R package for serialization of data.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/02/the-year-in-r.html&quot;&gt;A look back at the year in R and Microsoft&lt;/a&gt;. Looking at what happened in 2016 in R and Microsoft (related to machine learning).&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/streaming-hadoop&quot;&gt;Streaming Live Data and the Hadoop Ecosystem&lt;/a&gt;. A very interesting presentation about Hadoop and streaming of data in Hadoop.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/new-in-azure-stream-analytics-geospatial-functions-custom-code-and-lots-more/&quot;&gt;New in Azure Stream Analytics: Geospatial functions, Custom code and lots more!&lt;/a&gt;. Microsoft has just released new features and functionality for &lt;a href=&quot;https://azure.microsoft.com/en-us/services/stream-analytics/&quot;&gt;Azure Stream Analytics&lt;/a&gt; (ASA). I have played around with the Visual Studio tools for ASA, and it rocks!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/02/02/json-data-in-clustered-column-store-indexes/&quot;&gt;JSON data in clustered column store indexes&lt;/a&gt;. Jovan has written a really nice post how Clustered Column Store indexes can give you compression and query performance benefits for JSON data store in SQL Server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlskills.com/blogs/paul/determine-causes-particular-wait-type/&quot;&gt;How to determine what causes a particular wait type&lt;/a&gt;. A post by Paul Randal from 2014 about how to find out when and why &lt;strong&gt;wait types&lt;/strong&gt; occur.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Finally two more posts by Bob Dorr about SQL Server and Linux:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/bobsql/2017/01/29/sql-server-on-linux-an-lldb-debugging-tale/&quot;&gt;SQL Server on Linux: An LLDB Debugging Tale&lt;/a&gt;. What Microsoft did in order to be able to debug SQL Server running on Linux.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/bobsql/2017/01/31/sql-server-on-linux-scattergather-vectored-io/&quot;&gt;SQL Server on Linux: Scatter/Gather == Vectored I/O&lt;/a&gt;. How scatter/gather are done on Linux.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 4</title>
   <link href="http://nielsberglund.com/2017/01/28/interesting-stuff-week-4/"/>
   <updated>2017-01-28T07:57:00+02:00</updated>
   <id>http://nielsberglund.com/2017/01/28/interesting-stuff---week-4</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;This week it is mostly data science, so without further ado, let's get cracking:&lt;/p&gt;

&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/01/upcoming-r-conferences.html&quot;&gt;Upcoming R Conferences&lt;/a&gt;. A list of upcoming R conferences around the world. Among the conferences it lists the second ever &lt;strong&gt;satRday&lt;/strong&gt;, this year held in Cape Town. I will be speaking there, and I do believe there still are tickets left. Check &lt;a href=&quot;http://capetown2017.satrdays.org/&quot;&gt;here&lt;/a&gt; for more.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/01/25/a-plethora-of-microsoft-training-options-on-ai-machine-learning-data-science-including-moocs/&quot;&gt;Microsoft Training Options on AI, Machine Learning &amp;amp; Data Science&lt;/a&gt;. This post lists a lot of various training options within data science, mostly based on &lt;strong&gt;Microsoft&lt;/strong&gt; technologies&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/01/27/new-year-new-updates-to-the-windows-data-science-virtual-machine/&quot;&gt;New Year &amp;amp; New Updates to the Windows Data Science Virtual Machine&lt;/a&gt;. Microsoft has updated its &lt;strong&gt;Azure&lt;/strong&gt; based &lt;a href=&quot;https://azure.microsoft.com/en-us/marketplace/partners/microsoft-ads/standard-data-science-vm/&quot;&gt;Data Science Virtual Machine&lt;/a&gt;, with some really, really interesting new stuff!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/01/microsoftml-taxi-trips.html&quot;&gt;Building a machine learning model with the MicrosoftML package&lt;/a&gt;. A post about &lt;a href=&quot;https://msdn.microsoft.com/en-us/microsoft-r/microsoftml-introduction&quot;&gt;MicrosoftML&lt;/a&gt;, the new high performant R package included in &lt;a href=&quot;https://www.microsoft.com/en-us/cloud-platform/r-server&quot;&gt;Microsoft R Server 9&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/quora-analytics&quot;&gt;Scaling Counting Infrastructure @Quora&lt;/a&gt;. An &lt;a href=&quot;https://www.infoq.com&quot;&gt;InfoQ&lt;/a&gt; presentation about &lt;strong&gt;Quanta&lt;/strong&gt;, which is &lt;strong&gt;Quora&lt;/strong&gt;'s counting system powering their high-volume near-real-time analytics.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.confluent.io/making-sense-of-stream-processing-ebook-download/&quot;&gt;Making Sense of Stream Processing&lt;/a&gt;. A download link for an eBook covering how stream processing can make your data processing systems more flexible and less complex. I include it here as the book discusses &lt;strong&gt;Kafka&lt;/strong&gt; (which I think is awesome, Kafka I mean).&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=oEpJB87Xg9U&quot;&gt;Introducing SQL Server on Linux&lt;/a&gt;. A YouTube video about SQL Server on Linux, including how you can: download and install SQL Server on a Linux Virtual Machine; run your SQL Server-based apps inside of Docker containers and improve the performance of your applications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/bobsql/2017/01/24/sql-server-on-linux-debugging-elf-and-pe-images-dbgbridge/&quot;&gt;SQL Server on Linux: Debugging ELF and PE Images (dbgbridge)&lt;/a&gt;. A very, very interesting post how Microsoft implemented the ability to debug from WinDbg, both SQL Server on Windows as well as on Linux!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Shameless Self Promotion&lt;/h2&gt;

&lt;p&gt;So this is my shameless self promotion part. I have three blog-posts about error handling on SQL Server. Personally I think they are well worth reading :). In chronological order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2016/12/31/sql-server-error-handling-gotchas/&quot;&gt;SQL Server Error Handling Gotchas&lt;/a&gt;. How error handling in SQL Server can trip you up!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/01/08/abort-abort-we-re-xact-aborting-or-are-we/&quot;&gt;Abort, Abort, We Are XACT_ABORT:ing, Or Are We?!&lt;/a&gt;. The dangers of using XACT_ABORT in SQL Server OLTP databases.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/01/27/doomed-we-are-all-doomed/&quot;&gt;Doomed, We are All Doomed I Say!&lt;/a&gt;. A blog-post about doomed transactions in SQL Server and XACT_STATE().&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Doomed, We are All Doomed I Say!</title>
   <link href="http://nielsberglund.com/2017/01/27/doomed-we-are-all-doomed/"/>
   <updated>2017-01-27T18:58:40+02:00</updated>
   <id>http://nielsberglund.com/2017/01/27/doomed-we-are-all-doomed</id>
   <content type="html">&lt;p&gt;Just to set things straight, the title of this post has nothing to do with US politics, but the infinitely more important (and exciting) subject of transactions in &lt;strong&gt;SQL Server&lt;/strong&gt; and the concept of &lt;strong&gt;doomed&lt;/strong&gt; transactions. Why I came across the idea for this post was due to a discussion I had with a colleague of mine - Sameer Chunilall - who didn't agree with my &lt;a href=&quot;/2017/01/08/abort-abort-we-re-xact-aborting-or-are-we/&quot;&gt;post&lt;/a&gt; a while ago about &lt;code&gt;XACT_ABORT&lt;/code&gt;, he believes it is a good thing (mostly), where I believe it is a bad thing (mostly).&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;We &lt;del&gt;argued&lt;/del&gt; discussed at length, and then decided that we both were right. Or rather I decided I was right, and he decided he was right :). Jokes aside, during the discussions the concept of &lt;strong&gt;doomed&lt;/strong&gt; transactions were brought up, and that led me to writing this blog post.&lt;/p&gt;

&lt;p&gt;Before we go any further, I have written a couple (three actually) posts that deal with transactions and/or error-handling in SQL Server, so if you want to refresh your memory they can be found here (in chronological order):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2011/09/11/transactions-in-sql-server-take-2956/&quot;&gt;Transactions in SQL Server (take 2956)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2016/12/31/sql-server-error-handling-gotchas/&quot;&gt;SQL Server Error Handling Gotchas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/01/08/abort-abort-we-re-xact-aborting-or-are-we/&quot;&gt;Abort, Abort, We Are XACT_ABORT:ing, Or Are We?!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Before we start talking about doomed transactions, let's look at something that has a definitive impact if a transaction will be doomed or not.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: There is no special demo code for this blog post, if you want you can &lt;a href=&quot;/downloads/code/xact_abort.zip&quot;&gt;download the code from the &lt;code&gt;XACT_ABORT&lt;/code&gt; blog post&lt;/a&gt;, and edit according to the code snippets here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Statement, Scope and Batch Termination&lt;/h2&gt;

&lt;p&gt;In SQL Server you execute statements and batches. A statement is what it says it is, a single T-SQL statement, like:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Statement Execution&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Order 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;T-SQL Statement&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A batch is what is executed at a point in time from an application (SSMS, ADO.NET, etc.):&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Batch Execution&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Order 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Invalid OrderID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for OrderID 3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;T-SQL Batch&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;GO&lt;/code&gt; statement in &lt;em&gt;Code Snippet 2&lt;/em&gt;, is an SSMS &quot;thing&quot;. When executing code from a script, the&lt;code&gt;GO&lt;/code&gt; statement denotes batches.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When executing a stored procedure, that is also a batch. If a procedure calls other procedures, they are all executing inside the same batch. The code below shows 4 procedures we will use going forward:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Procedures&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- the DROP ... IF EXISTS only works on SQL SERVER 2016+&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_Caller&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for OrderID 3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_2: Before Insert'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--this should just work&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for OrderID 2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;---- this should cause a fk exception&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--INSERT INTO dbo.tb_OrderDetail(OrderID, SomeDetail)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--VALUES(5, 'Details for Invalid OrderID');&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;---- invalid object name &lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--SELECT * FROM dbo.tb_MyTable;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='33' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='34' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;---- Conversion failure&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='35' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- DECLARE @n int;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='36' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- SELECT @n = CONVERT(int,'ABC');&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='37' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='38' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_2: Before EXEC dbo.pr_3'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='39' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='40' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='41' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='42' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='43' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='44' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='45' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='46' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='47' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: Before Insert'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='48' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='49' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Order 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='50' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: Before EXEC dbo.pr_2'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='51' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='52' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='53' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='54' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='55' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_Caller&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='56' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='57' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='58' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='59' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_Caller: Before Begin TX'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='60' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='61' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_Caller: Before EXEC dbo.pr_1'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='62' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='63' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_Caller: Before Commit TX'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='64' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='65' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='66' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Call Chain of Procedures&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we can see, &lt;code&gt;dbo.pr_Caller&lt;/code&gt; starts a transaction, calls &lt;code&gt;dbo.pr_1&lt;/code&gt;, which in turn calls &lt;code&gt;dbo.pr_2&lt;/code&gt;, which finally calls &lt;code&gt;dbo.pr_3&lt;/code&gt;. When all is &quot;said and done&quot;, &lt;code&gt;dbo.pr_Caller&lt;/code&gt; commits the transaction. The procedure &lt;code&gt;dbo.pr_2&lt;/code&gt; is the &quot;dodgy&quot; procedure in this call chain, and we will use it to simulate some error conditions that will result in various termination types. As you can see in &lt;em&gt;Code Snippet 3&lt;/em&gt;, &lt;code&gt;dbo.pr_2&lt;/code&gt; has some commented out code, and it is this code that will cause terminations. Initially we'll execute the code as is, and this should not cause any errors:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execution of Procedures&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;TRUNCATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_Caller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4&lt;/strong&gt;: &lt;em&gt;Batch Executions&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The code above starts with &lt;code&gt;TRUNCATE TABLE&lt;/code&gt; we do that just to make sure everything is cleaned up before execution. Oh, and BTW - how many batches are executed above? Answer in comments or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;email&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When executing the above you should see three rows coming back from the &lt;code&gt;SELECT&lt;/code&gt; statement, all is good:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/batch_no_errors.png&quot; width=&quot;300&quot; height=&quot;124&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Procedure Execution No Errors&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So what happens now if we were to &lt;code&gt;ALTER&lt;/code&gt; proc 2 a bit, comment out the insert for &lt;code&gt;OrderID&lt;/code&gt; 2, and uncomment the insert for &lt;code&gt;OrderID&lt;/code&gt; 5. There is no order with that id, so it should result in a foreign key constraint error. The proc should look like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Alter Proc&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_2: Before Insert'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;----this should just work&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--INSERT INTO dbo.tb_OrderDetail(OrderID, SomeDetail)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--VALUES(2, 'Details for OrderID 2');&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- this should cause a fk exception&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Invalid OrderID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;---- invalid object name &lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--SELECT * FROM dbo.tb_MyTable;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;---- Conversion failure&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- DECLARE @n int;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- SELECT @n = CONVERT(int,'ABC');&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_2: Before EXEC dbo.pr_3'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;Proc Which Will Cause FK Violation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;ALTER&lt;/code&gt;:ing the proc and executing as in &lt;em&gt;Code Snippet 4&lt;/em&gt;, we get something like:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/fk_error.png&quot; width=&quot;685&quot; height=&quot;235&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;FK Error After Procedure Execution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So we got a FK violation error, but we can also see that we continued the execution in &lt;code&gt;dbo.pr_2&lt;/code&gt;, and called &lt;code&gt;dbo.pr_3&lt;/code&gt;. Furthermore, the result gives us two rows back, from &lt;code&gt;dbo.pr_1&lt;/code&gt; and &lt;code&gt;dbo_pr_3&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/result_after_fk.png&quot; width=&quot;300&quot; height=&quot;105&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Result After FK Error&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Statement Termination&lt;/h3&gt;

&lt;p&gt;What we just have seen is &lt;strong&gt;statement termination&lt;/strong&gt;. The statement causing an error stopped executing, but we continued executing - even within the same proc - straight after that statement. Furthermore, the error had no &lt;em&gt;negative&lt;/em&gt; impact on the transaction. This may or may not be what you expect and want.&lt;/p&gt;

&lt;p&gt;I guess that most of you who read this have heard about statement termination before, so what we just have done should not come as any surprise.&lt;/p&gt;

&lt;p&gt;Some of the errors that can cause statement termination are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most of &lt;code&gt;CONSTRAINT&lt;/code&gt; errors:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NOT NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PRIMARY KEY&lt;/code&gt; and &lt;code&gt;FOREIGN KEY&lt;/code&gt; errors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CHECK CONSTRAINT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Errors raised by the user&lt;/li&gt;
&lt;li&gt;Quite a few more :)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Scope Termination&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Scope Termination&lt;/strong&gt; is probably not as well known as statement termination. A scope termination is when SQL Server terminates the statement that caused the exception and subsequent execution within the same &lt;em&gt;scope&lt;/em&gt;. In the examples we are using, &lt;em&gt;scope&lt;/em&gt; would be an individual procedure. So, let us have a look at an scope termination example, let us &lt;code&gt;ALTER&lt;/code&gt; our &quot;naughty&quot; procedure &lt;code&gt;dbo.pr_2&lt;/code&gt; and comment out the statement which caused the FK violation, and un-comment where the procedure does a &lt;code&gt;SELECT&lt;/code&gt; from the non-existent table &lt;code&gt;dbo.tb_MyTable&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Alter For Scope Termination&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_2: Before Insert'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;----this should just work&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--INSERT INTO dbo.tb_OrderDetail(OrderID, SomeDetail)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--VALUES(2, 'Details for OrderID 2');&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;---- this should cause a fk exception&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--INSERT INTO dbo.tb_OrderDetail(OrderID, SomeDetail)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--VALUES(5, 'Details for Invalid OrderID');&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- invalid object name &lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_MyTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;---- Conversion failure&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- DECLARE @n int;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- SELECT @n = CONVERT(int,'ABC');&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_2: Before EXEC dbo.pr_3'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 6&lt;/strong&gt;: &lt;em&gt;SELECT from Non-Existent Table&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you execute as in &lt;em&gt;Code Snippet 4&lt;/em&gt;, the outcome is:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/scope_abort.png&quot; width=&quot;584&quot; height=&quot;165&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Scope Abort Error&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As expected an error happened, but compared to the statement termination example, &lt;code&gt;dbo.pr_2&lt;/code&gt; did not continue executing (we did not see &lt;code&gt;dbo.pr_2: Before EXEC dbo.pr_3&lt;/code&gt;). The statement that caused the error was terminated &lt;strong&gt;AND&lt;/strong&gt; all subsequent statements within that scope (procedure). However, the batch continues and &lt;code&gt;dbo.pr_Caller&lt;/code&gt; committed the transaction. When you look at the &lt;em&gt;Results&lt;/em&gt; tab in SSMS you will see one row returning from the &lt;code&gt;SELECT&lt;/code&gt; statement; the insert done by &lt;code&gt;dbo.pr_1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, what causes scope termination? I have tried to look into that, but so far the only error type I have found termination the scope is when you try to access a missing object. If you know more types, please &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;email&lt;/a&gt; me, and I can update this post.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Neither statement termination, nor scope termination have any effect on a transaction.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4&gt;Error Handling and Scope Termination&lt;/h4&gt;

&lt;p&gt;An interesting aspect of scope termination is how it is being handled (or not) by error handling. From my previous posts about errors, (&lt;a href=&quot;/2016/12/31/sql-server-error-handling-gotchas/&quot;&gt;gotchas&lt;/a&gt;, and &lt;a href=&quot;/2017/01/08/abort-abort-we-re-xact-aborting-or-are-we/&quot;&gt;XACT_ABORT&lt;/a&gt;), we see how either &lt;code&gt;IF(@@ERROR &amp;lt;&amp;gt; 0 )&lt;/code&gt;, or &lt;code&gt;TRY ... CATCH&lt;/code&gt; catch exceptions. How about scope termination errors? You would expect them to be handled the same way as statement termination errors, as they do have the same severity (16), as can be seen from &lt;em&gt;Figure 3&lt;/em&gt;, and &lt;em&gt;Figure 4&lt;/em&gt;. In fact that is not the case! It turns out that an &lt;code&gt;IF(@@ERROR &amp;lt;&amp;gt; 0)&lt;/code&gt; will not catch the error, whereas a &lt;code&gt;TRY ... CATCH&lt;/code&gt; block will!&lt;/p&gt;

&lt;h3&gt;Batch Termination&lt;/h3&gt;

&lt;p&gt;After having covered statement termination and scope termination above, I do think that it is pretty clear what &lt;strong&gt;batch&lt;/strong&gt; termination is. Some code to show this; once again in &lt;code&gt;dbo.pr_2&lt;/code&gt;, comment out the &lt;code&gt;SELECT&lt;/code&gt; statement against the no existing table and un-comment the part where we try to do a &lt;code&gt;CAST&lt;/code&gt; conversion:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Alter Proc for Batch Termination&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_2: Before Insert'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;----this should just work&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--INSERT INTO dbo.tb_OrderDetail(OrderID, SomeDetail)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--VALUES(2, 'Details for OrderID 2');&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;---- this should cause a fk exception&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- INSERT INTO dbo.tb_OrderDetail(OrderID, SomeDetail)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- VALUES(5, 'Details for Invalid OrderID');&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;---- invalid object name &lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- SELECT * FROM dbo.tb_MyTable;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--- Conversion failure&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CONVERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ABC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_2: Before EXEC dbo.pr_3'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 7:&lt;/strong&gt; &lt;em&gt;Proc Which Will Cause CAST Conversion Error&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When executing this (once again a in &lt;em&gt;Code Snippet 4&lt;/em&gt;), this is what we get:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/batch_termination.png&quot; width=&quot;580&quot; height=&quot;165&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Batch Termination Error&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When looking at the output as per in &lt;em&gt;Figure 5&lt;/em&gt;, we can see that no more execution happened in &lt;code&gt;dbo.pr_2&lt;/code&gt;, as was also the case in scope-termination and &lt;em&gt;Figure 4&lt;/em&gt;, &lt;strong&gt;BUT&lt;/strong&gt; we do not see any further execution in &lt;code&gt;dbo.pr_Caller&lt;/code&gt; either! The batch completely terminated. But wait a second; what about the transaction that was originally started in &lt;code&gt;dbo.pr_Caller&lt;/code&gt;? That transaction has been rolled back automatically, when we exited the batch (more about that later).&lt;/p&gt;

&lt;p&gt;Errors that can cause batch termination are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conversion errors&lt;/li&gt;
&lt;li&gt;Deadlocks&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Error Handling and Batch Termination&lt;/h4&gt;

&lt;p&gt;As with scope termination, &lt;code&gt;IF(@@ERROR &amp;lt;&amp;gt; 0)&lt;/code&gt; will not catch the error that caused the batch termination, but &lt;code&gt;TRY ... CATCH&lt;/code&gt; will. So, let's see what happens when we introduce &lt;code&gt;TRY ... CATCH&lt;/code&gt; in &lt;code&gt;dbo.pr_Caller&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Proc With TRY ... CATCH Block&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_Caller&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_Caller: Before Begin TX'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_Caller: Before EXEC dbo.pr_1'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_Caller: Before Commit TX'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'In catch block'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 8:&lt;/strong&gt; &lt;em&gt;TRY ... CATCH and Batch Termination&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We &lt;code&gt;ALTER&lt;/code&gt; &lt;code&gt;dbo.pr_Caller&lt;/code&gt; to have a &lt;code&gt;TRY ... CATCH&lt;/code&gt;, but we do not do anything other than a &lt;code&gt;PRINT&lt;/code&gt; statement. Remember, when we didn't have any &lt;code&gt;TRY ... CATCH&lt;/code&gt;, the transaction was automatically rolled back. It is a little bit different now when we execute it as in &lt;em&gt;Code Snippet 4&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/uncommitable_tx.png&quot; width=&quot;610&quot; height=&quot;250&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Uncommittable Transaction&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What happened here? All of a sudden we get quite a few error messages, and what is this about &lt;em&gt;Uncommittable transaction&lt;/em&gt; at the very end? The short story is that as soon as you introduce &lt;code&gt;TRY ... CATCH&lt;/code&gt; and you have active transactions - you need to decide what to do with that transaction.&lt;/p&gt;

&lt;p&gt;OK makes sense. In this case, I don't really care what went wrong, and I want to commit the transaction anyway. I conveniently don't pay any attention to the part of &lt;em&gt;uncommittable&lt;/em&gt; in the error message. After all - this is what I can do if I get a statement termination or scope termination, so why not do it here too! I &lt;code&gt;ALTER&lt;/code&gt; the procedure to do &lt;code&gt;COMMIT TRAN&lt;/code&gt; in the &lt;code&gt;CATCH&lt;/code&gt; block straight after the &lt;code&gt;PRINT&lt;/code&gt; statement, and then I execute:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/current_tx_cannot_be_committed.png&quot; width=&quot;635&quot; height=&quot;290&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;Current Transaction Cannot be Committed&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I am in trouble now. This time I am &lt;strong&gt;really&lt;/strong&gt; told that I am doing something wrong: &quot;&lt;em&gt;The current transaction cannot be committed and cannot support operations
that write to the log file. Roll back the transaction&lt;/em&gt;&quot;. What is this?&lt;/p&gt;

&lt;h2&gt;Doomed (a.k.a. &quot;Oh, Oh, I am so up the cr33k&quot;)&lt;/h2&gt;

&lt;p&gt;The errors we see in both &lt;em&gt;Figure 5&lt;/em&gt; as well as in &lt;em&gt;Figure 6&lt;/em&gt; are due to that SQL Server decides - for one reason or another - that it cannot commit the transaction. The transaction is &lt;strong&gt;doomed&lt;/strong&gt;, and the only thing that can be done is to roll it back. It is not straight forward when an error causes a doomed transaction as the way SQL Server handles errors are case by case. Rule of thumb though is that in most cases a doomed transaction is due to some error that has caused a batch termination.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; To further drive home that SQL handles errors on a case by case basis, all errors we have seen so far (caused by statement, scope and batch terminations), have had a &lt;em&gt;severity&lt;/em&gt; of 16.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just to prove that we can recover from a batch termination without errors, we &lt;code&gt;ALTER&lt;/code&gt; the &lt;code&gt;dbo.pr_Caller&lt;/code&gt; procedure, replace the &lt;code&gt;COMMIT TRAN&lt;/code&gt; with &lt;code&gt;ROLLBACK TRAN&lt;/code&gt;, and execute. The outcome will be completely different:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/rollback_tran.png&quot; width=&quot;305&quot; height=&quot;150&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;Rollback Doomed Transaction&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As &lt;em&gt;Figure 6&lt;/em&gt; shows, no &quot;nasty&quot; errors - all is OK! So what do we do if we sometimes want to commit the transaction if it is not doomed even if there has been an error, or rather - how can we figure out whether a transaction can be committed or not?&lt;/p&gt;

&lt;h3&gt;XACT_STATE()&lt;/h3&gt;

&lt;p&gt;The way to determine if a transaction can be committed or not is to use &lt;code&gt;XACT_STATE()&lt;/code&gt;. The &lt;code&gt;XACT_STATE()&lt;/code&gt; is a scalar function and it reports on the state of the current transaction. There are 3 possible return values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-1: a user transaction is active, but it is &lt;em&gt;doomed&lt;/em&gt;, and it can only be rolled back&lt;/li&gt;
&lt;li&gt;0: no user transaction is active&lt;/li&gt;
&lt;li&gt;1: a user transaction is active, it can be committed or rolled back.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To see an example of this &lt;code&gt;ALTER&lt;/code&gt; the &lt;code&gt;dbo.pr_Caller&lt;/code&gt; proc's &lt;code&gt;CATCH&lt;/code&gt; block to look something like &lt;em&gt;Code Snippet 9&lt;/em&gt; below and then execute.&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;XACT_STATE&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smallint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'In catch block and XACT_STATE = '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'We are rolling back'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'We are committing'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'No transaction available'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 9:&lt;/strong&gt; &lt;em&gt;Using XACT_STATE()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After execution the output would be like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/xact_state.png&quot; width=&quot;315&quot; height=&quot;165&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; &lt;em&gt;Rollback Doomed Transaction&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we see from &lt;em&gt;Figure 7&lt;/em&gt;, we ended up in the &lt;code&gt;CATCH&lt;/code&gt; block, &lt;code&gt;XACT_STATE&lt;/code&gt; was -1, and the transaction was rolled back. You can if you want &lt;code&gt;ALTER&lt;/code&gt; the &quot;naughty&quot; proc &lt;code&gt;dbo.pr_2&lt;/code&gt;, and comment out the statement causing the batch termination and un-comment the statement which creates the statement termination. When executing, you should now get an output like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/xact_state_1.png&quot; width=&quot;285&quot; height=&quot;170&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;Rollback Doomed Transaction&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here we had decided that even if an exception was raised, we wanted to commit the transaction, unless it was doomed.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;XACT_STATE&lt;/code&gt; can be used outside &lt;code&gt;TRY ... CATCH&lt;/code&gt;, so you can use it even with &quot;old style&quot; error handling.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;XACT_ABORT&lt;/h2&gt;

&lt;p&gt;I started this blog-post by talking about &lt;code&gt;XACT_ABORT&lt;/code&gt;, and how I discussed with Sameer if it was good or bad. We have now come full circle and we are back to &lt;code&gt;XACT_ABORT&lt;/code&gt;. You are probably asking yourself how that fits into here?&lt;/p&gt;

&lt;p&gt;The answer to that is that if you switch on &lt;code&gt;XACT_ABORT&lt;/code&gt;, even statement termination errors will cause the transaction to be doomed! To test this, &lt;code&gt;ALTER&lt;/code&gt; the calling proc &lt;code&gt;dbo.pr_Caller&lt;/code&gt; and insert a &lt;code&gt;SET XACT ABORT ON&lt;/code&gt; at the beginning of the proc, underneath the &lt;code&gt;SET NOCOUNT ON&lt;/code&gt;. The first few lines of the proc should look like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;XACT_ABORT ON&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_Caller&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_ABORT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 10:&lt;/strong&gt; &lt;em&gt;Setting XACT_ABORT ON&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you haven't already &lt;code&gt;ALTER&lt;/code&gt;:ed &lt;code&gt;dbo.pr_2&lt;/code&gt; to cause a foreign key exception (statement termination and not a &quot;doomable&quot; error), do so - as discussed between &lt;em&gt;Figure 7&lt;/em&gt; and &lt;em&gt;Figure 8&lt;/em&gt;. When you now execute you will get the same output as in &lt;em&gt;Figure 7&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finally, it is quite common to hear that triggers can be an issue, as they are rolling back transactions if an error happens in the trigger. The reason for this is that when a trigger executes, it automatically sets &lt;code&gt;XACT_ABORT ON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I am not completely certain of the reason for this, but I guess it is a good &quot;defensive&quot; measure. So, if you don't want this behavior, you can do a &lt;code&gt;SET XACT_ABORT OFF&lt;/code&gt; in your triggers.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;Transactions are doomed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When an exception happens which causes a batch termination&lt;/li&gt;
&lt;li&gt;For any exception when &lt;code&gt;XACT_ABORT&lt;/code&gt; is &lt;code&gt;ON&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When SQL Server feels like it. :)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Exception handling in SQL Server is &lt;strong&gt;NOT&lt;/strong&gt; straight forward, especially when mixed with transactions!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 3</title>
   <link href="http://nielsberglund.com/2017/01/21/interesting-stuff-week-3/"/>
   <updated>2017-01-21T05:37:16+02:00</updated>
   <id>http://nielsberglund.com/2017/01/21/interesting-stuff---week-3</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, this week.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;This week there will be quite a few links to white-papers from this years &lt;a href=&quot;http://cidrdb.org/&quot;&gt;&lt;strong&gt;The Conference on Innovative Data Systems Research&lt;/strong&gt;&lt;/a&gt; (CIDR). It was started in 2002 by very illustrious people from the database industry: &lt;a href=&quot;https://en.wikipedia.org/wiki/Michael_Stonebraker&quot;&gt;&lt;strong&gt;Michael Stonebraker&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Jim_Gray_(computer_scientist)&quot;&gt;&lt;strong&gt;Jim Gray&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/David_DeWitt&quot;&gt;&lt;strong&gt;David DeWitt&lt;/strong&gt;&lt;/a&gt;! The conference gives the database community a venue to present groundbreaking and innovative data systems architectures. This year it was held January 8 - 11, and you can find all the presentations &lt;a href=&quot;http://cidrdb.org/cidr2017/program.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have had a quick glance through the white-papers and following are the ones that I am interested in and have had a chance to look at in some details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://cidrdb.org/cidr2017/papers/p124-meehan-cidr17.pdf&quot;&gt;Data Ingestion for the Connected World&lt;/a&gt;. Discussion around new architecture for doing ETL in a world where real-time data is of out-most importance. The solution, which I am really, really interested in getting to know more about, centers around:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt;, a message broker type system&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sstore.cs.brown.edu/&quot;&gt;S-Store&lt;/a&gt; which is a streaming OLTP engine, which seeks to seemlessly combine online transactional processing with push-based stream processing for real-time applications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://users.eecs.northwestern.edu/~jennie/research/bigdawg_record.pdf&quot;&gt;Intel’s BigDAWG&lt;/a&gt;, a distributed polystore engine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cidrdb.org/cidr2017/papers/p123-barber-cidr17.pdf&quot;&gt;Evolving Databases for New-Gen Big Data Applications&lt;/a&gt;. Presenting a system for handling high-volume transactions while executing complex analytics queries concurrently in a large-scale distributed big data platform.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cidrdb.org/cidr2017/papers/p28-mozafari-cidr17.pdf&quot;&gt;SnappyData: A Unified Cluster for Streaming, Transactions, and Interactive Analytics&lt;/a&gt;. Yet another system for OLTP workloads and analysis in real-time.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cidrdb.org/cidr2017/papers/p44-deng-cidr17.pdf&quot;&gt;The Data Civilizer System&lt;/a&gt;. As a data scientist you probably spend most of your time finding, preparing and cleaning data, instead of doing &quot;real&quot; work! This paper presents &lt;strong&gt;Data Civilizer&lt;/strong&gt;, a system to help data scientists to:

&lt;ul&gt;
&lt;li&gt;discover data sets from large number of tables&lt;/li&gt;
&lt;li&gt;link relevant data sets&lt;/li&gt;
&lt;li&gt;compute answers from the data stores that holds the discovered data&lt;/li&gt;
&lt;li&gt;clean the desired data&lt;/li&gt;
&lt;li&gt;iterate through the tasks using a workflow system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As mentioned before, the above papers were the ones of interest that I had a chance to at least skim through. There are a wealth more of papers at the &lt;a href=&quot;http://cidrdb.org/cidr2017/program.html&quot;&gt;site&lt;/a&gt;, so go an have a look. I also want do a shout-out to &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;&lt;strong&gt;the morning paper&lt;/strong&gt;&lt;/a&gt;, which - the last week - has started dissecting these papers. So if you don't have time to go through all the papers yourself, browse to &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;&lt;strong&gt;the morning paper&lt;/strong&gt;&lt;/a&gt;, and get the papers served to you!&lt;/p&gt;

&lt;p&gt;So what else have I found interesting this week:&lt;/p&gt;

&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/01/tiger-team-tips.html&quot;&gt;Microsoft R Server tips from the Tiger Team&lt;/a&gt;. Blogpost from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; with quite a few links with tips about &lt;a href=&quot;https://www.microsoft.com/en-us/cloud-platform/r-server&quot;&gt;&lt;strong&gt;Microsoft R Server&lt;/strong&gt;&lt;/a&gt;. Very useful &quot;stuff&quot;!!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/01/11/announcing-data-science-utilities-version-0-11-for-the-team-data-science-process/&quot;&gt;Announcing Data Science Utilities Version 0.11, for the Team Data Science Process&lt;/a&gt;. Microsoft has released a new version of tools and utilities for its &lt;a href=&quot;https://github.com/Azure/Microsoft-TDSP&quot;&gt;&lt;strong&gt;Team Data Science Process&lt;/strong&gt;&lt;/a&gt;. This something I will take a very close look at!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/01/microsoft-r-server-in-the-news.html&quot;&gt;Microsoft R Server in the News&lt;/a&gt;. Another blogpost from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt;, this time with links to articles in the tech press about the capabilities of &lt;a href=&quot;https://www.microsoft.com/en-us/cloud-platform/r-server&quot;&gt;&lt;strong&gt;Microsoft R Server&lt;/strong&gt;&lt;/a&gt; in production environments. Some cool stuff in there!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/apache-kafka-getting-started/&quot;&gt;Apache Kafka: Getting Started&lt;/a&gt;. &lt;a href=&quot;https://kafka.apache.org/&quot;&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/a&gt; is one of the more popular message brokers out there (it is much more than a message broker), and Kafka appears in most solutions for distributed applications. Just see above in &lt;a href=&quot;http://cidrdb.org/cidr2017/papers/p124-meehan-cidr17.pdf&quot;&gt;Data Ingestion for the Connected World&lt;/a&gt;! This post is a very good introduction how to get started with Kafka.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/kafka-reactive-streams&quot;&gt;Reactive Kafka&lt;/a&gt;. Kafka again. This time from &lt;a href=&quot;https://www.infoq.com&quot;&gt;InfoQ&lt;/a&gt;, and a presentation about how the new reactive streams interface for Kafka can be used to build robust applications in the microservices world.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlshack.com/automate-delivery-of-sql-server-production-data-environments-using-containers/&quot;&gt;Automate Delivery of SQL Server Production Data Environments Using Containers&lt;/a&gt;. Exactly as what the title says; how containers can be used in the SQL Server World. This is something that is of very much interest to us here at &lt;a href=&quot;(/derivco)&quot;&gt;&lt;strong&gt;Derivco&lt;/strong&gt;&lt;/a&gt;, seeing how many SQL Server instances we have out in the world (we have one of the biggest SQL Server installations world-wide).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 2</title>
   <link href="http://nielsberglund.com/2017/01/15/interesting-stuff-week-2/"/>
   <updated>2017-01-15T07:14:41+02:00</updated>
   <id>http://nielsberglund.com/2017/01/15/interesting-stuff---week-2</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me. Oh, and if you wonder if you have missed &lt;em&gt;Interesting Stuff - Week #1&lt;/em&gt;. seeing that this post is named &lt;em&gt;Interesting Stuff - Week #2&lt;/em&gt;, you haven't. They are numbered by calendar week number, and I started the second week of January :).&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/01/10/sql-server-r-services-why-did-we-build-it/&quot;&gt;SQL Server R Services&lt;/a&gt;. The first in a series of articles why Microsoft why they built R in SQL Server, and how it woks under the covers. I &lt;strong&gt;really&lt;/strong&gt; look forward to reading more about this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/01/stackoverflow-insights.html&quot;&gt;What can we learn from StackOverflow data?&lt;/a&gt;. A post from Revolution Analytics blog, where they discuss what insights can be had from StackOverflow data. For you who don't know, Revolution Analytics was acquired by Microsoft in 2015, and a lot of what Revolution Analytics dis are now part of Microsoft R Services, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nytimes.com/2016/12/14/magazine/the-great-ai-awakening.html&quot;&gt;The Great A.I. Awakening&lt;/a&gt;. A post from New York Times about how Google used artificial intelligence to enhance Google Translate.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.r-bloggers.com/why-do-decision-trees-work/&quot;&gt;Why do Decision Trees Work?&lt;/a&gt;. This post is very informative about how and - more importantly - decision trees work.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/01/09/apache-hadoop-yarn-yet-another-resource-negotiator/&quot;&gt;Apache Hadoop YARN: Yet another resource negotiator&lt;/a&gt;. A discussion of the requirements that drove the design of YARN and the high-level approach. This article is from &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;&lt;strong&gt;the morning paper&lt;/strong&gt;&lt;/a&gt;, where every weekday @adriancolyer dissects a white-paper from the world of Computer Science.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://principlesofchaos.org/&quot;&gt;Principles of Chaos Engineering&lt;/a&gt;. A web-site geared towards chaos engineering of distributed systems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/chaos-engineering&quot;&gt;Chaos Engineering&lt;/a&gt;. More about chaos engineering. This article is from &lt;a href=&quot;https://www.infoq.com&quot;&gt;InfoQ&lt;/a&gt;, covering how Netflix is doing chaos engineering.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/microservices-kubernetes&quot;&gt;Building a Microservices Platform with Kubernetes&lt;/a&gt;. An &lt;a href=&quot;https://www.infoq.com&quot;&gt;InfoQ&lt;/a&gt; presentation by Matthew Mark Miller where he discusses Kubernetes’ primitives and microservices patterns on top of them, including rolling deployments, stateful services and adding behaviors via sidecars.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/sql_server_team/columnstore-index-performance-sql-server-2016-multiple-aggregates/&quot;&gt;Columnstore Index Performance: SQL Server 2016 – Multiple Aggregates&lt;/a&gt;. A Microsoft blog post about performance improvements in SQL Server's &lt;strong&gt;Columnstore Index&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/bobsql/2017/01/05/sql-server-on-linux-elf-and-pe-images-just-work/&quot;&gt;SQL Server on Linux: ELF and PE Images Just Work&lt;/a&gt;. How Micrsoft managed to get SQL Server to boot on Linux.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Transactions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/01/12/the-many-faces-of-consistency/&quot;&gt;The many faces of consistency&lt;/a&gt;. Another white-paper dissection from &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;the morning paper&lt;/a&gt;. This is about consistency models and isolation levels in distributed systems.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for this week. I hope you enjoy what I put together. If you have ideas for what to cover, please comment on this post or ping me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Abort, Abort, We Are XACT_ABORT:ing, Or Are We?!</title>
   <link href="http://nielsberglund.com/2017/01/08/abort-abort-we-re-xact-aborting-or-are-we/"/>
   <updated>2017-01-08T11:41:55+02:00</updated>
   <id>http://nielsberglund.com/2017/01/08/abort-abort-we-re-xact-aborting-or-are-we</id>
   <content type="html">&lt;p&gt;&lt;code&gt;SET XACT_ABORT&lt;/code&gt; defines whether a transaction is automatically rolled back when a T-SQL statement raises a run-time exception, and when you read posts from prominent SQL bloggers you quite often see that they recommend to always have &lt;code&gt;XACT_ABORT&lt;/code&gt; set to &lt;code&gt;ON&lt;/code&gt;. From the title of this post you may get the impression that I do not necessarily agree, and to an extent you may be right. So, let us see ...&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Background&lt;/h2&gt;

&lt;p&gt;First of all; as with a post a while ago about &lt;a href=&quot;/2016/12/31/sql-server-error-handling-gotchas/&quot;&gt;&lt;strong&gt;SQL Server Error Handling Gotcha's&lt;/strong&gt;&lt;/a&gt;, this post is based on real world experiences based on the production OLTP databases we have here at &lt;a href=&quot;/derivco&quot;&gt;&lt;strong&gt;Derivco&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Derivco's main OLTP production database has around 5,000 stored procedures, where a small procedure has about 600 - 800 LOC, and a big procedure can have 3,000 - 4,000 LOC. The procedures are also quite heavily nested, where it is not uncommon to have a call chain of 10 - 15 procedures. It is not only one team working on the procedures, but multiple teams are maintaining and developing procedures.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, back to the issue at hand, and let's begin looking at why we have &lt;code&gt;XACT_ABORT&lt;/code&gt; in the first place? That has to do with transactions and SQL exceptions; remember back before SQL Server 2005 and &lt;code&gt;TRY&lt;/code&gt; &lt;code&gt;CATCH&lt;/code&gt;, an exception did not normally stop execution of a batch, even though the execution of the statement stopped. Let us look at some code for this, and let's start with creating a couple of tables with a foreign key constraint between them:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Most of the code in this post can be downloaded from &lt;a href=&quot;/downloads/code/xact_abort.zip&quot;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Table Creation&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- this database must be created before executing this&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrTestDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--this DROP IF EXISTS syntax requires SQL Server 2016&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_Order&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;CONSTRAINT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk_Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;OrderValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;OrderDetail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nvarchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;OrderDetailID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;identity&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;CONSTRAINT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;CONSTRAINT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fk_OrderDetail_OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REFERENCES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nvarchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='33' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='34' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Order 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='35' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Order 2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='36' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;350&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Order 3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='37' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Setup Code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you see, we are creating a couple of tables, and then inserts some data into the primary table &lt;code&gt;dbo.tb_Order&lt;/code&gt;. Now, if we write some code inserting data into &lt;code&gt;dbo.tb_OrderDetail&lt;/code&gt;, inside a transaction, and we cause an exception to happen - what will the result be:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Transaction With Error&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Order 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Invalid OrderID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- this should cause a fk exception&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for OrderID 3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Error&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the code we see how we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;start a transaction&lt;/li&gt;
&lt;li&gt;insert for &lt;code&gt;OrderID&lt;/code&gt; 1&lt;/li&gt;
&lt;li&gt;try to insert for &lt;code&gt;OrderID&lt;/code&gt; 5

&lt;ul&gt;
&lt;li&gt;this causes a foreign key exception&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;insert for &lt;code&gt;OrderID&lt;/code&gt; 3&lt;/li&gt;
&lt;li&gt;commit the transaction&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; from the table&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The result from executing the code is that we get an foreign key exception raised, and the &lt;code&gt;INSERT&lt;/code&gt; statement terminated as in Figure 1:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/tx_fk_exception.png&quot; width=&quot;658&quot; height=&quot;109&quot;  &gt;
&lt;strong&gt; Figure 1:&lt;/strong&gt; &lt;em&gt;Foreign Key Exception&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, when looking at the result from the &lt;code&gt;SELECT&lt;/code&gt; statement, we see how the first and third &lt;code&gt;INSERT&lt;/code&gt; succeeded:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/select_after_fk_error.png&quot; width=&quot;300&quot; height=&quot;100&quot;  &gt;
&lt;strong&gt; Figure 2:&lt;/strong&gt; &lt;em&gt;SELECT After Exception&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, as mentioned before, the exception did not affect the transaction, and anything after the exception executed as nothing had happened, plus the transaction was committed. This may not be the behavior you really wanted, e.g. you expected the transaction to roll back when an exception happened.&lt;/p&gt;

&lt;p&gt;If that's the behavior you wanted, there are a couple (actually 3) of ways to achieve it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check &lt;code&gt;@@ERROR&lt;/code&gt; after each &lt;code&gt;INSERT&lt;/code&gt;, and then &lt;code&gt;ROLLBACK&lt;/code&gt; and &lt;code&gt;RETURN&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you are in an environment using SQL Server 2005+, catch the exception with &lt;code&gt;BEGIN TRY ... END TRY&lt;/code&gt; and &lt;code&gt;BEGIN CATCH ... END CATCH&lt;/code&gt;, and do a &lt;code&gt;ROLLBACK&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;XACT_ABORT&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;XACT_ABORT&lt;/h3&gt;

&lt;p&gt;By using &lt;code&gt;XACT_ABORT&lt;/code&gt; we can ensure that the executing batch is terminated as well as any transaction being rolled back if an exception is raised, by setting &lt;code&gt;SET XACT_ABORT ON&lt;/code&gt;, and then executing your code:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Transaction Causing FK Exception with XACT ABORT ON&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--just clean up so we don't have any &quot;baggage&quot;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;TRUNCATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_ABORT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Order 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Invalid OrderID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- this should cause a fk exception&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for OrderID 3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Executing with XACT_ABORT ON&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The code looks almost like in &lt;em&gt;Code Snippet 2&lt;/em&gt;, with the addition that we switch on &lt;code&gt;XACT_ABORT&lt;/code&gt; in the beginning of the batch, oh and yes - we are also cleaning up the &lt;code&gt;dbo.tb_OrderDetail&lt;/code&gt; table with a &lt;code&gt;TRUNCATE TABLE&lt;/code&gt; command. When executing the code you almost get the same output as from &lt;em&gt;Code Snippet 2&lt;/em&gt;, except for the fact that the output message does not say anything about statement termination:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/fk_error_XACT_ABORT.png&quot; width=&quot;390&quot; height=&quot;110&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Output Message after Executing with XACT_ABORT ON&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Also, there is no &lt;em&gt;Result&lt;/em&gt; tab in the output, which indicates that the &lt;code&gt;SELECT&lt;/code&gt; statement at the end of the batch did not execute, e.g. the exception caused a batch termination, due to &lt;code&gt;XACT_ABORT&lt;/code&gt;being &lt;code&gt;ON&lt;/code&gt;. So what about the transaction, remember that before we switched &lt;code&gt;XACT_ABORT&lt;/code&gt; &lt;code&gt;ON&lt;/code&gt;, the first and second &lt;code&gt;INSERT&lt;/code&gt; statement succeeded. We can safely assume that in this example the third &lt;code&gt;INSERT&lt;/code&gt; did not succeed, as the batch was terminated, but what about the first? Well, let's see; go ahead and execute the &lt;code&gt;SELECT * FROM dbo.tb_OrderDetail&lt;/code&gt; and see what the result is. You should get something like in Figure 4:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/SELECT_XACT_ABORT.png&quot; width=&quot;250&quot; height=&quot;70&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Result After XACT_ABORT&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No rows coming back, &lt;code&gt;XACT_ABORT&lt;/code&gt; rolled back the transaction as well as terminating the batch! That is fairly cool! What about something - somewhat (not much) - more realistic than just a batch execution; like &lt;code&gt;XACT_ABORT&lt;/code&gt; and stored procedures. Below in &lt;em&gt;Code Snippet 4&lt;/em&gt;, is code to create three stored procedures. The top level procedure (&lt;code&gt;dbo.pr_1&lt;/code&gt;) switches &lt;code&gt;XACT_ABORT&lt;/code&gt; and then goes on to start a transaction, do an insert and call &lt;code&gt;dbo.pr_2&lt;/code&gt;, which in turns calls &lt;code&gt;dbo.pr_3&lt;/code&gt;. The last procedure - &lt;code&gt;dbo.pr_3&lt;/code&gt; - generates a foreign key exception:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The transaction handling in all the procs, in all examples, is very much simplified, whereby the procs being called by the top-level proc is not doing anything with transactions, as the transaction should only be committed/rolled back by the proc that started the transaction. See my &lt;a href=&quot;/2011/09/11/transactions-in-sql-server-take-2956/&quot;&gt;blog post&lt;/a&gt; from a couple of years ago about &lt;em&gt;proper&lt;/em&gt; transaction handling.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Stored Procedures&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- proc 1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_ABORT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Order 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--proc 2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for OrderID 3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- proc 3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='33' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='34' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='35' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='36' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='37' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Invalid OrderID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- this should cause a fk exception&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='38' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;Procedures with XACT_ABORT&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If you are copying and pasting the code above, make sure you create the procs in opposite order to what is in the Code Snippet.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let's see what happens when we execute &lt;code&gt;dbo.pr_1&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Proc Execution&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- code for cleanup&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- TRUNCATE TABLE dbo.tb_OrderDetail&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- execute this SELECT after you have executed the proc above&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- SELECT * FROM dbo.tb_OrderDetail&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;Execution of the Procedures&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The result is exactly the same as when we executed the code in &lt;em&gt;Code Snippet 3&lt;/em&gt;. So, even when we execute multiple procedures under the same &lt;strong&gt;SPID&lt;/strong&gt;, the &lt;code&gt;XACT_ABORT&lt;/code&gt; ensures that the batch (call chain) is terminated and the transaction rolls back!&lt;/p&gt;

&lt;p&gt;How cool is that, what is there not to like about automatic transaction rollback when an exception happens!&lt;/p&gt;

&lt;h2&gt;What Could Possibly Go Wrong?!&lt;/h2&gt;

&lt;p&gt;Right let's have a look at a couple of scenarios where &lt;code&gt;XACT_ABORT&lt;/code&gt; may not be the answer to your prayers.&lt;/p&gt;

&lt;h3&gt;IF(@@ERROR&amp;lt;&gt;0)&lt;/h3&gt;

&lt;p&gt;We'll start where we are in a situation where we still are doing SQL Server error-handling the old way, by checking &lt;code&gt;@@ERROR&lt;/code&gt; after execution of statements. This could be a scenario where we have quite a few old procedures, which have not been update to &lt;code&gt;TRY ... CATCH&lt;/code&gt; yet. The procedures look like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Old Style Error Handling&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--proc 1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Order 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: We are handling an error, cleaning up, and rolling back'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Here we are doing something which
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      relies on the execution of dbo.pr_2 being successful'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--proc 2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for OrderID 3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='33' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='34' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='35' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='36' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='37' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_2: We are handling an error, cleaning up, and raising'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='38' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dbo.pr_2: Error executing dbo.pr_3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='39' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='40' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='41' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='42' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='43' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--proc 3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='44' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='45' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='46' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='47' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='48' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='49' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='50' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Invalid OrderID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- this should cause a fk exception&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='51' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='52' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='53' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_3: We are handling an error, cleaning up, and raising'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='54' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dbo.pr_3: Error in dbo.pr_3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='55' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='56' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='57' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 6:&lt;/strong&gt; &lt;em&gt;Procedures with Old Style Error Handling&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;They do not look much different than the procedures in my &lt;a href=&quot;/2016/12/31/sql-server-error-handling-gotchas/&quot;&gt;blog post&lt;/a&gt; a while ago about &quot;gotcha's&quot; in error handling. The procedures are being &quot;good citizens&quot;, and check for errors after executing something that could go wrong, and if there is an error, they re-wind, clean up, and raise the exception up the call-chain. When executing &lt;code&gt;dbo.pr_1&lt;/code&gt;, as in &lt;em&gt;Code Snippet 5&lt;/em&gt;, you would see something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/exec_proc_old_error_handling.png&quot; width=&quot;580&quot; height=&quot;250&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Executing Procs Old Style Error Handling&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We see how the exception happens and then how each proc is handling the exception, cleaning up, and re-raising. When &lt;code&gt;dbo.pr_1&lt;/code&gt; receives the error, it also rolls back the transaction. If everythig had executed successfully, the &lt;code&gt;dbo.pr_1&lt;/code&gt; proc would have gone on executing code after the error-handling block. In this case we can see it did not do that. Then, when executing the &lt;code&gt;SELECT&lt;/code&gt; statement, no results are coming back - as everything has been rolled back.&lt;/p&gt;

&lt;p&gt;What would happen if the &lt;code&gt;dbo.pr_1&lt;/code&gt; proc were to be modified to use &lt;code&gt;XACT_ABORT&lt;/code&gt;? Let's say a developer has heard about &lt;code&gt;XACT_ABORT&lt;/code&gt;, and think it sounds cool, so while he is doing other changes to the proc, he also changes it to use &lt;code&gt;XACT_ABORT&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Proc Edited to Use XACT_ABORT&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_ABORT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Order 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- we have taken out the rollback as XACT_ABORT is ON&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- however we still need to cleanup&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: We are handling an error, cleaning up'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Here we are doing something which
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      relies on everything being successful'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 7:&lt;/strong&gt; &lt;em&gt;dbo.pr_1 Using XACT_ABORT&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not much have changed, the developer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;added &lt;code&gt;SET XACT_ABORT ON&lt;/code&gt; before the &lt;code&gt;BEGIN TRANSACTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;took out the &lt;code&gt;ROLLBACK&lt;/code&gt; in the error-handling block (as &lt;code&gt;XACT_ABORT&lt;/code&gt; is used)

&lt;ul&gt;
&lt;li&gt;we still need to do cleanup in there though&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What is the result now when executing &lt;code&gt;dbo.pr_1&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/exec_proc_XACT_ABORT.png&quot; width=&quot;550&quot; height=&quot;105&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;Executing Procs Using XACT_ABORT&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Whoa, no clean-up, rewinds, anything! I guess that should be expected seeing that &lt;code&gt;XACT_ABORT&lt;/code&gt; terminates the batch, and rolls back the transaction. However this is one of the reasons I do not like &lt;code&gt;XACT_ABORT&lt;/code&gt;: you have no control over what happens when an error occur!&lt;/p&gt;

&lt;h3&gt;RAISERROR&lt;/h3&gt;

&lt;p&gt;So far the errors we have seen are errors from T-SQL statements, what if we were to raise an exception through &lt;code&gt;RAISERROR&lt;/code&gt;? The answer to that is that &lt;code&gt;RAISERROR&lt;/code&gt; will not cause &lt;code&gt;XACT_ABORT&lt;/code&gt; to trigger! This means we can be in a very messed up state transaction wise. So if we use &lt;code&gt;XACT_ABORT&lt;/code&gt; we need to be very careful how we handle exceptions, and we cannot solely rely on it to automatically do a &lt;code&gt;ROLLBACK&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Using &lt;code&gt;THROW&lt;/code&gt; would cause &lt;code&gt;XACT_ABORT&lt;/code&gt; to work as intended, however that would require SQL Server 2012, and &lt;code&gt;THROW&lt;/code&gt; in itself adds its own issues. See my &lt;a href=&quot;/2016/12/31/sql-server-error-handling-gotchas/&quot;&gt;blog post&lt;/a&gt; for more around that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;TRY ... CATCH&lt;/h3&gt;

&lt;p&gt;What happens if we are in a &lt;code&gt;TRY ... CATCH&lt;/code&gt; situation; e.g. using somewhere in the call-chain the exception handling capabilities introduced in SQL Server 2005?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;See my &lt;a href=&quot;/2016/12/31/sql-server-error-handling-gotchas/&quot;&gt;blog post&lt;/a&gt; about what issues you can run into with mixing and matching error-handling styles.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So let us edit &lt;code&gt;dbo.pr_3&lt;/code&gt; to do &quot;new&quot; error-handling, and let the other procs stay the same:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Proc with TRY ... CATCH&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Invalid OrderID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- this should cause a fk exception&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_3: We are handling an error, cleaning up, and raising'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dbo.pr_3: Error in dbo.pr_3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 8:&lt;/strong&gt; &lt;em&gt;TRY ... CATCH in dbo.pr_3&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here it is the last proc in the call-chain that are using &lt;code&gt;TRY ... CATCH&lt;/code&gt;, and as it is doing proper exception handling it knows that it did not start the transaction, so in the error handling code it just raises the error. The result is the following:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/XACT_ABORT_TRY_CATCH.png&quot; width=&quot;585&quot; height=&quot;240&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; &lt;em&gt;XACT_ABORT and TRY ... CATCH&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ooops, we really are in a messed up state. I guess that is to be expected seeing what we discovered above regarding &lt;code&gt;RAISERROR&lt;/code&gt;. Once again, we need to be very careful what we do when we use &lt;code&gt;XACT_ABORT&lt;/code&gt;. Oh, and what would the result be if we only changed &lt;code&gt;dbo.pr_1&lt;/code&gt; to use &lt;code&gt;TRY ... CATCH&lt;/code&gt;, e.g roll back the change in &lt;code&gt;dbo.pr_3&lt;/code&gt;, and add the &quot;new&quot; style exception handling in &lt;code&gt;dbo.pr_1&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Top Level Proc with XACT_ABORT and TRY ... CATCH&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PROCEDURE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_ABORT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_OrderDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrderID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeDetail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Details for Order 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Here we are doing something which
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      relies on the execution of dbo.pr_2 being successful'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: We are handling an error, cleaning up'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 8:&lt;/strong&gt; &lt;em&gt;TRY ... CATCH in dbo.pr_1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice that we in the &lt;code&gt;CATCH&lt;/code&gt; block we are not doing rolling back the transaction as we rely on &lt;code&gt;XACT_ABORT&lt;/code&gt; to handle that. When executing the result is:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/top_level_try_catch.png&quot; width=&quot;570&quot; height=&quot;160&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;Top Level TRY ... CATCH and XACT_ABORT&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the result we see how we immediately ended up in the &lt;code&gt;TRY ... CATCH&lt;/code&gt; block in &lt;code&gt;dbo.pr_1&lt;/code&gt;! This indicates that &lt;code&gt;TRY ... CATCH&lt;/code&gt; &lt;em&gt;overrides&lt;/em&gt; &lt;code&gt;XACT_ABORT&lt;/code&gt;! In reality there is no use having &lt;code&gt;XACT_ABORT&lt;/code&gt; and &lt;code&gt;TRY ... CATCH&lt;/code&gt; in the same proc!&lt;/p&gt;

&lt;p&gt;In fact, I would argue that when we have &lt;code&gt;TRY ... CATCH&lt;/code&gt; we don't need &lt;code&gt;XACT_ABORT&lt;/code&gt;, as we can decide what to do with the transaction in the &lt;code&gt;CATCH&lt;/code&gt; block!&lt;/p&gt;

&lt;p&gt;We have now seen quite a few examples where &lt;code&gt;XACT_ABORT&lt;/code&gt; may not be ideal. My biggest &quot;gripe&quot; with &lt;code&gt;XACT_ABORT&lt;/code&gt; is not any of those...&lt;/p&gt;

&lt;h3&gt;All Errors are Equal, Some are More Equal then Others&lt;/h3&gt;

&lt;p&gt;I am paraphrasing George Orwell above, and that phrase summarizes why I do not like &lt;code&gt;XACT_ABORT&lt;/code&gt;. Let me explain...&lt;/p&gt;

&lt;p&gt;If we go back to what the code looked like at &lt;em&gt;Code Snippet 6&lt;/em&gt;. We had three procs which did proper error handling and all was good. Let us assume these procs were some procs for a financial institution where they were called for deposits. We then realized that we needed some code that did something that were not vital for the actual deposit process, but we still needed it to execute together with the other procs (this may be logging, etc). So we introduce a new proc (call it &lt;code&gt;dbo.pr_Logging&lt;/code&gt;) into the call chain, and in that proc we make sure we handle any errors, because we do not want to affect the deposit process. We handle the errors in the &quot;old&quot; way, as we do not want to mix &quot;old&quot; and &quot;new&quot;. All is well and good!&lt;/p&gt;

&lt;p&gt;However, we now come to the same scenario we saw in &lt;em&gt;Code Snippet 7&lt;/em&gt;; the developer who had heard about &lt;code&gt;XACT_ABORT&lt;/code&gt;. So the developer introduces the &lt;code&gt;XACT_ABORT&lt;/code&gt; as in &lt;em&gt;Code Snippet 7&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What happens now if an exception happens in &lt;code&gt;dbo.pr_Logging&lt;/code&gt;? The batch is terminated and the transaction is rolled back. So a non-vital error is now causing the transaction (the deposit) to fail! Ouch!!!!&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;I am against &lt;code&gt;XACT_ABORT&lt;/code&gt; because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You are losing control of what to do when an exception happens&lt;/li&gt;
&lt;li&gt;It does not play well with &lt;code&gt;TRY ... CATCH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-vital exceptions causes the whole transaction to roll back!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;/downloads/code/xact_abort.zip&quot;&gt;Download the demo code from here&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SQL Server Error Handling Gotchas</title>
   <link href="http://nielsberglund.com/2016/12/31/sql-server-error-handling-gotchas/"/>
   <updated>2016-12-31T06:41:55+02:00</updated>
   <id>http://nielsberglund.com/2016/12/31/sql-server-error-handling-gotchas</id>
   <content type="html">&lt;p&gt;Way back when (in 2010 as a matter of fact), I wrote a couple of blog-posts (&lt;a href=&quot;/2010/11/10/new-t-sql-features-in-sql-11-denali-error-handling/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;/2010/11/12/more-t-sql-error-functionality-in-denali-sql-11/&quot;&gt;here&lt;/a&gt;) about error handling in the new CTP  releases of SQL Server Denali. Denali was what would become SQL Server 2012.&lt;/p&gt;

&lt;p&gt;The new functionality built upon what was introduced in SQL Server 2005 - the notion of structured exception handling through &lt;code&gt;BEGIN TRY END TRY&lt;/code&gt; followed by &lt;code&gt;BEGIN CATCH END CATCH&lt;/code&gt;. In those blog-posts I was fairly positive, and saw the new functionality as something useful and very well worth implementing. I am still positive, however since then I have used the new functionality introduced in SQL Server 2005 extensively in production and have come across some gotchas that I thought would be worth writing a blog-post about.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Background&lt;/h2&gt;

&lt;p&gt;Before SQL Server 2005 was introduced, and with that structured exception handling as mentioned above, the way we handled error conditions in SQL Server was to write something like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;SQL Server Error Handling Pre SQL Server 2005&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;-- do something where you need to check error condition&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_SomeTable&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--something may go wrong here&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(....)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- @err has been declared previously&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- code to handle the error, cleanup, etc.&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- re-raise to let calling procs know something has gone wrong&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Some descriptive message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Old Style Error Handling&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In your stored procedures, you had to insert code like above after each statement where you wanted to check for errors. Part of the error-handling code quite often would be some logging/auditing and general rewind/cleanup. Typically you would also re-raise the error so that calling procs would be made aware that something has happened, and in the calling procs you would have similar logic to catch the errors being raised.&lt;/p&gt;

&lt;p&gt;All in all, quite a lot of code to write. At &lt;a href=&quot;/derivco&quot;&gt;&lt;strong&gt;Derivco&lt;/strong&gt;&lt;/a&gt; we have a lot of stored procedures, and they can be fairly big (3000 - 4000 loc), so you can imagine the number of error checks we have in them.&lt;/p&gt;

&lt;h3&gt;TRY CATCH&lt;/h3&gt;

&lt;p&gt;Writing the above mentioned error-handling code feels quite arcane if you compare what you would do in other programming languages. So in SQL Server 2005 &lt;strong&gt;Microsoft&lt;/strong&gt; introduced the notion of structured exception handling as I mentioned above, and it was implemented through &lt;code&gt;BEGIN TRY ... END TRY&lt;/code&gt; and &lt;code&gt;BEGIN CATCH ... END CATCH&lt;/code&gt; blocks. As with other programming languages you can have one or more TRY ... CATCH blocks, and when an error happens inside the TRY block, the code in the CATCH block is immediately hit.&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;SQL Server 2005 TRY CATCH&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--lots and lots of code&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tb_SomeTable&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--something may go wrong here&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(....)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--more code&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- we indicate all is good&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- code to handle the error, cleanup, etc.&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- re-raise to let calling procs know something has gone wrong&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Some descriptive message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Error Handling with TRY ... CATCH&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When the &lt;code&gt;BEGIN TRY ... END TRY&lt;/code&gt; block together with &lt;code&gt;BEGIN CATCH ... END CATCH&lt;/code&gt; executes, it creates a special error context, so that any errors happening will be caught by the closest CATCH block. In other words, errors &quot;bubble&quot; up to the closest CATCH block, &lt;em&gt;within&lt;/em&gt; the same &lt;strong&gt;SPID&lt;/strong&gt;. Keep this in mind, as it is important when we discuss some of the &quot;gotcha's&quot;.&lt;/p&gt;

&lt;h3&gt;THROW&lt;/h3&gt;

&lt;p&gt;Ad good as the new error-handling functionality was in SQL Server 2005, there were still some pieces missing when comparing t-sql with other languages error-handling. One big glaring missing piece was how to re-throw a caught exception. What you typically would do if you wanted to re-throw was to capture the error text, either from &lt;code&gt;sys.messages&lt;/code&gt; pre SQL Server 2005, or from &lt;code&gt;ERROR_MESSAGE()&lt;/code&gt; in SQL SERVER 2005+, and in both cases then use the captured text in &lt;code&gt;RAISERROR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note about &lt;code&gt;RAISERROR&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It allows you to throw an error based on either an error number or a message, and you can define the severity level and state of that error.&lt;/li&gt;
&lt;li&gt;If you call &lt;code&gt;RAISERROR&lt;/code&gt; with an error number, that error number has to exist in sys.messages.&lt;/li&gt;
&lt;li&gt;You can use error numbers between 13001 and 2147483647 (it cannot be 50000) with &lt;code&gt;RAISERROR&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;code&gt;RAISERROR&lt;/code&gt; has been around &quot;forever&quot;, and for SQL Server 2012 Microsoft introduced &lt;strong&gt;&lt;code&gt;THROW&lt;/code&gt;&lt;/strong&gt; as new function to be used when raising exceptions. Some of the features of &lt;code&gt;THROW&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;THROW&lt;/code&gt; can be used to re-throw an exception.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;THROW&lt;/code&gt; you can throw a specific error number together with an accompanying message.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Code snippet 3 below shows an example of this:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;TRY CATCH with THROW&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--some  code&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--here we are doing a check of something&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--and realizes that something is wrong&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ooops'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--we will never get here  &lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- code to handle the error, cleanup, etc.&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- re-raise by using THROW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Error Handling with THROW and TRY ... CATCH&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you have managed to stay awake until now, you probably wonder where is the problem with all this, this looks pretty sweet, or as we use to say in the team I work for in &lt;a href=&quot;/derivco&quot;&gt;Derivco&lt;/a&gt;; &quot;What could possibly go wrong?&quot;! Whenever we say that, it seems that quite a few things can go wrong :) and the same thing holds true here, as we will see!&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;The problem comes in when you are mixing &quot;old&quot; (pre 2005), with &quot;new&quot; (2005+) error handling. You may ask: &quot;why would you ever want to do that, why not use only the new cool features?&quot;. In fact that's what I asked when I visited Derivco back in 2009 and taught a &lt;a href=&quot;http://www.develop.com/uk&quot;&gt;&lt;strong&gt;Developmentor&lt;/strong&gt;&lt;/a&gt; SQL Server course for the team I eventually would work for. Boy was that a stupid question!&lt;/p&gt;

&lt;p&gt;The answer - in Derivco's' case - is &lt;em&gt;complexity&lt;/em&gt;. In our main OLTP production database we now have ~5,000 stored procedures, and the call stacks can nest 10 - 15 procedures deep. In addition, our procedures are not simple &lt;em&gt;CRUD&lt;/em&gt;, but we do have &lt;strong&gt;LOADS&lt;/strong&gt; of business logic in them. So you cherry-pick what procs to edit, most likely some you are changing anyway, and all new procs are written using the new error-handling. What could possibly go wrong with this approach?!&lt;/p&gt;

&lt;p&gt;Well, chances are that the new/edited procs are part of a call chain, and not necessarily the last proc in the chain. This is now the situation where issues can happen. Let's look at this a bit closer. In the &lt;a href=&quot;/downloads/code/errorhandling.zip&quot;&gt;demo code&lt;/a&gt; for this post, we have initially four procedures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dbo.pr_Caller&lt;/code&gt; which calls into&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dbo.pr_1&lt;/code&gt; which calls into&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dbo.pr_2&lt;/code&gt; which calls into&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dbo.pr_3&lt;/code&gt; which is the last proc in the chain.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The three first procs pr_Caller, pr_1 and pr_2 looks almost identical, and I let &lt;code&gt;dbo.pr_Caller&lt;/code&gt; be the &quot;showcase&quot;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Example of the Three First Procs&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_Caller&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--do some stuff&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--then call into dbo.pr_1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_Caller: We are now about to execute dbo.pr_1'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--clean up and log etc.&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_Caller: We are cleaning up, rewinding, blah, blah'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dbo.pr_Caller: Something went wrong when calling dbo.pr_1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--end dbo.pr_Caller&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; Code Snippet 4:&lt;/strong&gt; &lt;em&gt;Example of Calling Proc&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The last proc in the chain - &lt;code&gt;dbo.pr_3&lt;/code&gt; - is somewhat different in that it generates an error:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;The Proc that Generates the Error&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_3: We are now about to do a division 0 error'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--clean up and log etc.&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_3: We are cleaning up, rewinding, blah, blah'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dbo.pr_3: Something went wrong in dbo.pr_3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--end dbo.pr_3&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; Code Snippet 5:&lt;/strong&gt; &lt;em&gt;Error Proc&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you look at the procs you can see that they all use the old style error handling, and are doing clean-ups etc in the &lt;code&gt;IF(@err &amp;lt;&amp;gt; 0)&lt;/code&gt; block. If you execute the calling proc: &lt;code&gt;EXEC dbo.pr_Caller&lt;/code&gt;, the result in the Message tab in SQL Server Management Studio (SSMS) would look something like:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_error_1.png&quot; width=&quot;500&quot; height=&quot;215&quot;  &gt;
&lt;strong&gt; Figure 1:&lt;/strong&gt; &lt;em&gt;Output from Error Procs&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the figure above we can see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we are calling into each proc: &lt;em&gt;We are now about to execute&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;the division by 0 error happens: &lt;em&gt;Divide by zero error encountered&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;each proc in the call chain cleaning up, etc.: &lt;em&gt;We are cleaning up ...&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is good (well not good that we are getting an error), but we are handling it and cleaning up after ourselves. We may perhaps write the errors to some logging tables, so that we in case of un-expected behavior can trace and see what has happened.&lt;/p&gt;

&lt;p&gt;Let us now assume that we need to change &lt;code&gt;dbo.pr_1&lt;/code&gt;, to add some new functionality, whatever. This is now a good time to alter this old proc to use the new &quot;cool&quot; error-handling:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;New Error Handling in dbo_pr1&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--add the new &quot;cool&quot; errorhandling&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--do some stuff&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--do some other stuff&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--then call into dbo.pr_2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: We are now about to execute dbo.pr_2'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--clean up and log etc.&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: We are cleaning up, rewinding, blah, blah'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: Something went wrong when calling dbo.pr_2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--end dbo.pr_1&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; Code Snippet 6:&lt;/strong&gt; &lt;em&gt;Edited Proc&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No problem with the changes, however when you execute you get following result:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_error_2.png&quot; width=&quot;500&quot; height=&quot;175&quot;  &gt;
&lt;strong&gt; Figure 2:&lt;/strong&gt; &lt;em&gt;Output from Altered Error Procs&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Where is the cleanup in &lt;code&gt;dbo.pr_2&lt;/code&gt; and &lt;code&gt;dbo.pr_3&lt;/code&gt;, as an error clearly has happened as something was caught in &lt;code&gt;dbo.pr_1&lt;/code&gt;? Oh, and what happened with the error-handling in &lt;code&gt;dbo.pr_Caller&lt;/code&gt;, we did raise an error in &lt;code&gt;dbo.pr_1&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The last question is the easiest to answer, and fix; if you want old style error-handling to be able to catch an error raised from within a CATCH block, the &lt;code&gt;RAISERROR&lt;/code&gt; &lt;strong&gt;MUST&lt;/strong&gt; be followed by a &lt;code&gt;RETURN&lt;/code&gt;, and it has to be a &lt;code&gt;RETURN&lt;/code&gt; with no variables! So change the CATCH block in &lt;code&gt;dbo.pr_1&lt;/code&gt; to:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Edited Catch Block&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--clean up and log etc.&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: We are cleaning up, rewinding, blah, blah'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: Something went wrong when calling dbo.pr_2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- this will ensure the old-style error handling will be able&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;         &lt;span class=&quot;c1&quot;&gt;-- to catch the raised exception&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--end dbo.pr_1&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; Code Snippet 7:&lt;/strong&gt; &lt;em&gt;Use RETURN After Raising an Exception&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you after the above change were to &lt;code&gt;EXEC dbo.pr_Caller&lt;/code&gt; you would see how pr_Caller would handle the error raised in pr_1 as well. The first issue which arguably is more severe is easy to answer; it has to do with that &quot;error context&quot; mentioned in the beginning.&lt;/p&gt;

&lt;h3&gt;Error Context (a.k.a &quot;Go Straight to CATCH Without Passing IF(@@ERROR&quot;)&lt;/h3&gt;

&lt;p&gt;As I mentioned in the beginning, when a stored procedure is executed, and during the execution it comes across &lt;code&gt;BEGIN TRY&lt;/code&gt; block(s), a special execution context(s) is created from the point of the first &lt;code&gt;BEGIN TRY&lt;/code&gt; . This context &quot;wraps&quot; all code from that point on, and ensures that if an error happens, the execution will stop and the closest &lt;code&gt;BEGIN CATCH&lt;/code&gt; block will be hit. That is the reason why the cleanup code in neither &lt;code&gt;dbo.pr_3&lt;/code&gt; nor &lt;code&gt;dbo.pr_2&lt;/code&gt; was executed.&lt;/p&gt;

&lt;p&gt;The answer was easy, but the fix is neither easy nor straightforward. The only way (I am aware of) is that if you edit/create a new proc using the new way of handling errors, you need to ensure that the whole call-stack from that way onward is also using the new way.&lt;/p&gt;

&lt;h3&gt;THROW&lt;/h3&gt;

&lt;p&gt;Finally (pun intended), let's discuss &lt;code&gt;THROW&lt;/code&gt;, as so far we have not seen any traces of it in the code. Let us edit &lt;code&gt;dbo.pr_3&lt;/code&gt; to use new error handling as well as using &lt;code&gt;THROW&lt;/code&gt; to re-throw an exception:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Using THROW in dbo.pr_3&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--we are now modern&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_3: We are now about to do a division 0 error'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--clean up and log etc.&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_3: We are cleaning up, rewinding, blah, blah, and let&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;s THROW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--end dbo.pr_3&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;At the same time in the error handling code of &lt;code&gt;dbo_pr1&lt;/code&gt;, let's select out the error message as well as error number, right before we raise the exception: &lt;code&gt;SELECT ERROR_MESSAGE() AS Msg, ERROR_NUMBER() AS ErrNo&lt;/code&gt;, and then &lt;code&gt;EXEC dbo.pr_Caller&lt;/code&gt;. All should be as before, and in the Results tab in SSMS you should see:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_error_3.png&quot; width=&quot;500&quot; height=&quot;100&quot;  &gt;
&lt;strong&gt; Figure 2:&lt;/strong&gt; &lt;em&gt;Correct Error Number and Message&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By receiving 8134 as error number we can see that &lt;code&gt;THROW&lt;/code&gt; actually does what it is supposed to. However what happens if we were to edit &lt;code&gt;dbo.pr_1&lt;/code&gt; to also &lt;code&gt;THROW&lt;/code&gt;, seeing that &lt;code&gt;dbo.pr_Caller&lt;/code&gt; is still doing old style error handling:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--add the new &quot;cool&quot; errorhandling&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--do some stuff&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--do some other stuff&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--then call into dbo.pr_2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: We are now about to execute dbo.pr_2'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pr_2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--clean up and log etc.&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERROR_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERROR_NUMBER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dbo.pr_1: We are cleaning up, rewinding, blah, blah, and THROWING'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--end dbo.pr_1&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Execute the pr_Caller, and notice the output: there is nothing there from dbo.pr_Caller. If &lt;code&gt;THROW&lt;/code&gt; is used down in the call chain somewhere, there has to be a calling proc using the new error handling!&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;So in summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TRY CATCH blocks ARE good!&lt;/li&gt;
&lt;li&gt;However, be careful when mixing new TRY CATCH with &quot;old&quot; @@ERROR&lt;/li&gt;
&lt;li&gt;You need to ensure all nested procedures called inside the TRY block is also using TRY CATCH.&lt;/li&gt;
&lt;li&gt;If raising an error in a CATCH block, ALWAYS follow the RAISERROR with a RETURN (no value).&lt;/li&gt;
&lt;li&gt;Unless you can guarantee that your code will always use TRY CATCH, stay away from THROW.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;/downloads/code/errorhandling.zip&quot;&gt;Download the demo code from here&lt;/a&gt;!!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Testing, Testing, Anyone Out There?</title>
   <link href="http://nielsberglund.com/2016/12/28/testing-testing-anyone-out-there/"/>
   <updated>2016-12-28T14:18:58+02:00</updated>
   <id>http://nielsberglund.com/2016/12/28/testing-testing-anyone-out-there</id>
   <content type="html">&lt;p&gt;What can I say, I am crap at this &quot;blogging&quot; thing! Three years ago, I &lt;a href=&quot;/2013/10/02/moving-to-a-new-blog-engine/&quot;&gt;resuscitated my blog&lt;/a&gt;, after a hiatus of one year. I also switched blog engine from WordPress to &lt;a href=&quot;http://octopress.org&quot;&gt;&lt;strong&gt;OctoPress&lt;/strong&gt;&lt;/a&gt; (which at that stage was version 2). At the time of the switch, I had had a one year hiatus of blogging (I am not a very prolific blog writer :)), and I remember I was very tempted to write in that &lt;a href=&quot;/2013/10/02/moving-to-a-new-blog-engine/&quot;&gt;post&lt;/a&gt;, that if I cannot keep up blogging I will quit. Boy, am I glad I did not write that!&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;So here we are, three years later (what are a couple of months between friends), and I am about to write blog posts again. This time I have not switched blog engine - but I have upgraded from Octopress 2 to &lt;a href=&quot;https://github.com/octopress/octopress&quot;&gt;3.0&lt;/a&gt;. So why am I doing this? The easiest answer to that would be that &quot;I have no effing idea why, other than that I must be a masochist&quot;, however there are a couple of other reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/slavao/&quot;&gt;Slava Oks&lt;/a&gt; - for you young &quot;whipper snappers&quot; out there; he was Mr. SQLOS and Mr. SQLCLR back in the day of SQL Server 2005 - what he didn't know about SQLOS was not / is not worth knowing. He has recently come back after a &lt;a href=&quot;https://blogs.msdn.microsoft.com/slavao/2016/12/20/one-two-three-boom/&quot;&gt;10 year blogging hiatus&lt;/a&gt;, so if he can ...&lt;/li&gt;
&lt;li&gt;I still like &quot;putting pen to paper&quot;, and write about things I enjoy.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Right, so that's it! Let us see what happens going forward!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SQL Saturday Presentations</title>
   <link href="http://nielsberglund.com/2013/10/29/sql-saturday-presentations/"/>
   <updated>2013-10-29T20:13:56+02:00</updated>
   <id>http://nielsberglund.com/2013/10/29/sql-saturday-presentations</id>
   <content type="html">&lt;p&gt;The two first weekends in August I were in Cape Town and Johannesburg respectively presenting at &lt;strong&gt;SQL Saturday&lt;/strong&gt; events. I had a great time, and the audience were terrific. My employer &lt;a href=&quot;/derivco&quot;&gt;&lt;strong&gt;Derivco&lt;/strong&gt;&lt;/a&gt; graciously gave me some &quot;swag&quot; to hand out, and that went down a treat. Thanks Derivco!!&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;After the events some people have emailed me and asked for the presentations, so I thought I'd upload them to &lt;a href=&quot;http://www.slideshare.net/nielsb_11/&quot;&gt;&lt;strong&gt;SlideShare&lt;/strong&gt;&lt;/a&gt;, so anyone that are interested can get to them. Seeing that I recently switched to a new &lt;a href=&quot;/2013/10/02/moving-to-a-new-blog-engine/&quot;&gt;blog platform&lt;/a&gt;, &lt;a href=&quot;http://octopress.org/&quot;&gt;&lt;strong&gt;Octopress&lt;/strong&gt;&lt;/a&gt;, and I a couple of days ago came across a &lt;strong&gt;SlideShare&lt;/strong&gt; plugin for Octopress - I decided to test it out by posting the presentations here on my blog.&lt;/p&gt;

&lt;p&gt;The two presentations I did were based about the &quot;weird/wonderful (or not so wonderful)&quot; things we have experienced at Derivco in our live production environments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SQL Real World Error Handling&lt;/strong&gt; - Gotcha's when doing error-handling in SQL Server&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message Queues in SQL Server&lt;/strong&gt; - Enhance performance by using queues in SQL Server&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Real World Error Handling&lt;/h2&gt;

&lt;p&gt;This presentation talks about strange scenarios that can catch unaware developers out when mixing the new way of handling errors introduced in SQL Server 2005, with what we used to do before:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;New Style SQL Server Error Handling&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- do some stuff that may cause an error&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--handle error, and perhaps re-raise&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Old Style SQL Server Error Handling&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Some_Proc&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--do error &quot;stuff&quot;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The actual presentation:&lt;/p&gt;

&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/27662106 &quot; width=&quot;595&quot; height=&quot;446&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Message Queues in SQL Server&lt;/h2&gt;

&lt;p&gt;Here I discussed the findings from research at Derivco about the most efficient implementations of queues inside SQL Server.&lt;/p&gt;

&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/27662272 &quot; width=&quot;595&quot; height=&quot;446&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;If anyone are interested in discussing this more, please post a comment.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing Octopress on Windows</title>
   <link href="http://nielsberglund.com/2013/10/23/install-octopress-on-windows/"/>
   <updated>2013-10-23T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2013/10/23/install-octopress-on-windows</id>
   <content type="html">&lt;p&gt;In an earlier &lt;a href=&quot;/2013/10/02/moving-to-a-new-blog-engine/&quot;&gt;post&lt;/a&gt;, I wrote how I had changed blog-engine from WordPress to &lt;a href=&quot;http://octopress.org/&quot;&gt;&lt;strong&gt;OctoPress&lt;/strong&gt;&lt;/a&gt;. At the moment I am running Windows as my main OS (mostly due to work related requirements), and - as OctoPress is very much Ruby and Python based - there are certain things to be aware of when installing this on Windows. Furthermore, my blog is now hosted on &lt;strong&gt;Windows Azure&lt;/strong&gt; - so, with all this in mind, I thought I'd put together a blog post about the set-up of OctoPress on Windows, running on Windows Azure.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Pre-Reqs&lt;/h2&gt;

&lt;p&gt;Before you begin the installation there are some pre-req's:&lt;/p&gt;

&lt;h3&gt;Git and GitHub&lt;/h3&gt;

&lt;p&gt;Octopress is a developers blog engine, and central to everything Octopress is &lt;strong&gt;Git&lt;/strong&gt;. Make sure you have the latest version of &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; for Windows installed. You also need a &lt;strong&gt;GitHub&lt;/strong&gt; account, so if you don't have a GitHub account, you should &lt;a href=&quot;https://github.com/&quot;&gt;sign up&lt;/a&gt; for one. While you probably will do most of the Octopress Git and GitHub related tasks from command-line, it will not hurt to have the &lt;a href=&quot;http://windows.github.com/&quot;&gt;GitHub for Windows UI application&lt;/a&gt; installed as well.&lt;/p&gt;

&lt;h3&gt;Ruby&lt;/h3&gt;

&lt;p&gt;Octopress is built on Ruby, and when you eventually create blog-posts you will execute Ruby commands, so you need to install &lt;a href=&quot;http://rubyinstaller.org/&quot;&gt;Ruby&lt;/a&gt; and the Ruby Development Kit. Octopress seems somewhat &quot;picky&quot; about what Ruby version to use, personally I am running version 1.9.3-p448, and it works fine.&lt;/p&gt;

&lt;p&gt;You also need to install the Ruby Development Kit (DevKit) so you can use some of the native C/C++ extensions. Which version to download is dependent on the Ruby version, but I am running 4.5.2, &lt;a href=&quot;https://github.com/downloads/oneclick/rubyinstaller/DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe&quot;&gt;DevKit-tdm-32-4.5.2-20111229-1559-sfx.exe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After you have downloaded and installed both Ruby as well as the DevKit, you need to run two installation scripts for the DevKit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change to the directory where the devkit is installed, and run: &lt;code&gt;ruby dk.rb init&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;then - still in the same directory - run &lt;code&gt;ruby dk.rb install&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For more information about the installation of Ruby and the DevKit, GitHub has a great &lt;a href=&quot;https://github.com/oneclick/rubyinstaller/wiki/Development-Kit&quot;&gt;wiki page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;p&gt;In addition to Ruby you need Python (this mostly for syntax highlighting). When installing Python, the version is &lt;strong&gt;very&lt;/strong&gt; important. Download and install Python 2.7 from &lt;a href=&quot;http://www.python.org/download/releases/2.7.5/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having installed all the above you should now be set for the actual installation of Octopress!!&lt;/p&gt;

&lt;h2&gt;Install Octopress&lt;/h2&gt;

&lt;p&gt;To install Octopress you need to clone the &quot;original&quot; Octopress repo from GitHub. From command-line you &lt;code&gt;cd&lt;/code&gt; to the directory where you want clone the Octopress repo into, alternatively you create a directory for this and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/p&gt;

&lt;p&gt;In the code below the assumption is that the directory exists and it is named &lt;strong&gt;MyGitHubRepos&lt;/strong&gt;. As you can see from the code, after you have changed into that directory you &lt;code&gt;clone&lt;/code&gt; the original Octopress directory into a new directory with a name of your choice. In the example below, the name is &lt;code&gt;myoctopressblog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;$ cd MyGitHubRepos
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;$ git clone git://github.com/imathis/octopress.git myoctopressblog&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;After having cloned the original GitHub repo, you need to install a Ruby bundler. The Bundler maintains a consistent environment for Ruby applications, and you install it into the directory you cloned Octopress into (in the case above: myoctopressblog). BTW, &lt;code&gt;gem&lt;/code&gt; is like a package installer:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;$ cd .\myoctopressblog
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;$ gem install bundler
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;$ bundle install&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;By now your blog is almost 100% complete. What remains is an Octopress theme. For the initial setup, the default theme will do. To install this you run the equivalent of a &lt;code&gt;MAKE&lt;/code&gt; file, a &lt;code&gt;rake&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;$ rake install&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; you now have an Octopress blog!! If you are curious what it looks like you can now run &lt;code&gt;rake&lt;/code&gt; commands to generate and preview the blog pages:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;$ rake generate
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;$ rake preview&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;After you have executed the &lt;code&gt;rake preview&lt;/code&gt; command you can browse to &lt;code&gt;localhost:4000&lt;/code&gt; and see the blog in all its glory. If you did browse to &lt;code&gt;localhost:4000&lt;/code&gt;, you can see that you have a very basic blog. By now you definitely want to configure the blog, and maybe also write - at least - a &lt;strong&gt;Hello World&lt;/strong&gt; post.&lt;/p&gt;

&lt;h2&gt;Configuring Octopress and writing an initial post&lt;/h2&gt;

&lt;p&gt;The official &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt; site has very good &lt;a href=&quot;http://octopress.org/docs/&quot;&gt;documentation&lt;/a&gt; about all things Octopress. So, instead of me re-iterating everything about configuration and using Octopress for blogging, I rather point to the official documentation for &lt;a href=&quot;http://octopress.org/docs/configuring/&quot;&gt;configuration&lt;/a&gt; and basics about &lt;a href=&quot;http://octopress.org/docs/blogging/&quot;&gt;blogging&lt;/a&gt; with Octopress.&lt;/p&gt;

&lt;p&gt;Right, by now you should have  fairly good idea how to use Octopress - it's awesome, right?! But ... hang on a second, we are missing something - right; as awesome it is, the blog is still only on your local machine. So what do we do if we want to host the blog somewhere out on the interwebz?&lt;/p&gt;

&lt;h2&gt;Deploying Octopress&lt;/h2&gt;

&lt;p&gt;In order to get a fully functional blog, we need to host it somewhere, and with Octopress there are some nice and easy ways to deploy and host the blog. As with the secion about configuring the blog, I'll let the official documentation do the talking for some of the ways Octopress can be deployed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://octopress.org/docs/deploying/github/&quot;&gt;GitHub pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://octopress.org/docs/deploying/heroku/&quot;&gt;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://octopress.org/docs/deploying/rsync/&quot;&gt;Rsync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In order to publish posts to all of the options above you need to run &lt;code&gt;rake generate&lt;/code&gt; followed by &lt;code&gt;rake deploy&lt;/code&gt; after having written a post(s).&lt;/p&gt;

&lt;p&gt;I mentioned up at the top how I was hosting this blog on Windows Azure, how is that done?&lt;/p&gt;

&lt;h2&gt;Hosting Octopress on Windows Azure&lt;/h2&gt;

&lt;p&gt;I initially thought I would host the blog on GitHub pages, and I did set up the blog to be deployed to my GitHub pages. Then, somehow, I thought that maybe I should check out Windows Azure - seeing that I have - through my work at &lt;a href=&quot;/derivco&quot;&gt;&lt;strong&gt;Derivco&lt;/strong&gt;&lt;/a&gt; - an MSDN subscription (Derivco rocks!), and the subscription gives me Windows Azure credits.&lt;/p&gt;

&lt;p&gt;So, on to the wisdom of all world (Google), and lo and behold - there were quite a few posts / articles how to link a blog to Windows Azure. Seeing that I already published / deployed to GitHub pages it was extremely easy to push this to Windows Azure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up a web-site through the Windows Azure portal&lt;/li&gt;
&lt;li&gt;Configure the &lt;code&gt;deployments&lt;/code&gt; to point to the GitHub pages&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all there is to it. Now after you have run &lt;code&gt;rake generate&lt;/code&gt; and &lt;code&gt;rake deploy&lt;/code&gt;, when you commit, the changes will be published to Windows Azure:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;$ git add .
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;$ git commit -m &quot;Some message about the commit&quot;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;$ git push origin source&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Oh, I almost forgot - I also needed to point a CNAME for my domain to my website on Windows Azure. But, the whole Windows Azure setup took less than 10 minutes!!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Moving to a New Blog Engine</title>
   <link href="http://nielsberglund.com/2013/10/02/moving-to-a-new-blog-engine/"/>
   <updated>2013-10-02T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2013/10/02/moving-to-a-new-blog-engine</id>
   <content type="html">&lt;p&gt;Every so often I get an itch, and I want to try out a new blog-platform. The time has now come to leave my self-hosted WordPress and move on to something &quot;geekier&quot; (I am a geek after all).&lt;/p&gt;

&lt;p&gt;I have just now finished moving my few posts from WordPress to the new engine: &lt;a href=&quot;http://octopress.org&quot;&gt;&lt;strong&gt;OctoPress&lt;/strong&gt;&lt;/a&gt;. In a future blog post on the new blog I will try to explain why I made the move, and why OctoPress. The new blog will be hosted on &lt;a href=&quot;http://www.windowsazure.com/en-us&quot;&gt;&lt;strong&gt;Windows Azure&lt;/strong&gt;&lt;/a&gt; - I do get free Azure credits together with my MSDN subscription, so I thought I'd see what all the &quot;fuss&quot; about Windows Azure is.&lt;/p&gt;

&lt;p&gt;As of a couple of minutes ago, I pointed a CNAME record for &lt;strong&gt;www.nielsberglund.com&lt;/strong&gt; to my new Windows Azure host. We'll see after a while if all worked. RSS feeds etc. should be as before - as I use feed-burner.&lt;/p&gt;

&lt;p&gt;So, see you all on the other side!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SqlClrProject on GitHub</title>
   <link href="http://nielsberglund.com/2012/11/03/sqlclrproject-on-github/"/>
   <updated>2012-11-03T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2012/11/03/sqlclrproject-on-github</id>
   <content type="html">&lt;p&gt;As some of you may know, I - once upon a time - developed a project (VS add-in, templates, etc) for automatic deployment of CLR assemblies to SQL Server: &lt;strong&gt;SqlClrProject&lt;/strong&gt;. That project has been dormant now for a couple of years, but I now and then get requests for where it can be downloaded from (I had it on CodePlex, but had to take it down as I didn't publish the source code).&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;A while ago I decided to start to use Git and GitHub as source control (I have been using SVN since forever), and as part of the &quot;getting to grips&quot; with Git, I created a repo for &lt;strong&gt;SqlClrProject&lt;/strong&gt; on GitHub. So the source for the project is now available on &lt;a href=&quot;https://github.com/nberglund/sqlclrproject&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are interested in the  fork it, play with it. The state of it is that it &quot;should&quot; work on VS 2008 / SQL 2008. It most likely will work on VS 2010 as well. And of course the standalone deployment executable will work regardless of VS version.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>First Impressions Microsoft BUILD - Win 8</title>
   <link href="http://nielsberglund.com/2011/09/13/first-impressions-microsoft-build-win-8/"/>
   <updated>2011-09-13T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2011/09/13/first-impressions-microsoft-build-win-8</id>
   <content type="html">&lt;p&gt;I have a while ago just finished watching the live stream of the first keynote (yes there will be one tomorrow as well), at Microsoft BUILD. Having attended / presented, at quite a few of these kind of events - and being somewhat jaded (well OK then, a lot jaded), I must still say that I am impressed.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;As quite a few other developers I have been fairly worried about what will happen when Win 8 comes; .NET/WPF/SilverLight is dead - long live HTML etc., but at least for now it seems that the fears have been un-founded. I.e, the .NET as we know and love is still there, SilverLight as well (come to think about it, nothing much was said about WPF). And it seems pretty straightforward to build the new &quot;Metro&quot; style apps using the tools we know.&lt;/p&gt;

&lt;p&gt;What do I think then: well, Win 8 promises to be really, really slick and cool - but we have been here before (Longhorn anyone?), so let's wait and see until we get to RC stages. However, the whole Win RT, i.e the underlying &quot;goo&quot; of Windows (graphics, networking, etc) being exposed to all different types of programming languages; native, .NET, HTML/JavaScript, etc., seems very, very cool. I can't wait to get my hands on some bits and start playing around with this. Speaking of that; bits will apparently be &lt;a href=&quot;http://bit.ly/nX2K3a&quot;&gt;released later&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So at this stage I am fairly optimistic, and I would not rule out, myself running Win 8 on a couple of machines here at home. I am looking forward to the keynote tomorrow, where they will talk more about the development experience, and hopefully drill deeper into Visual Studio.Next.&lt;/p&gt;

&lt;p&gt;Having finally seen the session-list, there are some really interesting sessions during the week. I really, really hope these ones will be videoed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:bit.ly/n16Xyu&quot;&gt;&lt;strong&gt;F# 3.0: data, services, Web, cloud, at your fingertips, by Don &quot;Mr F#&quot; Syme&lt;/strong&gt;:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bit.ly/n7tUKU&quot;&gt;&lt;strong&gt;What's new in .NET Framework 4.5&lt;/strong&gt;:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bit.ly/pd3XZN&quot;&gt;&lt;strong&gt;Lessons learned designing the Windows Runtime&lt;/strong&gt;:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bit.ly/nX5czN&quot;&gt;&lt;strong&gt;Deep dive into the kernel of the .NET Framework&lt;/strong&gt;:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bit.ly/r8Iyq8&quot;&gt;&lt;strong&gt;Using the Windows Runtime from C++&lt;/strong&gt;:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bit.ly/r4Q1cT&quot;&gt;&lt;strong&gt;Using the Windows Runtime from C# and Visual Basic&lt;/strong&gt;:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That's all for now &quot;folks&quot;. Will hopefully post more as the week and the conference goes by.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Transactions in SQL Server (take 2956)</title>
   <link href="http://nielsberglund.com/2011/09/11/transactions-in-sql-server-take-2956/"/>
   <updated>2011-09-11T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2011/09/11/transactions-in-sql-server-take-2956</id>
   <content type="html">&lt;p&gt;Transactions in SQL Server seems to be a difficult topic to grasp. This weekend I came across a blog-post where the poster showed a &quot;solution&quot; to the &quot;The ROLLBACK TRANSACTION request has no corresponding BEGIN TRANSACTION&quot; error we sometimes see when various stored procedures call each other. The solution (even though it masked out the error in question) did not get it quite right. So I thought I would make a post about the subject.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h3&gt;Nested Transactions in SQL Server and the Evil @@TRANCOUNT&lt;/h3&gt;

&lt;p&gt;In SQL Server we have the @@TRANCOUNT variable which gives us the number of transactions active in the session - or that's at least what we might believe. Take this  extremely simple code:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HELLO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'WORLD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;0
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;1
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;2
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;1
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;0&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;I.e. it seems like the transaction count is increasing for each BEGIN TRAN, and decrease with COMMIT. And if you were to &lt;code&gt;SELECT * FROM #t&lt;/code&gt; you would see two rows returned. So far so good, so what is wrong with @@TRANCOUNT then? Well, let us change the code slightly (don't forget to drop #t if you copy and paste this code):&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HELLO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'WORLD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;If you now were to (don't do it immediately) &lt;code&gt;SELECT * FROM #t&lt;/code&gt;, how many rows would you get back - 0, 1, or 2? Seeing how the @@TRANCOUNT is increasing with every BEGIN TRAN and decreasing with COMMIT / ROLLBACK, it is understandable if your answer is 1:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we start a transaction and insert a row&lt;/li&gt;
&lt;li&gt;we then start another transaction and insert a second row&lt;/li&gt;
&lt;li&gt;we call commit after the second insert (the inner transaction)&lt;/li&gt;
&lt;li&gt;finally we do a rollback, on the &amp;#8220;outer&amp;#8221; transaction&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As we after the second BEGIN TRAN can see @@TRANCOUNT being 2, we could assume that the commit would commit the second insert. However, we all know what happens when we assume  (now would be a good time to do the SELECT)  &amp;#8230;.&lt;/p&gt;

&lt;p&gt;Right, the SELECT did not return any rows at all, so it is probably fair to say that we did not have multiple transactions, even though @@TRANCOUNT showed us more than one. So, then we might assume (keep in mind what I&amp;#8217;ve said about assume) that the reason we rolled back was because ROLLBACK was the last statement. Let us switch the COMMIT on line 10 with the ROLLBACK on line 12 (we now have ROLLBACK on line 10 and COMMIT on line 12) and execute. WHOA &amp;#8211; we got a big fat exception, what happened here? To answer that, let us look a bit closer at the main parts of transaction control in your code.&lt;/p&gt;

&lt;h3&gt;BEGIN TRAN, COMMIT and ROLLBACK&lt;/h3&gt;

&lt;p&gt;When you execute BEGIN TRAN in T-SQL, SQL will look around in the execution context of your session and see if there already exists a transactional context. If not, SQL will start a new transaction. If there is a transaction already, SQL will enlist in this transaction. However in both cases SQL will increase the @@TRANCOUNT variable.&lt;/p&gt;

&lt;p&gt;Then, when you execute a COMMIT, SQL will not immediately commit the transaction but will decrease the transaction count with 1. If the transaction count has reached 0 due to the commit, a commit will take place. OK, so far so good, but this does not explain the error we received when switching the COMMIT and ROLLBACK statements, if it works as described, then we should have committed?&lt;/p&gt;

&lt;p&gt;Ah, yes &amp;#8211; however, a ROLLBACK not only decrements the transaction count &amp;#8211; it sets it to 0 immediately, and as the transaction count is now 0, a rollback will happen. So in our second example we are seeing something similar to when we &amp;#8211; in stored procs &amp;#8211; are getting the &amp;#8221;The ROLLBACK TRANSACTION request has no corresponding BEGIN TRANSACTION&amp;#8221; error.&lt;/p&gt;

&lt;h3&gt;Stored Procedures and Transactions&lt;/h3&gt;

&lt;p&gt;It is quite common to write procs something like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- do some stuff&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- then if all is OK we commit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMSg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMSg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERROR_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--things have gone very wrong&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Then we are having a similar proc, looking almost the same, but it, in addition, calls into sp2:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- do some stuff&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- do some more stuff by calling into sp2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- then if all is OK we commit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMSg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMSg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERROR_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--things have gone very wrong&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;This is now when we will potentially see the error mentioned before. We call sp1, when sp1 is called there is no transactional context around, so SQL creates a new transaction. Then we go on to call sp2 from sp1. In the BEGIN TRAN call in sp2, there exists a transactional context, so SQL enlists us in that context.&lt;/p&gt;

&lt;p&gt;If all now goes well and we call COMMIT in sp2, the commit causes the transaction count to be decreased to 1 &amp;#8211; but no &amp;#8220;real&amp;#8221; commit happens. So when we subsequently calls COMMIT in sp1, we decrement the transaction count to 0, and we are committed.&lt;/p&gt;

&lt;p&gt;In the case when things go wrong is sp2 and we call rollback, the transaction count is immediately set to 0, and a rollback happens. When we come back to sp1, SQL sees that we had a transaction in sp1, but there are no transactions around, and we will get the error discussed. If we then go on and do a rollback (as in our code) &amp;#8211; we will get additional errors.&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;p&gt;A solution to the problem is to use the &amp;#8220;evil&amp;#8221; @@TRANCOUNT, to see if there are any transactions around. If there aren&amp;#8217;t any, we start a transaction. If there are a transaction already, we don&amp;#8217;t do anything, and we let the existing transaction handle everything:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tranCount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--I'm using SQL2008 here&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tranCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--no tx's around, we can start a new&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- do some stuff&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- then if all is OK we commit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--if the variable @tranCount is 0,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- we have started the tx ourselves, and can commit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tranCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--XACT_STATE - just to be on the safe side&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMSg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMSg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERROR_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--if the variable @tranCount is 0,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- we have started the tx ourselves, and can rollback&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tranCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--XACT_STATE - just to be on the safe side&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--tell an eventual calling proc that things have gone wrong&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--and the calling proc should rollback&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Obviously the calling proc would have similar code to decide if to start a tran or not.&lt;/p&gt;

&lt;p&gt;In the above scenario we let the &amp;#8220;outer&amp;#8221; proc handle all the transactional control. Sometimes you are in a situation where &amp;#8211; if things go wrong in the &amp;#8220;inner&amp;#8221; proc (sp2 in our case) &amp;#8211; you do not want to roll back everything done, but only what was done in the inner proc. For such a scenarion, you can use named savepoints:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tranCount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRANCOUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--I'm using SQL2008 here&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tranCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--no tx's around, we can start a new&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--we are already in a tx, take a savepoint here&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;SAVE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--this is just a name&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- do some stuff&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- then if all is OK we commit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--if the variable @tranCount is 0,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- we have started the tx ourselves, and can commit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tranCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--XACT_STATE - just to be on the safe side&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMSg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errMSg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERROR_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--if the variable @tranCount is 0,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;-- we have started the tx ourselves, and can rollback&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tranCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--XACT_STATE - just to be on the safe side&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tranCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_STATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRANSACTION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--we are rolling back to the save-point&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--tell an eventual calling proc that things have gone wrong&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--and let the calling proc decide what to do with its parts&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='33' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Personally, I do not use named save-points that much as they cannot be used together with linked servers, and we &amp;#8211; unfortunately &amp;#8211; are using linked servers a lot.&lt;/p&gt;

&lt;p&gt;A final note about named save-points; they are not the same thing as beginning / committing / rolling back a transaction with a name:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HELLO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;ROLLBACK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Beginning a transaction with a name, is for most parts just a convenience. It has no effect on nesting (unless you use named save points), and SQL Server Books OnLine says this about naming of transactions:&lt;br/&gt;
&amp;#8220;Naming multiple transactions in a series of nested transactions with a transaction name has little effect on the transaction. Only the first (outermost) transaction name is registered with the system. A rollback to any other name (other than a valid savepoint name) generates an error. None of the statements executed before the rollback is, in fact, rolled back at the time this error occurs. The statements are rolled back only when the outer transaction is rolled back&amp;#8221;.&lt;/p&gt;

&lt;p&gt;If you have questions, observations etc., please feel free to leave me a comment, or drop me an email.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>F#, Mono and Mac - Take II</title>
   <link href="http://nielsberglund.com/2010/11/20/fsharp-mono-and-mac-2/"/>
   <updated>2010-11-20T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2010/11/20/fsharp-mono-and-mac-2</id>
   <content type="html">&lt;p&gt;So yesterday &lt;a href=&quot;/2010/11/19/fsharp-mono-and-mac/&quot;&gt;I wrote&lt;/a&gt; about how I have started using F# and Mono on my MacBook.&lt;/p&gt;

&lt;p&gt;I wrote about how I downloaded the F# bits, unzipped and put them in a specific directory I had created. Today after having browsed around a bit more I realized I had done it the hard way. To install the required bits for F# for Mac, you only have to download a zip file with an install package for Mac from the &lt;a href=&quot;http://fsxplat.codeplex.com/&quot;&gt;F# Cross Platform&lt;/a&gt; site on CodePlex. The actual zip-file for the November 2010 CTP is &lt;a href=&quot;/2010/11/19/fsharp-mono-and-mac/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After you have downloaded the file you unzip it and run the &lt;code&gt;.pkg&lt;/code&gt; file. This takes care of everything; no re-signing with the &lt;code&gt;.snk&lt;/code&gt; file etc. The added benefit of installing from the &lt;code&gt;.pkg&lt;/code&gt; file is that a couple of F# compiler dll's are automatically gac:ed (they are needed if you want to run the F# plugin for MonoDevelop), and aliases are created for the F# compiler and the F# interactive window.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>F#, Mono and Mac</title>
   <link href="http://nielsberglund.com/2010/11/19/fsharp-mono-and-mac/"/>
   <updated>2010-11-19T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2010/11/19/fsharp-mono-and-mac</id>
   <content type="html">&lt;p&gt;This is a first post about my experiences with running F# and Mono on a Mac.&lt;/p&gt;

&lt;p&gt;In a &lt;a href=&quot;/2010/11/15/using-fsharp-in-sqlclr/&quot;&gt;previous post&lt;/a&gt; I wrote about how I have started to play with F#. As that post also covered SQLCLR it was obvious I was on Windows. Even though I make my living from development in a Windows environment, my main machine is a MacBook, and I run OSX as my main OS. I have previously also been running Linux (ArchLinux) on this machine as my main OS. Naturally I have heard about Mono (and also installed it a couple of times - and quickly un-installed again, but I have not really done anything with it. I have always run Windows in a VM on my MacBook for development etc. However after the announcement that F# was going &lt;a href=&quot;http://blogs.msdn.com/b/dsyme/archive/2010/11/04/announcing-the-f-compiler-library-source-code-drop.aspx&quot;&gt;Open Source&lt;/a&gt;, and &lt;a href=&quot;http://tomasp.net/blog&quot;&gt;Tomas P&lt;/a&gt; &lt;a href=&quot;http://tomasp.net/blog/fsharp-in-monodevelop.aspx&quot;&gt;posted&lt;/a&gt; about his F# MonoDevelop plug-in&lt;/a&gt;, I decided that I should have a look at what it would be like to do F# &quot;stuff in OSX.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;This is what I did:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.go-mono.com/mono-downloads/download.html&quot;&gt;Downloaded Mono&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.microsoft.com/downloads/en/details.aspx?FamilyID=f8c623ae-aef6-4a06-a185-05f59be47d67&amp;amp;displaylang=en&quot;&gt;Downloaded F#&lt;/a&gt;. You want to download the zip file.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Having downloaded what I thought was necessary (I decided to hold off with MonoDevelop until I had everything running), I started the installation process. Installing Mono was straight forward, just mount the &lt;code&gt;.dmg&lt;/code&gt; and then run the &lt;code&gt;.pkg&lt;/code&gt; file. The only slight issue after installation was where it had been installed. Mostly for my own reference for later installations; Mono is located at: &lt;code&gt;/Library/Frameworks/Mono.framework&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After I had installed Mono, I copied the bin directory from the unzipped F# file to a directory I created in the same root folder as where Mono was: &lt;code&gt;/Library/Frameworks/FSharp&lt;/code&gt;. I copied the &lt;code&gt;install-mono.sh&lt;/code&gt; file to the FSharp directory and was ready to start the installation. Fortunately before I executed the &lt;code&gt;install-mono.sh&lt;/code&gt; file, I read the comments in the file. At this stage I realised I had not downloaded everything necessary.&lt;/p&gt;

&lt;p&gt;One of the F# dll's &lt;code&gt;FSharp.Core.dll&lt;/code&gt; needs to be installed in the gac. In order to do that, the dll needs to be re-signed with the &lt;code&gt;mono.snk&lt;/code&gt; key. The installation file mentions how you can download the file using &lt;code&gt;wget&lt;/code&gt;. As I did not have &lt;code&gt;wget&lt;/code&gt; I found a link to it and downloaded it by right-clicking on the link and choose &quot;Save Link As&quot;. Once again mostly for my future reference; the file can be found &lt;a href=&quot;http://github.com/mono/mono/raw/master/mcs/class/mono.snk&quot;&gt;here&lt;/a&gt;, (just right click and choose &quot;Save Link As&quot;). I saved it into the F# root folder (the same folder where the &lt;code&gt;install-mono.sh&lt;/code&gt; is).&lt;/p&gt;

&lt;p&gt;So, now everything should be ready to go. I executed the install file and promptly got an error saying that the &lt;code&gt;FSharp.Core.dll&lt;/code&gt; could not be installed in the gac. Hmm, not good! Fortunately the error message mentioned something about a possible permission error, so I looked at the permissions on the gac folder (&lt;code&gt;../Mono.framework/Versions/2.8/lib/mono/gac&lt;/code&gt;), and sure enough - I did not have write permissions. I gave myself write permissions, and re-ran the installation and everything went OK. Cool!!&lt;/p&gt;

&lt;p&gt;After this it was time to test it out. From the F# bin directory I ran the following from a terminal window to execute the compiler: &lt;code&gt;mono fsc.exe&lt;/code&gt;. It seemed to work as I got this error back:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/fsc.exe.png&quot; width=&quot;658&quot; height=&quot;178&quot;  &gt;&lt;/p&gt;

&lt;p&gt;I then tried the interactive window: &lt;code&gt;mono fsi.exe&lt;/code&gt;. I wrote some simple test code:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/fsi-exec.png&quot; width=&quot;661&quot; height=&quot;330&quot;  &gt;&lt;/p&gt;

&lt;p&gt;As you can see, that worked as well!! So I am now well on the way of running (and learning) F# on Mono. Next step is to install MonoDevelop and Tomas P's plugin for F#. Stay tuned...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>TPL Dataflow, Axum v.NEXT?</title>
   <link href="http://nielsberglund.com/2010/11/18/tpl-dataflow-axum-v-next/"/>
   <updated>2010-11-18T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2010/11/18/tpl-dataflow-axum-v-next</id>
   <content type="html">&lt;p&gt;At PDC 2010 Microsoft showed the new &lt;a href=&quot;http://msdn.microsoft.com/en-us/vstudio/async.aspx&quot;&gt;Async&lt;/a&gt; features of coming C# (and VB.NET) versions, and quite a lot has been written about it already. Part of the Async CTP is &lt;strong&gt;TPL Dataflow&lt;/strong&gt;, and this has gone somewhat un-noticed.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;&lt;a href=&quot;http://www.microsoft.com/downloads/en/details.aspx?FamilyID=d5b3e1f8-c672-48e8-baf8-94f05b431f5c&amp;amp;displaylang=en&quot;&gt;TPL Dataflow&lt;/a&gt; is a library for building concurrent applications. It utilises an actor/agent-oriented designs via primitives for in-process message passing, dataflow, and pipelining. It looks and feels a bit like &lt;a href=&quot;http://msdn.microsoft.com/en-us/devlabs/dd795202.aspx&quot;&gt;Axum&lt;/a&gt;, and one can wonder if TPL Dataflow will be the productization (is this a word?) of Axum, especially as Axum's future seems a bit &lt;a href=&quot;http://social.msdn.microsoft.com/Forums/en-US/axum/thread/f86881de-71af-4709-b197-64a6e6dc96dd&quot;&gt;unclear&lt;/a&gt; at the moment.&lt;/p&gt;

&lt;p&gt;I am at the moment writing some test-code for TPL Dataflow, which I will post as soon as I have tidied it up a bit. In the meantime &lt;a href=&quot;http://mdavey.wordpress.com/&quot;&gt;Matt Davey&lt;/a&gt;, has quite a few &lt;a href=&quot;http://en.wordpress.com/tag/tpldataflow/&quot;&gt;posts about TPL Dataflow&lt;/a&gt; on his blog. So if you are interested, go and have a look.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using F# in SQLCLR</title>
   <link href="http://nielsberglund.com/2010/11/15/using-fsharp-in-sqlclr/"/>
   <updated>2010-11-15T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2010/11/15/using-fsharp-in-sqlclr</id>
   <content type="html">&lt;p&gt;Recently I have become very interested in F# and I am at the moment trying to get to grips with it. It is definitely a different beast than C#, but so far I like it - a lot!&lt;/p&gt;

&lt;p&gt;Anyway, I am a SQL nerd, and many moons ago I was very heavily involved in SQLCLR (for you who don't know what that is; it is the ability to run .NET code inside the SQL Server engine. It was first introduced with SQL Server 2005). So I thought it would be a &quot;giggle&quot; to see if I could get some F# code running inside SQL Server.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;I created the simplest of the simple F# dll's. SQLCLR requires you have a public class and your publicly exposed SQLCLR methods to be static, so my F# code looked like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Avesome Stuff&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;namespace ManagedData.Samples.FSharp
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  type SqlClr =
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    static member Adder a b = a + b
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    static member Factorial n =
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      match n with
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      | 0  -&gt;; 1
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      | _ -&gt; n * (SqlClr.Factorial( n - 1))&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;As you can see my class is extremely advanced (not); it has two methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The canonical &lt;code&gt;Adder&lt;/code&gt; method (every SQLCLR dll has to have an &lt;code&gt;Adder&lt;/code&gt; method, it's the law - nah, I'm just kidding), which takes two integers and returns an integer.&lt;/li&gt;
&lt;li&gt;A factorial method, which takes an integer and calculates the factorial from that.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By the way, any pointers about how to write efficient F# code are very welcome .&lt;/p&gt;

&lt;p&gt;Having written and compiled the code, it was time to deploy! When running .NET code in SQL Server, you need to deploy your assembly to the database you want to execute your code in, and SQL Server will actually load the assembly from the database. In fact most assemblies are loaded from the database, even quite a few of Microsoft's own system assemblies which normally are loaded from the GAC. There are only about 13 system assemblies that are allowed to be loaded from the GAC these are known as the &quot;blessed list&quot;. You also need to create T-SQL wrapper objects (procedures, functions, triggers, etc.) around the methods you want to publicly expose.&lt;/p&gt;

&lt;p&gt;In my SQL Server 2008R2 instance I created a database in which I wanted my F# assembly to, and then it was time to deploy. You can deploy in several ways, the easiest is something like this (in the database you want to use):&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSEMBLY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsasm&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;repos&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;F#&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcode&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fssqlclr&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fslib&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fslib.dll'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SAFE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The problem with the code above is that F# projects have a dependency on the assembly &lt;code&gt;FSharp.Core.dll&lt;/code&gt;, so when I tried to deploy my assembly as per above, I got an exception. What I had to do was to deploy &lt;code&gt;FSharp.Core.dll&lt;/code&gt; to my database first:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSEMBLY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsasm&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;path to ...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;FSharp.Core.dll'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNSAFE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Notice the use of &lt;code&gt;permission_set = UNSAFE&lt;/code&gt;, this is to tell SQL Server that I know what I am doing and SQL Server should keep from doing a lot if validation. When I had catalogued the &lt;code&gt;FSharp.Core.dll&lt;/code&gt; assembly I had no problems deploying my assembly to the database.&lt;/p&gt;

&lt;p&gt;All there remained to do now was to create the T-SQL wrapper object(s) around my F# methods. This is done with &quot;normal&quot; &lt;code&gt;CREATE ...&lt;/code&gt; syntax. The code for my factorial looks like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FsFactorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXTERNAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsasm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManagedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FSharp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlClr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;This also went without problems, so now it is &quot;crunch-time&quot;. Can I execute a F# method in SQLCLR?&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FsFactorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Lo and behold, it executed and I received 24 back! I had just now executed F# running inside SQL Server!!&lt;/p&gt;

&lt;p&gt;So, what does this prove? Nothing really, it was just an exercise from me to see if it could be done. However, F# is really suitable for quite a few tasks you would want to use SQLCLR for, so it now gives a database developer another tool in his tool-belt.&lt;/p&gt;

&lt;p&gt;If anyone is interested in the full code for this, please drop me a comment and I'll email it to you.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SQL Server Denali CTP 1 SUX</title>
   <link href="http://nielsberglund.com/2010/11/14/sql-server-denali-ctp-1-sux/"/>
   <updated>2010-11-14T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2010/11/14/sql-server-denali-ctp-1-sux</id>
   <content type="html">&lt;p&gt;.. from a relational developers perspective!!&lt;/p&gt;

&lt;p&gt;Well, the title may be a bit harsh, but at least it grabbed your attention - did it not?!&lt;/p&gt;

&lt;p&gt;A week ago, or so, I wrote a &lt;a href=&quot;/2010/11/07/what-new-programmability-features-will-there-be-in-sql-11/&quot;&gt;wish list&lt;/a&gt; to Santa for Denali from a relational developers perspective. In that wish list I wrote that there has been fairly little love for relational SQL developers in the recent versions of SQL Server, and that I hoped in this version (i.e Denali) Microsoft would &quot;go back to the roots&quot; and give us developers some new stuff.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;So I downloaded the CTP when it became available, and have been playing around with it for a bit, in order to see what new &quot;stuff&quot; I could find and how it stacked up against my wish list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Autonomous transactions - not a whiff of it.&lt;/li&gt;
&lt;li&gt;Enhancements to SQLCLR - Denali is still loading version 2.0.50727 of the runtime (i.e. the original &quot;SQL 2005&quot; version). So nothing here either, and they have not even added Microsoft.SqlServer.Types (for the geo and hierarchy types) to the blessed list. This (lack of SQLCLR enhancements) is probably the one thing that saddens me the most - it seems that after all the initial hoopla and fanfare about SQLCLR when it was introduced in SQL Server 2005, Microsoft has decided to not fullfil its potentials.&lt;/li&gt;
&lt;li&gt;Finally blocks - well, we do not have finally blocks but we now have a proper way of throwing and re-throwing exceptions; the &lt;code&gt;THROW&lt;/code&gt; keyword. I wrote about it &lt;a href=&quot;/2010/11/10/new-t-sql-features-in-sql-11-denali-error-handling/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;/2010/11/12/more-t-sql-error-functionality-in-denali-sql-11/&quot;&gt;here&lt;/a&gt;. So at least this is something.&lt;/li&gt;
&lt;li&gt;Other T-SQL enhancements &amp;#8211; this is an area where there are at least a couple of new things: &lt;code&gt;SEQUENCE&lt;/code&gt; and &lt;code&gt;OFFSET&lt;/code&gt;. Those are cool and useful and Aaron B wrote about them &lt;a href=&quot;http://sqlblog.com/blogs/aaron_bertrand/archive/2010/11/11/sql-server-11-denali-using-sequence.aspx&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://sqlblog.com/blogs/aaron_bertrand/archive/2010/11/10/sql-server-11-denali-using-the-offset-clause.aspx&quot;&gt;here&lt;/a&gt;. But this is still not very much, and no evidence of that Microsoft want to continue to enhance T-SQL as a first class development language (as they have stated in the past).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, the report card does not look that good and that's the reason for the title of this post. Granted, there are things that are in the cards but not included in this CTP; things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Column storage - however, that is more a BI feature, but it will be usable in the OLTP world as well.&lt;/li&gt;
&lt;li&gt;FileTable - a way of storing files in SQL Server. It looks like FileStream v.NEXT or (do I dare say it) WinFS (now I have most certainly condemned this to death). It looks interesting, but - as I said - not in this CTP.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As you can gather from the above, I am not that stoked about Denali. I hope later CTP's will bring more things, but somehow I doubt it.&lt;/p&gt;

&lt;p&gt;What are your take on this, are you happy with what Denali gives you (from a relational developers perspective), and if not - what would you like to see included. Answers in the comments please.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Beginners F# Resources</title>
   <link href="http://nielsberglund.com/2010/11/13/beginners-fsharp-resources/"/>
   <updated>2010-11-13T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2010/11/13/beginners-fsharp-resources</id>
   <content type="html">&lt;p&gt;This post is more as a reminder to myself where to find online resources when learning F#. If anyone else can find it useful, so much better. And, if anyone out there has other online, resources, please leave a comment and I will include it. So, in no particular order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/ff714588.aspx&quot;&gt;Introductory article by Luke Hoban in MSDN Magazine.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ctocorner.com/fsharp/book/&quot;&gt;An online book about F#.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jelovic.com/weblog/?p=215&quot;&gt;Tutorial, by Dejan Jelovic, about getting started with F# from a C# developers perspective.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lorgonblog.wordpress.com/2009/05/16/brians-favorite-online-content-for-learning-f/&quot;&gt;Brian McNamara has great info and resource list, highly recommended.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Finally, a list like this would be incomplete without the link to &lt;a href=&quot;http://blogs.msdn.com/b/dsyme/&quot;&gt;the Man himself: &lt;strong&gt;Don Syme&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>More T-SQL Error Functionality in Denali / SQL 11</title>
   <link href="http://nielsberglund.com/2010/11/12/more-t-sql-error-functionality-in-denali-sql-11/"/>
   <updated>2010-11-12T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2010/11/12/more-t-sql-error-functionality-in-denali-sql-11</id>
   <content type="html">&lt;p&gt;In my previous &lt;a href=&quot;/2010/11/10/new-t-sql-features-in-sql-11-denali-error-handling/&quot;&gt;post&lt;/a&gt; I wrote about the new &lt;code&gt;THROW&lt;/code&gt; keyword in Denali / SQL 11. Having played around a bit more with Denali, I wanted to write some additional things about &lt;code&gt;THROW&lt;/code&gt; and it's relation to &lt;code&gt;RAISERROR&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h3&gt;RAISERROR&lt;/h3&gt;

&lt;p&gt;First some background / overview of RAISERROR:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RAISERROR&lt;/code&gt; allows you to throw an error based on either an error number or a message, and you can define the severity level and state of that error:&lt;/li&gt;
&lt;li&gt;If you call &lt;code&gt;RAISERROR&lt;/code&gt; with an error number, that error number has to exist in sys.messages.&lt;/li&gt;
&lt;li&gt;You can use error numbers between 13001 and 2147483647 (it cannot be 50000) with &lt;code&gt;RAISERROR&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As I mentioned in my previous &lt;a href=&quot;/2010/11/10/new-t-sql-features-in-sql-11-denali-error-handling/&quot;&gt;post&lt;/a&gt;, &lt;code&gt;RAISERROR&lt;/code&gt; has been around since forever - and it works fairly well. One of the major drawbacks with &lt;code&gt;RAISERROR&lt;/code&gt; - as I also wrote in my previous post; is that it cannot be used to re-throw an error we might have trapped in a structured error handling block. Or rather, this may not be that much a &lt;code&gt;RAISERROR&lt;/code&gt; issue, as an issue that SQL Server has not previously supported the notion of re-throwing an error. Be as it may with that, there are other drawbacks with &lt;code&gt;RAISERROR&lt;/code&gt; which I will mention later in this post.&lt;/p&gt;

&lt;h3&gt;THROW&lt;/h3&gt;

&lt;p&gt;In Denali / SQL 11 Microsoft introduces the &lt;code&gt;THROW&lt;/code&gt; keyword, which allows us to re-throw an exception caught in an exception handling block. Some characteristics of &lt;code&gt;THROW&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;THROW&lt;/code&gt; you can throw a specific error number as well as message:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ooops'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When using &lt;code&gt;THROW&amp;gt;&lt;/code&gt; you have to define both an error number as well as a message (and state), unless you re-throw an exception.&lt;/li&gt;
&lt;li&gt;The error number does not have to exist in sys.messages but, it has to be between 50000 and 2147483647.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, &lt;code&gt;THROW&lt;/code&gt; looks fairly cool, but what are the drawbacks with &lt;code&gt;RAISERROR&lt;/code&gt; I mentioned above? &lt;del&gt;Well, for one - beginning with Denali / SQL 11 RAISERROR is being deprecated, i.e. it will eventually be removed from SQL Server&lt;/del&gt;. Another reason has to do with transactions and error handling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; According to &lt;a href=&quot;http://sqlblog.com/blogs/aaron_bertrand/&quot;&gt;Aaron Bertrand&lt;/a&gt;, in his &lt;a href=&quot;http://sqlblog.com/blogs/aaron_bertrand/archive/2010/11/22/sql-server-v-next-denali-using-throw-instead-of-raiserror.aspx&quot;&gt;post&lt;/a&gt;, it is only some very old &lt;code&gt;RAISERROR&lt;/code&gt; syntax that is being deprecated.&lt;/p&gt;

&lt;h3&gt;XACT_ABORT&lt;/h3&gt;

&lt;p&gt;As every T-SQL programmer worth his (or her) salt should know, an exception does not roll back a transaction by default (ok, ok, it does depend on severity level to an extent - but a &quot;normal&quot; exception does not roll back a tran). I.e. the following code would cause two rows to be inserted in the table &lt;code&gt;t1&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;c1&quot;&gt;--first create a test table which we will use throughout the code samples&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nvarchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;span class=&quot;c1&quot;&gt;--now onto the 'meat'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'row1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;span class=&quot;c1&quot;&gt;--emulate some error, this will indeed cause an exception to happen,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;span class=&quot;c1&quot;&gt;--but the processing will continue&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'row2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;We can indicate to SQL Server that we want &quot;automatic&quot; rollback of transactions when an exception happens by setting &lt;code&gt;XACT_ABORT&lt;/code&gt;. This will cause a rollback to happen if a system exception happens. So based on the example above, no rows will be inserted when the code below executes:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_ABORT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'row3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'row4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;However, what happens if the user throws an exception using &lt;code&gt;RAISERROR&lt;/code&gt;? In that case no rollback happens, i.e. &lt;code&gt;RAISERROR&lt;/code&gt; does not honor the &lt;code&gt;XACT_ABORT&lt;/code&gt; setting:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_ABORT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'row5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--the user raises an error, but the tx will not roll back&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Oooops'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'row6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;This can catch developers out and is in my opinion a fairly severe drawback. So with the introduction of Denali / SQL 11 and the &lt;code&gt;THROW&lt;/code&gt; keyword, Microsoft has tried to fix this by making &lt;code&gt;THROW&lt;/code&gt; honor &lt;code&gt;XACT_ABORT&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XACT_ABORT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRAN&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'row7'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--the user raises an error, and the tx will roll back&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ooops'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'row8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;When you run the code above, you will see that the transaction is indeed rolled back and no rows are inserted.&lt;/p&gt;

&lt;p&gt;So developers, &quot;go forth&quot; and &lt;code&gt;THROW&lt;/code&gt; exceptions in SQL Server Denali / SQL 11.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New T-SQL Features in SQL 11 / Denali - Error Handling</title>
   <link href="http://nielsberglund.com/2010/11/10/new-t-sql-features-in-sql-11-denali-error-handling/"/>
   <updated>2010-11-10T11:27:56+02:00</updated>
   <id>http://nielsberglund.com/2010/11/10/new-t-sql-features-in-sql-11-denali-error-handling</id>
   <content type="html">&lt;p&gt;A couple of days ago I wrote my &lt;a href=&quot;/2010/11/07/what-new-programmability-features-will-there-be-in-sql-11/&quot;&gt;wish-list&lt;/a&gt; to Santa what I wanted to see in next version of SQL Server (SQL 11 / Denali). I was pleasantly surprised that I could find out for myself shortly after; i.e. SQL Server Denali CTP1 was released during the PASS Summit. I have literally finished installing the next version of SQL Server (Denali / SQL 11) on a new VM, like 10 minutes ago, and I have done a quick check of the new features of SQL Server Denali (what I could find at least) against my &lt;a href=&quot;/2010/11/07/what-new-programmability-features-will-there-be-in-sql-11/&quot;&gt;wish-list&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;So it seems that my autonomous transactions have not been implemented. That does not necessarily meat that they won’t be there in later releases, but for now it is a downer. In my list I also mentioned finally blocks. From what I can see that has not been implemented either, &lt;strong&gt;BUT&lt;/strong&gt; something else has…&lt;/p&gt;

&lt;h3&gt;RAISERROR&lt;/h3&gt;

&lt;p&gt;No &lt;code&gt;RAISERROR&lt;/code&gt; is not anything new. We have used &lt;code&gt;RAISERROR&lt;/code&gt; since beginning of time to throw an error in SQL Server. When using &lt;code&gt;RAISERROR&lt;/code&gt; we either indicate an error-number, or a message. If we were to raise based on a number, that error number had to exist in sys.messages. If we used a message instead, the error number we received back was 50000, i.e. something like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;RAISERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'An error happened'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;produced this:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Level&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;An&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;happened&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h3&gt;TRY … CATCH&lt;/h3&gt;

&lt;p&gt;In SQL 2005 &lt;del&gt;proper&lt;/del&gt; structured error handling was introduced using &lt;code&gt;TRY … CATCH&lt;/code&gt; blocks. So instead of having to “litter” our code with &lt;code&gt;SELECT @@ERROR&lt;/code&gt; statements, we could enclose our code in &lt;code&gt;BEGIN TRY END TRY&lt;/code&gt; followed by &lt;code&gt;BEGIN CATCH END CATCH&lt;/code&gt;. Something like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'world'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--handle the error&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;… and life was good (IMHO the structured exception handling was one of the greatest new features in SQL Server 2005). However, we are never completely satisfied, we always want more. And what we wanted to do, was to be able to handle the error, and then perhaps re-throw the error (like we can do in other modern development languages). Up until SQL Server Denali / SQL 11 the only way to do that was to use &lt;code&gt;RAISERROR&lt;/code&gt;. That would not have been so bad apart from the fact that we are not allowed to raise an error with a system defined error number, i.e. &lt;code&gt;RAISERROR(8134 …)&lt;/code&gt;. So instead we had to resort to various “hack” to achieve what we wanted.&lt;/p&gt;

&lt;h3&gt;THROW&lt;/h3&gt;

&lt;p&gt;This has now been fixed in SQL Server Denali / SQL 11 by the introduction of &lt;strong&gt;&lt;code&gt;THROW&lt;/code&gt;&lt;/strong&gt;. &lt;code&gt;THROW&lt;/code&gt; does not require that an error number being thrown exists in sys.messages, so you can raise an exception like so: &lt;code&gt;THROW 50001, ‘OOPS – something happened’, 1&lt;/code&gt;. Notice how you do not define a severity when using &lt;code&gt;THROW&lt;/code&gt;, all exceptions being raised by &lt;code&gt;THROW&lt;/code&gt; has a severity of 16.&lt;/p&gt;

&lt;p&gt;The really great thing with &lt;code&gt;THROW&lt;/code&gt; however is how you can use it like you would use &lt;code&gt;THROW&lt;/code&gt; in other languages. In other words you use use it to re-throw an exception:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'world'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRY&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;c1&quot;&gt;--handle the error&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'here we are handling the error'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;THROW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CATCH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The above code snippet produces this output:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handling&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Msg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8134&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Level&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Divide&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encountered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;I do not know about you, but I think this is fairly cool. I do still want finally blocks and autonomous transactions, but right now I take what I can get.&lt;/p&gt;

&lt;p&gt;As I mentioned in the beginning of this post; I have just installed SQL Server Denali, and have not had time to do much “spelunking”. Stay tuned for more posts in the coming days. You should also check &lt;a href=&quot;http://sqlblogcasts.com/blogs/simons/&quot;&gt;Simon Sabin’s&lt;/a&gt; blog, where he has quite a lot of &lt;a href=&quot;http://sqlblogcasts.com/blogs/simons/archive/2010/11/07/sql-server-denali-whats-new.aspx&quot;&gt;SQL Server Denali coverage&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>More about new features in SQL 11 / Denali</title>
   <link href="http://nielsberglund.com/2010/11/08/more-about-new-features-in-sql-11-denali/"/>
   <updated>2010-11-08T11:27:56+02:00</updated>
   <id>http://nielsberglund.com/2010/11/08/more-about-new-features-in-sql-11-denali</id>
   <content type="html">&lt;p&gt;So yesterday I &lt;a href=&quot;/2010/11/07/what-new-programmability-features-will-there-be-in-sql-11/&quot;&gt;posted&lt;/a&gt; my wish-list for new programmability features in the upcoming release of SQL 11 / Denali.&lt;/p&gt;

&lt;p&gt;Today I see that Simon S has &lt;a href=&quot;http://bit.ly/axonBW&quot;&gt;posted&lt;/a&gt; about a new series of posts he will do, covering what is new in SQL 11. Knowing Simon, it will be really, really good. So if you are interested I suggest you keep your eyes open for his posts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Ben C commented and said that CTP1 has been released (or something to that effect), and &lt;a href=&quot;http://www.microsoft.com/downloads/en/details.aspx?FamilyID=6a04f16f-f6be-4f92-9c92-f7e5677d91f9&quot;&gt;here&lt;/a&gt; is where it can be downloaded from.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What New Programmability Features Will There Be in SQL 11?</title>
   <link href="http://nielsberglund.com/2010/11/07/what-new-programmability-features-will-there-be-in-sql-11/"/>
   <updated>2010-11-07T11:27:56+02:00</updated>
   <id>http://nielsberglund.com/2010/11/07/what-new-programmability-features-will-there-be-in-sql-11</id>
   <content type="html">&lt;p&gt;There is probably no secret that Microsoft is working hard on next version of SQL Server. The rumour has it that it will be named SQL 11 (it apparently goes under the code name of Denali. Quiz; MS has used the Denali code name previously, what was it for? Answers in the comments ).&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;Anyway, the SQL PASS summit is this coming week and another rumour says we might see a CTP being released during the conference. I, for one, cannot wait to see a CTP and see what new features it brings. Which brings me back to this post. If we look at some of the previous releases of SQL we can see that they have had a mixed bag of features for developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL 2005: HUGE; SQLCLR, Service Broker, DDL Events, PIVOT, CTE's, XML, etc., etc.&lt;/li&gt;
&lt;li&gt;SQL 2008: Not so much; the table type and TVP's (which are cool), T-SQL enhancements (cool), some new data types, extended events, but not much more (unless you are a BI guy - which I am not).&lt;/li&gt;
&lt;li&gt;SQL 2008R2: Even less; some enhancements to Service Broker, and StreamInsight, but that is basically it.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, IMHO, it is now time for relational developers to get some love from Microsoft in this release of SQL Server. Seeing that the Christmas is soon upon us here is my wish list to Santa SQL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Autonomous Transactions: Nested transactions are independent.&lt;/li&gt;
&lt;li&gt;Autonomous Transactions: see above (yes, I really, really do want this).&lt;/li&gt;
&lt;li&gt;Enhancements to SQLCLR: I would love to be able to use TVP's in SQLCLR&lt;/li&gt;
&lt;li&gt;Finally blocks: we have had &lt;code&gt;try...catch&lt;/code&gt; since 2005, it is now time to finish this and introduce &lt;code&gt;finally&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Other T-SQL enhancements: I would love to see T-SQL get new features that would make it more like a &quot;real&quot; programming language.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is my wish-list, I wonder how much of this we will see, if any. Post your own wish-lists in the comments please.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Stream and Complex Event Processing from a Relational Guy's Eye</title>
   <link href="http://nielsberglund.com/2010/11/07/stream-and-complex-event-processing-from-a-relational-guys-eye-2/"/>
   <updated>2010-11-07T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2010/11/07/stream-and-complex-event-processing-from-a-relational-guys-eye-2</id>
   <content type="html">&lt;p&gt;This is a re-post from my previous blog. However, as that blog has now gone to the big blog repository in the sky (or wherever blogs go to when they are no more), I decided to repost this, seeing how &lt;strong&gt;CEP&lt;/strong&gt; and &lt;strong&gt;StreamInsight&lt;/strong&gt; are becoming more and more popular.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;This is the first in (hopefully) a series of blog posts where I will be looking into Microsoft's new technology for &lt;strong&gt;Complex Event Processing&lt;/strong&gt; (CEP); &lt;strong&gt;StreamInsight&lt;/strong&gt; (SI). This post is an overview of the problem domain that Microsoft tries to target SI at. As I am a relational database guy at heart, I look at it from a relational guy's perspective.&lt;/p&gt;

&lt;h3&gt;Relational Database Systems&lt;/h3&gt;

&lt;p&gt;The relational database system (&lt;strong&gt;RDBMS&lt;/strong&gt;) is the backbone from almost any enterprise application today, and the various RDBMS's are highly optimized to deliver the best performance available, for its particular type of applications. The particular type of applications a RDBMS is (mostly) optimized for is an application where updates to the data don't happen that frequently (i.e. not like 100,000's of updates per second) and queries against the database are queries against (from what can be described as) a snapshot of the database.&lt;/p&gt;

&lt;p&gt;The last couple of decades we have seen the emergence of types of applications that has somewhat different requirements and characteristics than a typical RDBMS based application. Examples of these type of applications are OLAP, Data Mining as well as storage and querying new data types such as XML, media and spatial. This has required the RDBMS to add new functionality as well as extending existing functionality.&lt;/p&gt;

&lt;h3&gt;Streaming Data&lt;/h3&gt;

&lt;p&gt;The last few years there has been yet another type of data intensive applications arriving on the scene, but these applications has somewhat different requirement's than &quot;just&quot; being able to query &quot;static&quot; data. These are types of applications where data can potentially arrive with very high frequency and we may need to run queries against this data continuously and / or from the arriving data derive new types of data (change the schema of the original data) - which we also may want to run queries against. I am talking about &lt;strong&gt;Stream Data Processing&lt;/strong&gt; (&lt;strong&gt;SDP&lt;/strong&gt;) and &lt;strong&gt;Complex Event Processing&lt;/strong&gt; (&lt;strong&gt;CEP&lt;/strong&gt;) applications.&lt;/p&gt;

&lt;p&gt;The main differences between a typical RDBMS application and a SDP/CEP application are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The data in a SDP/CEP application can be never ending. I.e. the data continuously arrives.&lt;/li&gt;
&lt;li&gt;When we query data in a RDBMS app, we do it against a static snapshot of the data at that particular time.  The data is being evaluated once - and output once.&lt;/li&gt;
&lt;li&gt;Querying against SDP/CEP data however is typically done in a continuous fashion. The data is continuously evaluated and output.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;RDBMS vs. SDP/CEP&lt;/h3&gt;

&lt;p&gt;We can use RDBMS systems for SDP/CEP applications; we load the incoming data into the database and then we run queries continuously against the stored data. This will work OK, but we will run into some issues with it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By storing the data before we query it, we are adding latency as per Figure 1 below.&lt;/li&gt;
&lt;li&gt;We may have to write some convoluted queries in order to be able to querying the data in a continuous manner.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/SI-1.png&quot; width=&quot;325&quot; height=&quot;145&quot;  &gt;
&lt;strong&gt; Figure 1:&lt;/strong&gt; &lt;em&gt;RDBMS's Handling Stream Data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, even if we can use RDBM's for SDP/CEP type applications it is fairly obvious that this may not be the best approach. Hence the rise of another type of management systems for SDP/CEP applications: the &lt;strong&gt;Data Stream Management Systems&lt;/strong&gt; (&lt;strong&gt;DSMS&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;The DSMS systems work under the premises that we have some sort of server (running in memory), which serves up application(s) that handles the incoming data. The incoming data is fed to the application(s) by the use of input adapters. In the application(s) there are continuous queries running over the data from the input adapters. The results of the queries are then being fed to output adapters which serve up the data to applications that need the data. Figure 2 tries to illustrate a DSMS system.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/SI-2.png&quot; width=&quot;500&quot; height=&quot;215&quot;  &gt;
&lt;strong&gt; Figure 2:&lt;/strong&gt; &lt;em&gt;General Overview of DSMS&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dependent on the DSMS system the language of the query may vary. Quite a few systems are using languages that are fairly similar to SQL, whereas SI is using LINQ. As we can see from Figure 2, the main part of the DSMS runs in a low latency environment, and it is only if we need any sort of look-up data loaded from a RDBMS that we may run into high latency issues.&lt;/p&gt;

&lt;h3&gt;Complex Event Processing&lt;/h3&gt;

&lt;p&gt;So what is the difference between processing the streaming data and doing CEP? In CEP we look at the individual events, try to correlate them and look at the impact on a macro-level. A typical example of this (quite a few DSMS systems, are using this as an example) is where we collect sensor signals from cars, let's say each car sends out a signal every 30:th second. This signal contains information about position, speed, road, lane in the road etc. When analyzing these event signals we say that a car-crash has happened if any given car has during 4 consecutive signals the same position and 0 speed. We have analyzed the individual events and from them derived a new event: a &lt;strong&gt;Complex Event&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This was a very rudimentary explanation. To get a fuller (and much better and in-depth) explanation have a look at a series of &lt;a href=&quot;http://www.thecepblog.com/what-is-complex-event-processing/&quot;&gt;blog posts&lt;/a&gt; by &lt;a href=&quot;http://www.thecepblog.com&quot;&gt;Tim Bass&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Finally&lt;/h3&gt;

&lt;p&gt;As mentioned at the very beginning; this was a repost, and in the original post I said that I would in the next instalment write about the architecture of StreamInsight. The blog disappeared before that, but look out for a post shortly here about the architecture.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SQL Server 2008 R2 August CTP</title>
   <link href="http://nielsberglund.com/2009/08/11/sql-server-2008-r2-august-ctp/"/>
   <updated>2009-08-11T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2009/08/11/sql-server-2008-r2-august-ctp</id>
   <content type="html">&lt;p&gt;Yesterday I downloaded and installed the August CTP of SQL Server 2008 R2, and today I played around with it for a while. So, what are my impressions?&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;Well, from a perspective of being a relational dev and internals guy, my immediate response is &quot;yawn - where is the beef?&quot;. I.e., it is not much there, and I doubt we will see much more in coming releases. However, if I were a BI / reporting guy I'd be over the moon, and definitely look forward to future CTP's! Even if I were a (wait for it -) DBA I would be fairly interested.&lt;/p&gt;

&lt;p&gt;I will let you decide for yourself what is interestimg for you, but one thing that is not in the CTP at the moment but is promised (and keeps me interested) is &lt;a href=&quot;http://www.microsoft.com/sqlserver/2008/en/us/R2-complex-event.aspx&quot;&gt;StreamInsight&lt;/a&gt; (based on Complex Event Processing). This will be part of SQL Servr 2008 R2. Coming from the financial industry and dealing with message based applications (that's why I love SQL Server Service Broker), this is something I am really interested in. So, even if you are a T-SQL / internals guy, do not despair - there may be something for us as well.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Twitter</title>
   <link href="http://nielsberglund.com/2009/08/09/twitter/"/>
   <updated>2009-08-09T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2009/08/09/twitter</id>
   <content type="html">&lt;p&gt;As the saying goes; &quot;It is hard to learn an old dog new tricks&quot;, but...  Even though I am a really old dog, I hope I'll be able to learn a bit about &quot;social networking&quot;, and therefore I created an account on Twitter a couple of days ago. Hopefully I'll be able to be more active on Twitter than what I've been here at the blog. Well, that should not be too hard, seeing how infrequent I post here.&lt;/p&gt;

&lt;p&gt;Anyway, my twitter account is &lt;a href=&quot;http://www.twitter.com/nielsberglund&quot;&gt;&lt;strong&gt;@nielsberglund&lt;/strong&gt;&lt;/a&gt;, so if you are interested you know where to go.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging in SQL Server 2008</title>
   <link href="http://nielsberglund.com/2008/07/16/debugging-in-sql-server-2008/"/>
   <updated>2008-07-16T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2008/07/16/debugging-in-sql-server-2008</id>
   <content type="html">&lt;p&gt;As good as SQL 2005 was (well, still are), one disappointment was that you needed Visual Studio if you wanted to debug your stored procedures. Seriously, what was MS thinking when they did that, especially as in SQL 2000, Query Analyzer had debug capabilities?!!&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;Anyway, today I was &lt;del&gt;playing around&lt;/del&gt;, errm - doing serious stuff in the RC0 release of SQL Server 2008, and just by coincidence noticed that there is a debug menu entry in the toolbar (how blind can one be - I must have been looking at that toolbar quite a few times). So I wrote some T-SQL code, put in a couple of breakpoints and hit Alt + F5, and lo and behold - my bp's were hit and I could step through the code. I then wrote a very basic stored proc, wrote some code that called the proc, put a bp at the call into the proc and executed. When the execution stopped at the bp I hit F11 and I stepped into the proc - WoHoo!!! Call me sad, but stuff like this make me happy!!&lt;/p&gt;

&lt;p&gt;Now, let's hope that MS will keep this feature in and not pull it at the last minute - anyone remember the XQuery designer in one of the very early SQL 2005 beta's?&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SQL Server 2005 and DMV's</title>
   <link href="http://nielsberglund.com/2006/08/23/sql-server-2005-and-dmvs/"/>
   <updated>2006-08-23T09:27:56+02:00</updated>
   <id>http://nielsberglund.com/2006/08/23/sql-server-2005-and-dmvs</id>
   <content type="html">&lt;p&gt;One of the first thing I usually do after having installed a new version of SQL Server is to snoop around at the system tables to see what new tables there are and what they can give me information about.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;As you may know by now, in SQL Server 2005 the system tables are not longer visible. The information from the system tables are instead exposed as &lt;strong&gt;Dynamic Management Views&lt;/strong&gt; (DMV). These DMV's gives you a lot of information about the state of your SQL Server, the problem is how to interpret the views and what views to look at when you try to solve a specific problem.&lt;/p&gt;

&lt;p&gt;Fortunately &lt;a href=&quot;http://blogs.msdn.com/slavao&quot;&gt;Slava Ok&lt;/a&gt; from Microsoft is planning to post a series of blog entries about DMV's where he emphasizes on what actual problems the DMV's can be used to solve. The first installment is now up, and you can find it &lt;a href=&quot;http://blogs.msdn.com/slavao/archive/2006/08/22/713357.aspx&quot;&gt;here&lt;/a&gt;. Happy reading!!&lt;/p&gt;
</content>
 </entry>
 

</feed>
