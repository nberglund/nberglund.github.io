<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Niels Berglund</title>
 <link href="http://nielsberglund.com/atom.xml" rel="self"/>
 <link href="http://nielsberglund.com/"/>
 <updated>2017-10-01T18:00:01+02:00</updated>
 <id>http://nielsberglund.com</id>
 <author>
   <name>Niels Berglund</name>
   <email></email>
 </author>

 
 <entry>
   <title>Interesting Stuff - Week 39</title>
   <link href="http://nielsberglund.com/2017/10/01/interesting-stuff-week-39/"/>
   <updated>2017-10-01T17:57:21+02:00</updated>
   <id>http://nielsberglund.com/2017/10/01/interesting-stuff---week-39</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rusanu.com/2017/09/22/identifying-sqlconnection-objects-in-a-dump/&quot;&gt;Identifying SqlConnection objects in a dump&lt;/a&gt;. &lt;a href=&quot;http://rusanu.com/&quot;&gt;Remus Rusanu&lt;/a&gt; is doing cool WinDbg debugging to finding out  ADO.Net connection pool exhaust issues.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/slavao/2017/09/24/what-made-porting-microsoft-sql-server-to-linux-to-be-a-right-move-after-all/&quot;&gt;What made Porting Microsoft SQL Server to Linux to be the right move after all&lt;/a&gt;. Slava Oks writes about Microsoft's &quot;secret sauce&quot;, which made porting SQL Server to Linux possible.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/build-deploy-scalable-machine-learning-production-apache-kafka/&quot;&gt;How to Build and Deploy Scalable Machine Learning in Production with Apache Kafka&lt;/a&gt;. A very interesting post discussing potential use cases for machine learning in real time applications using Apache Kafka and Apache Kafka’s Streams API to build intelligent streaming applications.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://arstechnica.com/gadgets/2017/09/microsoft-quantum-toolkit/&quot;&gt;Microsoft makes play for next wave of computing with quantum computing toolkit&lt;/a&gt;. Wow, just wow!! Microsoft are looking towards quantum computing and have showed off a new quantum computing programming language which will integrate into Visual Studio!!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/09/news-from-ignite.html&quot;&gt;News Roundup from Microsoft Ignite&lt;/a&gt;. Microsoft's Ignite conference took place this week, and the &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; guys posts some data science highlights.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/dataplatforminsider/2017/09/26/in-database-machine-learning-in-sql-server-2017/&quot;&gt;In-database Machine Learning in SQL Server 2017&lt;/a&gt;. At the Ignite conference SQL Server 2017 was &quot;officially&quot; released, and together with it also the Machine Learning Services. This post points out some of the highlights.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/09/25/introducing-microsoft-machine-learning-server-9-2-release/&quot;&gt;Introducing Microsoft Machine Learning Server 9.2 Release&lt;/a&gt;. Microsoft R Server has been transformed into Microsoft Machine Learning Server, and during Ignite version 9.2 was released. This post talks about some of the new features.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 38</title>
   <link href="http://nielsberglund.com/2017/09/24/interesting-stuff-week-38/"/>
   <updated>2017-09-24T09:26:42+02:00</updated>
   <id>http://nielsberglund.com/2017/09/24/interesting-stuff---week-38</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.codecentric.de/en/2017/02/crossing-streams-joins-apache-kafka/&quot;&gt;Crossing the Streams – Joins in Apache Kafka&lt;/a&gt;. Kafka 0.10.1, introduced support for &quot;Interactive Queries&quot;, an API that allows querying stateful stream transformations without going through another Kafka topic. This blogpost looks at how to join streams, and what type of joins that exists.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/disaster-recovery-multi-datacenter-apache-kafka-deployments&quot;&gt;Disaster Recovery for Multi-Datacenter Apache Kafka Deployments&lt;/a&gt;. This post points to a white-paper how to set up Kafka across geo-locations for disaster recovery.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/towards-data-science/how-did-we-build-book-recommender-systems-in-an-hour-the-fundamentals-dfee054f978e&quot;&gt;How Did We Build Book Recommender Systems in an Hour Part 1 — The Fundamentals&lt;/a&gt;. First part of a series how to build a recommender system.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/09/altrep-preview.html&quot;&gt;Preview: ALTREP promises to bring major performance improvements to R&lt;/a&gt;. David from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; talks about changes to the R engine, to improve performance and reduce memory usage.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://becominghuman.ai/cheat-sheets-for-ai-neural-networks-machine-learning-deep-learning-big-data-678c51b4b463&quot;&gt;Cheat Sheets for AI, Neural Networks, Machine Learning, Deep Learning &amp;amp; Big Data&lt;/a&gt;. As the title say, cheat sheets for a lot of things data science.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/09/22/distributed-deep-neural-networks-over-the-cloud-the-edge-and-end-devices/&quot;&gt;Distributed deep neural networks over the cloud, the edge, and end devices&lt;/a&gt;. Adrian from &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;the morning paper&lt;/a&gt; looks at a whitepaper about distributed deep neural networks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/09/hdinsight-tutorial.html&quot;&gt;Tutorial: Launch a Spark and R cluster with HDInsight&lt;/a&gt;. This post by David from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; points to a tutorial how to get up and running with a Spark cluster and R. Cool stuff!!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/09/17/interesting-stuff-week-37/&quot;&gt;last weeks roundup&lt;/a&gt; I mentioned I'd be ready with &lt;strong&gt;Internals - XI&lt;/strong&gt; soon:ish, and it would cover SQL Server R Services internal data transfer protocol &lt;strong&gt;Binary eXchange Language&lt;/strong&gt; (&lt;strong&gt;BXL&lt;/strong&gt;). I will be ready soon:ish with &lt;strong&gt;Internals - XI&lt;/strong&gt;, but it will most likely cover something else than &lt;strong&gt;BXL&lt;/strong&gt;, just so you know :). If you are interested; Internals - X is &lt;a href=&quot;/2017/08/29/microsoft-sql-server-r-services-internals-x/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 37</title>
   <link href="http://nielsberglund.com/2017/09/17/interesting-stuff-week-37/"/>
   <updated>2017-09-17T12:24:24+02:00</updated>
   <id>http://nielsberglund.com/2017/09/17/interesting-stuff---week-37</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/okay-store-data-apache-kafka/&quot;&gt;It’s Okay To Store Data In Apache Kafka&lt;/a&gt;. An interesting post about using Kafka for data storage.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Cloud&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/events-data-points-and-messages-choosing-the-right-azure-messaging-service-for-your-data/&quot;&gt;Events, Data Points, and Messages - Choosing the right Azure messaging service for your data&lt;/a&gt;. For a while the messaging infrastructure of Microsoft Azure has consisted of the Azure Service Bus, and Azure EventHub. Recently Microsoft also introduced Azure EventGrid. In this post Clemens Vasters looks at what service to use when.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/Azure/Azure-Serverless-end-to-end-with-Functions-Logic-Apps-and-Event-Grid/&quot;&gt;Azure Serverless end-to-end with Functions, Logic Apps, and Event Grid&lt;/a&gt;. A &lt;a href=&quot;https://channel9.msdn.com&quot;&gt;Channel 9&lt;/a&gt; video, which gives a brief overview of each of the components of the Serverless story in Azure.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/netflix-deployment-practices&quot;&gt;Zero to Production-Ready in Minutes&lt;/a&gt;. A presentation from &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; about how Netflix is enabling engineers to go from &quot;zero&quot; to &quot;production ready&quot; in minutes.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sql-sasquatch.blogspot.co.za/2017/09/powershell-connection-to-sql-server.html&quot;&gt;PowerShell connection to SQL Server: MARS enabled, pooling disabled&lt;/a&gt;. &lt;a href=&quot;http://sql-sasquatch.blogspot.com&quot;&gt;Lonny&lt;/a&gt; posts about PowerShell, MARS and connection pooling. Cool stuff!!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/09/mro-341-now-available.html&quot;&gt;Microsoft R Open 3.4.1 now available&lt;/a&gt;. David at &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; posts how Microsoft R Open have been upgraded to R version 3.4.1. Let's hope that Microsoft R Server will be upgraded soon too.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/towards-data-science/this-series-is-an-attempt-to-make-neural-networks-understandable-for-people-who-know-nothing-more-df6695b6cd39&quot;&gt;NEURAL NETWORKS DEMYSTIFIED 1: Classification Problems&lt;/a&gt;. First post in a series attempting to make Neural Networks understandable for people who know nothing more than high school math (e.g. myself). I'll follow it with interest!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/rserver/2017/09/12/simplifying-the-use-of-azure-data-science-virtual-machine-with-r/&quot;&gt;Simplifying The Use of Azure Data Science Virtual Machine with R&lt;/a&gt;. This post talks about &lt;a href=&quot;https://github.com/Azure/AzureDSVM&quot;&gt;AzureDSVM&lt;/a&gt;, an R package that makes it possible to directly manage an &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-data-science-provision-vm&quot;&gt;Azure Data Science Virtual Machine&lt;/a&gt; (DSVM).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/towards-data-science/how-to-write-distributed-tensorflow-code-with-an-example-on-tensorport-70bf3306adcb&quot;&gt;How to write distributed TensorFlow code — with an example on TensorPort&lt;/a&gt;. &lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;TensorFlow&lt;/a&gt; is an awesome framework for machine learning, but it is not straightforward to write TensorFlow code in a distributed fashion. This blog-post tries to describe/explain how to how to run distributed TensorFlow.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://buckwoody.wordpress.com/2017/09/14/the-keys-to-effective-data-science-projects-explore-the-data/&quot;&gt;The Keys to Effective Data Science Projects – Explore the Data&lt;/a&gt;. &lt;a href=&quot;https://buckwoody.wordpress.com/&quot;&gt;Buck Woody&lt;/a&gt; continues his &lt;a href=&quot;https://buckwoody.wordpress.com/2017/04/14/the-team-data-science-process/&quot;&gt;The Keys to an Effective Data Science Project&lt;/a&gt; series. This time he looks at how a data scientist should explore the data he works with. Some really useful tips and comments in there.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/simple-talk/sql/bi/sql-server-r-services-basics/&quot;&gt;SQL Server R Services: The Basics&lt;/a&gt;. I am happy to see that there are more people then me writing about SQL Server R Services. This is the first post in a series about SQL Server R Services, written by Robert Sheldon. Quite a lot of cool stuff in there.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Speaking of SQL Server R Services; I have now finished my speaking engagements (for now), and can start writing about SQL Server R Services again. By the end of September I should have &lt;strong&gt;Internals - XI&lt;/strong&gt; ready to publish. In XI I cover the internal data transfer protocol &lt;strong&gt;Binary eXchange Language&lt;/strong&gt; (&lt;strong&gt;BXL&lt;/strong&gt;). If you are interested, &lt;strong&gt;Internals - X&lt;/strong&gt; is &lt;a href=&quot;/2017/08/29/microsoft-sql-server-r-services-internals-x/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 36</title>
   <link href="http://nielsberglund.com/2017/09/10/interesting-stuff-week-36/"/>
   <updated>2017-09-10T08:56:44+02:00</updated>
   <id>http://nielsberglund.com/2017/09/10/interesting-stuff---week-36</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://data-artisans.com/blog/flink-streaming-sql-ksql-stream-processing&quot;&gt;Streaming SQL in Apache Flink, KSQL, and Stream Processing for Everyone&lt;/a&gt;. In last weeks &lt;a href=&quot;/2017/09/03/interesting-stuff-week-35/&quot;&gt;roundup&lt;/a&gt; I mentioned how Apache Kafka now supports querying the data by using &lt;a href=&quot;https://www.confluent.io/blog/ksql-open-source-streaming-sql-for-apache-kafka/&quot;&gt;SQL&lt;/a&gt;. I wondered what impact this would have on Esper and Apache Flink. Sure enough, the post here is a reply from Apache Flink, where they point out all the shortcomings the Kafka SQL has compared to Flink, &quot;meow&quot;! Heh, wait a second while I go and get the cola and the pop-corn, then the fight can begin.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/simplest-useful-kafka-connect-data-pipeline-world-thereabouts-part-3/&quot;&gt;The Simplest Useful Kafka Connect Data Pipeline In The World … or thereabouts—Part 3&lt;/a&gt;. The series how to build a data pipeline using Apache Kafka Connect API continues.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://engineering.skybettingandgaming.com/2017/09/07/trading-on-aws/&quot;&gt;Moving Our Trading Engine to AWS&lt;/a&gt;. A very interesting article how Sky Betting moved their sports-book trading engine to the cloud and started using serverless functions.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/09/04/the-leicester-city-fairytale-utilizing-new-soccer-analytics-tools-to-compare-performance-in-the-1516-and-1617-epl-seasons/&quot;&gt;&quot;The Leicester City fairytale?&quot;: Utilizing new soccer analytics tools to compare performance in the 15/16 and 16/17 EPL seasons&lt;/a&gt;. Adrian from &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;the morning paper&lt;/a&gt; looks at a new data science analytics tool for soccer. As a side note, I so wish I had put down $100 in August 2015 on Leicester winning the 15/16 English Premiership. I would have walked away with ~$500,000!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/towards-data-science/examples-of-applied-data-science-in-healthcare-and-e-commerce-e3b4a77ed306&quot;&gt;How To Apply Data Science To Real Business Problems&lt;/a&gt;. A really interesting article about data science and how it can be used in the &quot;real world&quot;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/09/06/free-microsoft-webinar-on-the-interactive-price-analytics-solution-now-available-in-azure/&quot;&gt;Free Microsoft Webinar on Interactive Price Analytics, Now Available on Azure&lt;/a&gt;. Invitation to a webinar about interactive price analytics. So what's so earth shattering about that, I can do price analytics today using data science? Sure, but this is a much simpler solution, and that's what is being covered at the webinar.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/machinelearning/2017/09/06/how-to-use-cognitive-toolkit-cntk-with-kubernetes-on-azure/&quot;&gt;How to Train &amp;amp; Serve Deep Learning Models at Scale, Using Cognitive Toolkit with Kubernetes on Azure&lt;/a&gt;. This blog post is about how to use Kubernetes clusters for deep learning together with &lt;a href=&quot;https://www.microsoft.com/en-us/cognitive-toolkit/&quot;&gt;Microsoft Cognitive Toolkit&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Shameless Self Promotion&lt;/h2&gt;

&lt;p&gt;As I wrote in last weeks &lt;a href=&quot;/2017/09/03/interesting-stuff-week-35/&quot;&gt;roundup&lt;/a&gt;, we are in the conference season now. I want to thank everyone that came and listed to my ramblings in &lt;a href=&quot;http://www.sqlsaturday.com/648/eventhome.aspx&quot;&gt;Johannesburg&lt;/a&gt;, &lt;a href=&quot;https://www.quicket.co.za/events/33252-sql-in-pe-06-september-2017/#/&quot;&gt;Port Elizabeth&lt;/a&gt;, and &lt;a href=&quot;http://www.sqlsaturday.com/637/eventhome.aspx&quot;&gt;Cape Town&lt;/a&gt;. Much appreciated!! After next weeks SQL Saturday in &lt;a href=&quot;http://www.sqlsaturday.com/659/eventhome.aspx&quot;&gt;Durban&lt;/a&gt;, I am done for a little while, and can hopefully get back to write blog-posts about SQL Server Machine Learning Services again.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 35</title>
   <link href="http://nielsberglund.com/2017/09/03/interesting-stuff-week-35/"/>
   <updated>2017-09-03T19:55:48+02:00</updated>
   <id>http://nielsberglund.com/2017/09/03/interesting-stuff---week-35</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;p&gt;I know, I know - there is not much for this week. A major reason for this is that, here in South Africa, we are in &lt;a href=&quot;http://sqlsaturday.com/&quot;&gt;SQL Saturday&lt;/a&gt; season right now. What has that got to do with anything you may ask - well, it is like this:&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;In April/May (or thereabouts) emails are going out from the organizers asking for submissions to the upcoming SQL Saturday's. At that stage I have some &quot;awesome&quot; ides what to present about, typically some new cool stuff coming - hopefully - just in time for SQL Saturday.&lt;/p&gt;

&lt;p&gt;So, I put together some topics with blurbs what the presentation will be about. Then I promptly forget about this until I receive an email a month, or thereabout, before the &quot;gig&quot; - saying what talks have been accepted. At that stage I am like : &quot;cool, my talk about xyz got accepted, let's see what to cover. Ah well, I have plenty of time ...&quot;.&lt;/p&gt;

&lt;p&gt;Then, all of a sudden it is one week before the first &quot;gig&quot;, and I realize I have nothing prepared yet, so &lt;strong&gt;NOW&lt;/strong&gt; it is time to burn the midnight oil. And that is what I have been doing the last week (and will be next week, and the one after that). The upside of this is that the talks could potentially result in a blog-post or two.&lt;/p&gt;

&lt;p&gt;Anyway, that aside, here is what I have found.&lt;/p&gt;

&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sqlonice.com/fishing-for-wait-types-revisited_query_task_enqueue_mutex/&quot;&gt;Fishing for wait types revisited – QUERY_TASK_ENQUEUE_MUTEX&lt;/a&gt;. &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt; has to eat some &quot;humble pie&quot; when it comes to wait types. This blog-post is awesome from a couple of perspectives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt; is a mere mortal as the rest of us.&lt;/li&gt;
&lt;li&gt;It covers some cool sh*t.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/ksql-open-source-streaming-sql-for-apache-kafka/&quot;&gt;Introducing KSQL: Open Source Streaming SQL for Apache Kafka&lt;/a&gt;. Man, this is sooo awesome! Apache Kafka and SQL! This can be the best thing since sliced bread!!! I wonder what impact this will have on technologies like &lt;a href=&quot;http://www.espertech.com/&quot;&gt;Esper&lt;/a&gt; and even &lt;a href=&quot;https://data-artisans.com/&quot;&gt;Flink&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/blog/machine-learning-based-anomaly-detection-in-azure-stream-analytics/&quot;&gt;Machine Learning-based anomaly detection in Azure Stream Analytics&lt;/a&gt;. Azure Stream Analytics introduces machine learning-based anomaly detection.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-capture-overview&quot;&gt;Azure Event Hubs Capture&lt;/a&gt;. Azure Event Hubs have been the preferred choice in Azure to get data into the cloud. Then, if you wanted to push it further - Azure Data Lake, etc. - you had to either write your own consumer or use Azure Stream Analytics, with an output sink.&lt;/p&gt;

&lt;p&gt;With Azure Event Hubs Capture you can automatically deliver the streaming data in Event Hubs to an Azure Blob storage or Azure Data Lake Store account of your choice, with the added flexibility of specifying a time or size interval. Cool!!!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;SQL Server R Services&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/08/29/microsoft-sql-server-r-services-internals-x/&quot;&gt;Microsoft SQL Server R Services - Internals X&lt;/a&gt;. This episode covers how data is sent from SQL Server to the R components. Initially I had planned &lt;a href=&quot;/2017/08/29/microsoft-sql-server-r-services-internals-x/&quot;&gt;Internals - X&lt;/a&gt; to be the final posting the internals part of the &lt;em&gt;SQL Server R Services&lt;/em&gt; series, but I realize now that I need at least two more parts.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Shameless Self Promotion&lt;/h2&gt;

&lt;p&gt;In the beginning of this post I wrote about how it is SQL Saturday &quot;season&quot; here in South Africa. If you are around, and interested I am talking at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.quicket.co.za/events/33252-sql-in-pe-06-september-2017/#/&quot;&gt;SQL in Port Elizabeth 06 September 2017&lt;/a&gt;. Here I present on

&lt;ul&gt;
&lt;li&gt;Real World Example of Using R in SQL Server&lt;/li&gt;
&lt;li&gt;The Definitive Guide to SQL Server Error Handling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlsaturday.com/637/eventhome.aspx&quot;&gt;SQL Saturday 2017 Cape Town&lt;/a&gt;. My talk here is:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlsaturday.com/637/Sessions/Details.aspx?sid=66538&quot;&gt;Real World Example of Using R in SQL Server&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlsaturday.com/659/eventhome.aspx&quot;&gt;SQL Saturday 2017 Durban&lt;/a&gt;. My talks here are:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlsaturday.com/659/Sessions/Details.aspx?sid=66543&quot;&gt;A Lap Around New Developer Features in SQL Server 2017&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlsaturday.com/659/Sessions/Details.aspx?sid=66542&quot;&gt;Real World Example of Using R in SQL Server&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So please, if you are around - come and say Hi!.&lt;/p&gt;

&lt;p&gt;In addition to the above, I just came home from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlsaturday.com/648/eventhome.aspx&quot;&gt;SQL Saturday 2017 Johannesburg&lt;/a&gt;. Here I presented:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlsaturday.com/648/Sessions/Details.aspx?sid=66531&quot;&gt;A Drill Down into R and Python in SQL Server 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft SQL Server R Services - Internals X</title>
   <link href="http://nielsberglund.com/2017/08/29/microsoft-sql-server-r-services-internals-x/"/>
   <updated>2017-08-29T20:19:14+02:00</updated>
   <id>http://nielsberglund.com/2017/08/29/microsoft-sql-server-r-services---internals-x</id>
   <content type="html">&lt;p&gt;This post is part of a series of blog-posts about Microsoft SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Microsoft SQL Server R Services - Internals III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Microsoft SQL Server R Services - Internals IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Microsoft SQL Server R Services - Internals V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Microsoft SQL Server R Services - Internals VI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;Microsoft SQL Server R Services - Internals VII&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Microsoft SQL Server R Services - Internals VIII&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/08/18/microsoft-sql-server-r-services-internals-ix/&quot;&gt;Microsoft SQL Server R Services - Internals IX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server R Services - Internals X (this post)&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This post is the eleventh post about Microsoft SQL Server R Services, and the tenth post that drills down into the internal of how it works.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/08/18/microsoft-sql-server-r-services-internals-ix/&quot;&gt;Internals - IX&lt;/a&gt; I said we were nearing the end of the internals part is this series, and I had planned this post to be the final post in the Internals part. However while investigating how data is sent between SQL Server and the external components I realized that I would need to probably do two more posts (apart from this) for Internals.&lt;/p&gt;

&lt;p&gt;Anyway, in this post we'll see how data is sent to the R components from SQL Server.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;The &quot;cool&quot; thing by writing all these Internals posts is that as we go along, I learn more things about how it works. For example when I wrote the &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Internals - I&lt;/a&gt;, I was quite confident in how things worked. Today, how I thought it might have worked, is not entirely correct (as we'll see). So, as I said I have learned a lot along the way.&lt;/p&gt;

&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;Since I thought this would be the last Internals post I wanted to do a full recap what has been covered so far. We now know that this is not the last Internals post, but since I have done the work, lets do the full recap anyway even though there will be one or two more posts covering Internals. Since I am lazy, I shamelessly &quot;steal&quot; the recap from &lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Internals - VIII&lt;/a&gt; and add what we've done since then.&lt;/p&gt;

&lt;p&gt;The first post in the series - &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt; - covered the installation of SQL Server 2016 R Services, and it also touched upon the external procedure which allows us to execute external scripts; &lt;code&gt;sp_execute_external_script&lt;/code&gt;. We looked at the signature of the procedure as well as executing the equivalent to a &quot;Hello World&quot; script.&lt;/p&gt;

&lt;p&gt;In the subsequent posts we talked about - when executing &lt;code&gt;sp_execute_external_script&lt;/code&gt; - how SQL Server calls into the launchpad service, and how the launchpad service - through the &lt;code&gt;rlauncher.dll&lt;/code&gt; creates multiple &lt;code&gt;Rterm.exe&lt;/code&gt; processes as in &lt;em&gt;Figure 1&lt;/em&gt; below. One of the processes will be used to run the external script:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad-rterm_processes.png&quot; width=&quot;583&quot; height=&quot;100&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Rterm.exe Processes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I addition to creating &lt;code&gt;Rterm.exe&lt;/code&gt; processes, the launchpad service also creates backing directories for those processes. These backing directories are used for saving output, intermediate results etc. The following figure was used to illustrate what the call flow looks like:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad_processes_post.png&quot; width=&quot;650&quot; height=&quot;466&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Call Flow Executing sp_execute_external_script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We discussed how the number of processes can be controlled by the &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt; setting in &lt;code&gt;rlauncher.config&lt;/code&gt; file, and how it defaults to 5 if nothing is set.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Internals - VI&lt;/a&gt; we came back to the backing directories, and we realized that in addition to the backing directories created for the Rterm processes, one more directory is created. This directory will be the &quot;official&quot; working directory for the session, and we showed this using this figure:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_6_launchpad_working_dir.png&quot; width=&quot;650&quot; height=&quot;433&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Launchpad, Directories and Processes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While we were investigating the directories created in &lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Internals - VI&lt;/a&gt;, we saw that - while we executed an external script, files and sub-directories were created in the various backing directories:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_outputdir.png&quot; width=&quot;579&quot; height=&quot;139&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Contents Process Directory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 4&lt;/em&gt; we see the content of the directory which is the processing directory, and in &lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;Internals - VII&lt;/a&gt; we looked into what creates those files/directories and what they are for. We came to the conclusion that both the launchpad service (probably through the &lt;code&gt;rlauncher.dll&lt;/code&gt;) created some files, whereas &lt;code&gt;Rterm.exe&lt;/code&gt; created others.&lt;/p&gt;

&lt;p&gt;So far in the series we have covered what happens up until the Rterm process is created. In &lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Internals - VIII&lt;/a&gt; we saw how &lt;code&gt;Rterm.exe&lt;/code&gt; was the entry point into R and how Rterm loaded the &lt;code&gt;R.dll&lt;/code&gt; and &lt;code&gt;RxLink.dll&lt;/code&gt;. RxLink acts as a conduit between the open source R and Microsoft's &lt;code&gt;BxlServer.exe&lt;/code&gt;. BxlServer is the executable hosting RevoScaleR, and it also coordinates with the R runtime in order to manage exchanges of data with SQL Server. To help with data exchanges with SQL Server, BxlServer loads &lt;code&gt;BxServerLink.dll&lt;/code&gt;, who does a lot of data conversions etc. We illustrated all this with following figure:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_arch_overview.png&quot; width=&quot;650&quot; height=&quot;194&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;BxlServer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/08/18/microsoft-sql-server-r-services-internals-ix/&quot;&gt;Internals - IX&lt;/a&gt; we tried to determine what communication mechanisms are used between the various components, and what components are involved to return data to SQL Server. We saw that in addition to BxlServer and BxServerLink we also had &lt;code&gt;SqlSatellite.dll&lt;/code&gt;. SqlSatellite is an API to support external code and external run times, and it is the dll that BxlServer relies on in order to exchange data with SQL Server.&lt;/p&gt;

&lt;p&gt;We eventually figured out how communication takes place between the various components and we used the figure below to illustrate the comms mechanisms:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_comms2.png&quot; width=&quot;650&quot; height=&quot;228&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;How Communication Happens&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So in &lt;em&gt;Figure 6&lt;/em&gt; we see a high level view of the architecture, and the numbers denotes the comm mechanisms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 - named pipe.&lt;/li&gt;
&lt;li&gt;2 - IOCP.&lt;/li&gt;
&lt;li&gt;3 - named pipe.&lt;/li&gt;
&lt;li&gt;4 - TCP/IP&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By now we have a certain understanding how it works, and we do know that the SqlSatellite communicates with SQL Server. I this post we'll look a little bit deeper into what is happening.&lt;/p&gt;

&lt;h2&gt;Demo Code&lt;/h2&gt;

&lt;p&gt;As in quite a few of the other posts, let's have a look at the demo code we'll be using. In this post we'll re-use what we had in &lt;a href=&quot;/2017/08/18/microsoft-sql-server-r-services-internals-ix/&quot;&gt;Internals - IX&lt;/a&gt;. First the code to setup the database, and a table with some data:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Setup&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_1M&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_1M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RowID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                          &lt;span class=&quot;n&quot;&gt;rand1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                          &lt;span class=&quot;n&quot;&gt;rand4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_1M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Setup of Database, Table and Data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The code we'll use to execute:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execute from SQL Server&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;          &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             #Sys.sleep(10)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             pid &amp;lt;- Sys.getpid()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             d &amp;lt;- getwd()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(paste0(&quot;ProcessId: &quot;, pid))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(paste0(&quot;WorkDir: &quot;, d))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             r &amp;lt;- rxLinMod(y ~ rand1 + rand2 + rand3 + rand4 + rand5,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                           data=InputDataSet)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             coef &amp;lt;- r$coefficients
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             icept &amp;lt;- coef&lt;a href=&quot;https://en.wikipedia.org/wiki/Tabular_Data_Stream&quot;&gt;1&lt;/a&gt;;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             OutputDataSet &amp;lt;- data.frame(pid=pid, nRows=r$nValidObs,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                          intercept=icept)'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;       &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              SELECT y, rand1, rand2, rand3,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      rand4, rand5
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              FROM dbo.rand_1M'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BIGINT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BIGINT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                   &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLOAT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Code to Execute&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Even though the code in &lt;em&gt;Code Snippet 2&lt;/em&gt; doesn't do very much, it serves it's purposes for what we want to do. Notice that we can pause the execution thought the commented out &lt;code&gt;Sys.sleep&lt;/code&gt; statement, if we want to examine what is happening.&lt;/p&gt;

&lt;h2&gt;Data Transfer/Exchange&lt;/h2&gt;

&lt;p&gt;We know by now (at least after &lt;a href=&quot;/2017/08/18/microsoft-sql-server-r-services-internals-ix/&quot;&gt;Internals - IX&lt;/a&gt;) that the SqlSatellite has something to do with data exchange. In addition we also know that the launchpad service (in reality &lt;code&gt;rlauncher.dll&lt;/code&gt;) talks to R, and can potentially transfer data. So the question is who transfers data, and what data is transferred by who? If you look at the code in &lt;em&gt;Code Snippet 2&lt;/em&gt;, there are various data transfers happening:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The R script is sent to R.&lt;/li&gt;
&lt;li&gt;A dataset is sent in to R trough the &lt;code&gt;@input_data_1&lt;/code&gt; parameter.&lt;/li&gt;
&lt;li&gt;Variables (&lt;code&gt;pid&lt;/code&gt; and &lt;code&gt;d&lt;/code&gt;)  are printed through the &lt;code&gt;cat&lt;/code&gt; statement.&lt;/li&gt;
&lt;li&gt;A dataset is returned from the &lt;code&gt;OutputDataSet&lt;/code&gt; variable. The schema of the resultset is defined in &lt;code&gt;WITH RESULT SETS ...&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In addition to the scenarios above, parameters are also transferred (both in and out), but for now we'll leave those out of the discussion.&lt;/p&gt;

&lt;p&gt;So, cast you mind back to &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Internals - I&lt;/a&gt; and &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Internals - II&lt;/a&gt; (&quot;woooosh&quot; - that's the sound of your mind being cast back), where we discussed what happens when we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;. We said that, SQL Server's &lt;code&gt;sqllang!SpExecuteExternalScript&lt;/code&gt; is called, and SQL Server then opens a named pipe connection to the launchpad service and sends a data packet to the service. The launchpad service creates the necessary processes (RTerm) etc., and sends the data packet it received on tho the executing process. The assumption made, at least implicitly,  was that all the necessary data is transferred to the R engine via the packets SQL Server sends to the launchpad service and that the launchpad sends it on. For return data the assumption was that the data is returned the same way. That's what I thought up until &lt;a href=&quot;/2017/08/18/microsoft-sql-server-r-services-internals-ix/&quot;&gt;Internals - IX&lt;/a&gt; when we discussed the SqlSatellite. So, let's see what really happens.&lt;/p&gt;

&lt;h4&gt;Data -&gt; R&lt;/h4&gt;

&lt;p&gt;To see how data is sent to R, let's fire up our trusted &lt;strong&gt;WinDbg&lt;/strong&gt; an attach it to both the SQL Server process as well as the launchpad process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Restart SQL Server and the launchpad service (just to start afresh).&lt;/li&gt;
&lt;li&gt;Attach WinDbg (as admin) to the two processes (one WinDbg instance each).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now we can set some break-points for both SQL Server as well as the launchpad process, and the break-points we set are some of the ones we have used in previous posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL Server: &lt;code&gt;sqllang!SpExecuteExternalScript&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SQL Server: &lt;code&gt;sqllang!CSQLSatelliteConnection::OpenNpConnection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SQL Server: &lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SQL Server: &lt;code&gt;sqllang!CUDXR_ExternalScript::ConnectToSatellite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Launchpad: &lt;code&gt;launchpad!Np::AcceptConnection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Launchpad: &lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Launchpad: &lt;code&gt;launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Launchpad: &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The code we'll use initially is not what we see in &lt;em&gt;Code Snippet 2&lt;/em&gt;, but something very, very basic:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Code&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Sys.sleep(30)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                 d&amp;lt;-42'&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Basic External Script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The reason for using simple code like in &lt;em&gt;Code Snippet 3&lt;/em&gt;, is that it might make it easier to understand what is happening, and we can compare with what is happening when executing some other, not so basic, code. Notice how in &lt;em&gt;Code Snippet 3&lt;/em&gt; there is a &lt;code&gt;Sys.sleep&lt;/code&gt;. It is there to make it easier to determine - when debugging - when data is sent to R and when data is coming back.&lt;/p&gt;

&lt;p&gt;We can now go ahead and execute the code in &lt;em&gt;Code Snippet 3&lt;/em&gt;, and what we will see is how we break in following order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sqllang!SpExecuteExternalScript&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::OpenNpConnection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::AcceptConnection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; - notice how nothing happens in the SQL process until &lt;code&gt;WriteMessage&lt;/code&gt; is executed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CUDXR_ExternalScript::ConnectToSatellite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pause for &lt;code&gt;Sys.sleep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;For now we won't bother over what happens after the &lt;code&gt;Sys.sleep&lt;/code&gt;, but we can see some behaviors that might make us doubt that we have been entirely correct in our previous assumptions how data is sent to the R engine. I am thinking about some of the &lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; who doesn't have a corresponding launchpad action.&lt;/p&gt;

&lt;p&gt;Let us see what happens if we were to execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt;. Before you execute the code, change the &lt;code&gt;SELECT y ...&lt;/code&gt; statement to be &lt;code&gt;SELECT TOP(10) y ...&lt;/code&gt;. When you execute you will see a third &lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; before the &lt;code&gt;Sys.sleep&lt;/code&gt;. After the &lt;code&gt;Sys.sleep&lt;/code&gt; there'd be a third &lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; and a second  &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;. What happens if the &lt;code&gt;TOP&lt;/code&gt; clause was changed to be &lt;code&gt;TOP(100000)&lt;/code&gt; (hundred thousand)? Then there'd be 5 &lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; after &lt;code&gt;ConnectToSatellite&lt;/code&gt; and the rest would stay the same. Based on this, there seems to be some impact based on how much data is being transferred, and it seems that the launchpad service is bypassed for at least some data transfer (as we don't see any extra &lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;So if the launchpad service is being bypassed, what would be used to transfer data? Seeing that we discussed SqlSatellite in &lt;a href=&quot;/2017/08/18/microsoft-sql-server-r-services-internals-ix/&quot;&gt;Internals - IX&lt;/a&gt;, and also mentioned SqlSatellite above, that might be the answer. Unfortunately we have no debug symbols for SqlSatellite or its host &lt;code&gt;BxlServer.exe&lt;/code&gt;, so we cannot use WinDbg to check and see if we are correct. What we'll do instead is to take advantage of the fact that SqlSatellite communicates with SQL Server using sockets, and we'll use &lt;a href=&quot;https://technet.microsoft.com/en-us/sysinternals/processmonitor.aspx&quot;&gt;&lt;strong&gt;Process Monitor&lt;/strong&gt;&lt;/a&gt;, to see if we can find any interesting things.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; We used &lt;em&gt;Process Monitor&lt;/em&gt; in &lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;Internals - VII&lt;/a&gt;, so go back there if you need pointers of how to use &lt;em&gt;Process Monitor&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;After you have started up Process Monitor as admin, suppress any event monitoring to start with, as not too be flooded with events. You should also just choose to see event types you are interested in, in this case &quot;Network Activity&quot;. You can do this through the icons in the tool bar, as per below:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_10_procmon1.png&quot; width=&quot;422&quot; height=&quot;108&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; &lt;em&gt;Communication Mechanisms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 7&lt;/em&gt; we see how event capturing is paused due to having clicked on the magnifying glass (in the first outlined box). We also have chosen to receive only &quot;Network Activity&quot; events (the second outlined box). You can see that &quot;Network Activity&quot; is enabled as it has a barely visible light-blue background, and the others do not. Having set this up, now is a good time to clear out any events that might have been captured, so under the &lt;em&gt;Edit&lt;/em&gt; menu click &lt;em&gt;Clear Display&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So what are we going to use &lt;em&gt;Process Monitor&lt;/em&gt; for? Well, as I mentioned above, there is socket communication between SQL Server and SqlSatellite, so we'll try and capture that particular traffic. In order to do this, we'll set up some &lt;em&gt;Process Monitor&lt;/em&gt; event filters, the same way as we did in &lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;Internals - VII&lt;/a&gt;. The filters we'll setup are for &quot;Process Name&quot; and &quot;Operation&quot;. The process we initially are interested in is &lt;code&gt;BxlServer.exe&lt;/code&gt;, since BxlServer hosts the SqlSatellite. The operations we want are &quot;TCP Connect&quot; and &quot;TCP Receive&quot;. The idea is that we will be able to see when a connection is made between SQL Server and the SqlSatellite and if there is any data sent to the satellite from SQL Server.&lt;/p&gt;

&lt;p&gt;To set the filter; under the &lt;em&gt;Filter&lt;/em&gt; menu click the Filter menu item, and the &quot;Process Monitor Filter&quot; dialog will be shown. To create the filter we enter the conditions we want to match:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;Process Name&lt;/em&gt; (from first drop down) should be  &lt;em&gt;is&lt;/em&gt; (from second drop down): &lt;code&gt;bxlserver.exe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Operation&lt;/em&gt; (first drop down) &lt;em&gt;is&lt;/em&gt; (second drop down): &quot;TCP Connect&quot;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Operation&lt;/em&gt; (first drop down) &lt;em&gt;is&lt;/em&gt; (second drop down): &quot;TCP Receive&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The conditions should be included and added, and when you are done the filter dialog should look something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_10_procmon_filter1_created.png&quot; width=&quot;378&quot; height=&quot;208&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;Filters BxlServer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What the filter says is that any &quot;TCP Connect&quot;, or &quot;TCP Receive&quot; events for &lt;code&gt;bxlserver.exe&lt;/code&gt; should be monitored and displayed. Oh, and the only three filter criteria active (green check-mark) should be the top three ones. When you have clicked &quot;OK&quot; out of the dialog box, we are ready to test this out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensure that you still are attached with the two WinDbg instances to SQL Server and the launchpad processes.&lt;/li&gt;
&lt;li&gt;It my be a good idea to in WinDbg clean out the command window (&lt;code&gt;.cls&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For this test we'll use the code in &lt;em&gt;Code Snippet 3&lt;/em&gt;, just so we can get something of a baseline. When you execute the code, look at what is happening in the two WinDbg instances as well as in &lt;em&gt;Process Monitor&lt;/em&gt;. The flow of the events are something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sqllang!SpExecuteExternalScript&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::OpenNpConnection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::AcceptConnection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TCP Connect&lt;/li&gt;
&lt;li&gt;TCP Receive&lt;/li&gt;
&lt;li&gt;TCP Receive&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CUDXR_ExternalScript::ConnectToSatellite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TCP Receive&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TCP Receive&lt;/li&gt;
&lt;li&gt;Pause for &lt;code&gt;Sys.sleep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TCP Receive&lt;/li&gt;
&lt;li&gt;TCP Receive&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!Np::ReadAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The output in &lt;em&gt;Process Monitor&lt;/em&gt; looks like so (I have truncated the &lt;code&gt;Path&lt;/code&gt; and &lt;code&gt;Detail&lt;/code&gt; columns somewhat):&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_10_procmon_output1.png&quot; width=&quot;652&quot; height=&quot;210&quot;  &gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; &lt;em&gt;Process Monitor Base Output&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From what we can see, the three first TCP events happens while we connect. The fourth happens after a &lt;code&gt;WriteMessage&lt;/code&gt;, and the fifth after the second &lt;code&gt;WriteMessage&lt;/code&gt; before &lt;code&gt;Sys.sleep&lt;/code&gt;. The remainders we don't care about right now, as we'll look at them when we investigate how data is returned to SQL Server. At this stage we cannot say for sure what happens, and what the different packages are for - but we can definitely see that data is being sent to SqlSatellite from SQL Server.&lt;/p&gt;

&lt;p&gt;OK, so let's try with some other code:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Other Code&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;&lt;br/&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  Sys.sleep(10)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  pid &amp;lt;- Sys.getpid()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  d &amp;lt;- getwd()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  cat(paste0(&quot;ProcessId: &quot;, pid))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  cat(paste0(&quot;WorkDir: &quot;, d))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)'&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;Longer R Script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is not much difference between what we execute in &lt;em&gt;Code Snippet 3&lt;/em&gt; and this code in &lt;em&gt;Code Snippet 4&lt;/em&gt;, except for the &lt;em&gt;Code Snippet 4&lt;/em&gt; script being longer. Will size matter; let's look at what happens in WinDbg and the output from &lt;em&gt;Process Monitor&lt;/em&gt; after we have executed the code in &lt;em&gt;Code Snippet 4&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_10_procmon_output2.png&quot; width=&quot;650&quot; height=&quot;216&quot;  &gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; &lt;em&gt;Process Monitor Output Longer Script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The flow in WinDbg did not change at all, and the same amount of packages were sent. However, the fourth event (packet), following &lt;code&gt;sqllang!CUDXR_ExternalScript::ConnectToSatellite&lt;/code&gt; and &lt;code&gt;sqllang!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; has a different size (870 vs. 204), as can be seen in &lt;em&gt;Figure 10&lt;/em&gt;. Hmm, this would certainly indicate that the script to execute is sent over the socket connection to SqlSatellite, and not via the named pipe connection to the launchpad service. What about data going to the R engine? Based on what we saw when we executed the code in &lt;em&gt;Code Snippet 2&lt;/em&gt; with a &lt;code&gt;SELECT TOP(100000) y ...&lt;/code&gt; (multiple &lt;code&gt;WriteMessage&lt;/code&gt; calls) we can probably safely assume that the data is also sent over the TCP connection. Just to ensure this really is the case we can test it out. We'll change the code slightly, once again to have something to compare it to:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Code&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Sys.sleep(30)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                 d&amp;lt;-42'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;               &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              SELECT TOP(1) y, rand1, rand2, rand3,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      rand4, rand5
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              FROM dbo.rand_1M'&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;External Script with Data Select&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The output from &lt;em&gt;Process Monitor&lt;/em&gt; looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_10_procmon_output3.png&quot; width=&quot;648&quot; height=&quot;241&quot;  &gt;
&lt;strong&gt;Figure 11:&lt;/strong&gt; &lt;em&gt;Process Monitor Output Data Select&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is strange, the R script we executed here is exactly the same as in &lt;em&gt;Code Snippet 3&lt;/em&gt;, but the packet size is different (350 vs. 204), and we also have a new packet sent to the SqlSatellite with a size of 6300. Let's start with the last portion first; the packet with the size of 6300.&lt;/p&gt;

&lt;p&gt;This packet actually contains the data sent to the SqlSatellite (the data represented by the  &lt;code&gt;@input_data_1&lt;/code&gt; variable). Normally when SQL transfers data it is done via the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tabular_Data_Stream&quot;&gt;TDS protocol&lt;/a&gt; (Tabular Data Stream). However when sending data to and from the SqlSatellite, TDS is not used, but a custom protocol called &lt;strong&gt;BXL&lt;/strong&gt; (Binary eXchange Language). The BXL protocol is optimized for fast data transfers between SQL Server and external script engines.&lt;/p&gt;

&lt;p&gt;In the next blog-post in this series, we'll look more at the BXL protocol, and why you see a packet size of 6300, when we only retrieve one row, with six &lt;code&gt;int&lt;/code&gt; columns.&lt;/p&gt;

&lt;p&gt;Let us look at the first question; why is the packet size different when the R script is exactly the same. To try to figure this out, we'll use a packet analyzer:  &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;&lt;strong&gt;WireShark&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you are running SSMS and SQL Server on the same machine, then you need the &lt;a href=&quot;https://nmap.org/npcap/&quot;&gt;&lt;strong&gt;Npcap&lt;/strong&gt;&lt;/a&gt; packet sniffer library instead of the default &lt;strong&gt;WinPcap&lt;/strong&gt;. This is because WinPcap doesn't support loop-back adapters.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;At this stage you don't need the WinDbg breakpoints, so just disable all the breakpoints, both for SQL Server as well as the launchpad process. Also take note of the port SQL Server listens on for the satellite connection. We need the port number to filter events in WireShark, and we can get the port number by running &lt;code&gt;netstat -o -a -n&lt;/code&gt; or look at the &lt;code&gt;Path&lt;/code&gt; column in &lt;em&gt;Process Monitor&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_10_procmon_output_port.png&quot; width=&quot;344&quot; height=&quot;161&quot;  &gt;
&lt;strong&gt;Figure 12:&lt;/strong&gt; &lt;em&gt;Get Port Number from Path&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Equipped with the port number, it is time to set up &lt;em&gt;WireShark&lt;/em&gt; for packet sniffing. Start &lt;em&gt;WireShark&lt;/em&gt; as admin and on the opening screen double click the &quot;Npcap Loopback Adapter&quot;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_10_wireshark1.png&quot; width=&quot;500&quot; height=&quot;303&quot;  &gt;
&lt;strong&gt;Figure 13:&lt;/strong&gt; &lt;em&gt;WireShark&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That will now immediately start capturing events:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_10_wireshark2.png&quot; width=&quot;405&quot; height=&quot;219&quot;  &gt;
&lt;strong&gt;Figure 14:&lt;/strong&gt; &lt;em&gt;WireShark Events&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Capturing can be stopped by clicking &lt;strong&gt;Ctrl + E&lt;/strong&gt;, or click on the red square in &lt;em&gt;Figure 14&lt;/em&gt; to the right of the grayed-out shark fin in the tool-bar. What we want to do now is to create a &lt;em&gt;WireShark&lt;/em&gt; display filter, so we only see network packets we are interested in. The filter we'll set is a filter showing only packets originating from the SQL Server's listening port, as in &lt;em&gt;Figure 12&lt;/em&gt; above. You set the filter in the text box just underneath the toolbox, and the filter you use is &lt;code&gt;tcp.srcport==port_number&lt;/code&gt;, you then apply it by clicking on the right arrow to the right the filter box:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_10_wireshark_display_filter.png&quot; width=&quot;523&quot; height=&quot;148&quot;  &gt;
&lt;strong&gt;Figure 15:&lt;/strong&gt; &lt;em&gt;WireShark Display Filter&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 15&lt;/em&gt;, I set the filter to be &lt;code&gt;tcp.srcport==50755&lt;/code&gt;, and then I applied the filter by clicking the arrow. To start using this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clear the &lt;em&gt;Process Monitor&lt;/em&gt; display, and make sure you are capturing events.&lt;/li&gt;
&lt;li&gt;Start &lt;em&gt;WireShark&lt;/em&gt; capturing (Ctrl+E). If you get a question whether you want to save the captured packets, just click &quot;Continue without Saving&quot;.&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 3&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The &lt;em&gt;Process Monitor&lt;/em&gt; output looks almost the same as in &lt;em&gt;Figure 9&lt;/em&gt;, whereas the &lt;em&gt;WireShark&lt;/em&gt; output looks like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_10_wireshark_output1.png&quot; width=&quot;650&quot; height=&quot;332&quot;  &gt;
&lt;strong&gt;Figure 16:&lt;/strong&gt; &lt;em&gt;WireShark Captured Packets&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;WireShark&lt;/em&gt; has captured the various packets sent from SQL Server, and we can see the same packages in &lt;em&gt;WireShark&lt;/em&gt; as in &lt;em&gt;ProcessMonitor&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Actually &lt;em&gt;WireShark&lt;/em&gt; has a couple of more packets, as &lt;em&gt;ProcessMonitor&lt;/em&gt; doesn't show some of the &lt;code&gt;ACK&lt;/code&gt; packets.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The packet we are interested in is the one that is outlined in red in &lt;em&gt;Figure 16&lt;/em&gt;, with a length of 204. Click on it and in the lower pane in &lt;em&gt;WireShark&lt;/em&gt; (the packet bytes pane) you will see the data of the packet in a hex-dump style, and on the right hand side the corresponding ASCII text translation:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_10_wireshark_output2.png&quot; width=&quot;534&quot; height=&quot;252&quot;  &gt;
&lt;strong&gt;Figure 17:&lt;/strong&gt; &lt;em&gt;WireShark Hex-dump&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The interesting part in &lt;em&gt;Figure 17&lt;/em&gt; is the ASCII text translation (outlined in red) where we see something that is somewhat readable, and parts of it looks suspiciously like our script. I copied out the ASCII translation (File | Export Packet Dissections | As Plain Text), and this is what it looked like:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Packet&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;.........q&lt;span class=&quot;s1&quot;&gt;'.Nz.F
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;....z/CN........
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;......I.n.p.u.t.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;D.a.t.a.S.e.t...
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..O.u.t.p.u.t.D.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;a.t.a.S.e.t...0.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..0.............
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..E.x.p.r.1.0.0.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;0...B.....S.y.s.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..s.l.e.e.p.(.1.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;0.).;. ..... . .
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; . . . . . . . .
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;d.&amp;lt;.-.4.2...&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 6:&lt;/strong&gt; &lt;em&gt;WireShark Packet ASCII Text&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 6&lt;/em&gt; we see how our script (&lt;code&gt;S.y.s...s.l.e.e.p.(.1.0.).;. ..... . . . . . . . . . .d.&amp;lt;.-.4.2...&lt;/code&gt;) is actually sent to the SqlSatellite. What is then the part of the text saying &lt;code&gt;E.x.p.r.1.0.0.0...B&lt;/code&gt;, and why is the length of the packet sent to SqlSatellite different between &lt;em&gt;Code Snippet 3&lt;/em&gt; and &lt;em&gt;Code Snippet 5&lt;/em&gt;, when the script is the same?&lt;/p&gt;

&lt;p&gt;Start a new capture in &lt;em&gt;WireShark&lt;/em&gt; and execute the code in &lt;em&gt;Code Snippet 5&lt;/em&gt;. After you have executed, choose the packet in &lt;em&gt;WireShark&lt;/em&gt; with a length of 350, and look at the ASCII text. In &lt;em&gt;Code Snippet 7&lt;/em&gt; below, we see what it looks like on my machine after I did it:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Packet 2&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;....^....pq&amp;amp;U..A
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..8..N+A........
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;......I.n.p.u.t.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;D.a.t.a.S.e.t...
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..O.u.t.p.u.t.D.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;a.t.a.S.e.t.....
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;................
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..y.............
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..........r.a.n.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;d.1.............
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..........r.a.n.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;d.2.............
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..........r.a.n.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;d.3.............
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..........r.a.n.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;d.4.............
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..........r.a.n.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;d.5...B.....S.y.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;s...s.l.e.e.p.&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;1.0.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;. ..... . .
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; . . . . . . . .
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; .d.&amp;lt;.-.4.2...&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 7:&lt;/strong&gt; &lt;em&gt;WireShark Packet with Input Data ASCII Text&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we see in &lt;em&gt;Code Snippet 7&lt;/em&gt;, part of what is sent to the SqlSatellite is also the actual column names/variables for the script.&lt;/p&gt;

&lt;p&gt;Finally what we'll do is to see how a script which expects a resultset coming back, is sent to the SqlSatellite. For this we'll use the code in &lt;em&gt;Code Snippet 8&lt;/em&gt; below:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Input Output&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;            &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;            &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Sys.sleep(10)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;               d&amp;lt;-42
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;               OutputDataSet&amp;lt;-InputDataSet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;            &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 42 as col1,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                             666 AS col2'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TheAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TheDevil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 8:&lt;/strong&gt; &lt;em&gt;Script with Resultset&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The code in &lt;em&gt;Code Snippet 8&lt;/em&gt;, sends in two columns &lt;code&gt;col1&lt;/code&gt; and &lt;code&gt;col2&lt;/code&gt; and we expect a resultset back with two columns; &lt;code&gt;TheAnswer&lt;/code&gt; and &lt;code&gt;TheDevil&lt;/code&gt;. After having executed the code, and looking at the captured packet in &lt;em&gt;WireShark&lt;/em&gt; we see something looking like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Packet 3&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;........:......M
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;...K..B.........
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;......I.n.p.u.t.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;D.a.t.a.S.e.t...
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..O.u.t.p.u.t.D.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;a.t.a.S.e.t...8.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..8.............
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..c.o.l.1...8...
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;8...............
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;c.o.l.2...8...8.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..............T.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;h.e.A.n.s.w.e.r.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;..8...8.........
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;......T.h.e.D.e.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;v.i.l.........S.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;y.s...s.l.e.e.p.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.1.0.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;..... . .
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; . . . . . . . .
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; . . . . . . . .
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; . . . . .d.&amp;lt;.-.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;4.2..... . . . .
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; . . . . . . . .
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; . . . . . . . .
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; . . .O.u.t.p.u.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;t.D.a.t.a.S.e.t.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&amp;lt;.-.I.n.p.u.t.D.
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;a.t.a.S.e.t...&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 9:&lt;/strong&gt; &lt;em&gt;WireShark Packet for Input and Output&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 9&lt;/em&gt; we see how we are sending to the SqlSatellite, in addition the the script and the input data column names, also the output data columns.&lt;/p&gt;

&lt;p&gt;By now it should be clear that SQL Server uses the SqlSatellite socket connection to send both the external script to execute as well as the actual data to the satellite. In following posts we will look at the BXL protocol used to send data to the satellite, and also how data is sent back to SQL Server.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;From previous posts we knew that SQL Server communicates with the launchpad service over named pipes. We also know that there is communication between SQL Server and the SqlSatellite over sockets. We may have assumed that data was sent from SQL Server to the R components through the named pipe connection to the launchpad service, and the on from there to the R components.&lt;/p&gt;

&lt;p&gt;In this post we have seen how that is not true, but how both the script to execute including some metadata, as well as the actual data to use for analysis (&lt;code&gt;@input_data_1&lt;/code&gt;) is sent over the socket connection.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 34</title>
   <link href="http://nielsberglund.com/2017/08/27/interesting-stuff-week-34/"/>
   <updated>2017-08-27T21:30:24+02:00</updated>
   <id>http://nielsberglund.com/2017/08/27/interesting-stuff---week-34</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/dmv-diaries-sys-dm_os_workers/&quot;&gt;The DMV Diaries: sys.dm_os_workers&lt;/a&gt;. &quot;Dear diary, today this worker approached me, what should I do?&quot;. &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt; continues his DMV journey. &lt;strong&gt;MUST READ!!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://daviddawson.me/blog/2017/07/10/styles-of-event-architecture.html&quot;&gt;Styles of Event Architecture&lt;/a&gt;. Discussion about event architectures when building distributed systems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://daviddawson.me/blog/2017/08/13/build-reactive-polyglot-muon.html&quot;&gt;Building Reactive Microservices using Muon and scaling them using Kafka, Cassandra and friends&lt;/a&gt;. More about event architectures.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/08/22/javascript-for-extending-low-latency-in-memory-key-value-stores/&quot;&gt;JavaScript for extending low-latency in-memory key-value stores&lt;/a&gt;. &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;Adrian&lt;/a&gt; looks at a white-paper about how to use java script for a low latency compute engine. Hmm, java script and low latency???&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/data-track-ignite.html&quot;&gt;Highlights of the Data Science Track at Microsoft Ignite&lt;/a&gt;. The &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; guys, points out quite interesting topics at &lt;a href=&quot;https://www.microsoft.com/en-us/ignite/default.aspx&quot;&gt;Microsoft Ignite&lt;/a&gt; in September.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/towards-data-science/introduction-to-recurrent-neural-network-27202c3945f3&quot;&gt;Introduction to Recurrent Neural Network&lt;/a&gt;. A very, very interesting post about the use of &lt;em&gt;Recurrent Neural Network&lt;/em&gt;'s for analysis of sequences. I wonder if this could be used for real-time data?!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/query-editor-tips.html&quot;&gt;Tips and tricks on using R to query data in Power BI&lt;/a&gt;. Some ideas about hoe to use R for querying data in Power BI.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;I am almost done with &lt;em&gt;Internals - X&lt;/em&gt; in the &lt;strong&gt;SQL Server 2016 R Services&lt;/strong&gt; series. I had hoped to be able to publish it earlier today, but I found some &lt;em&gt;weird&lt;/em&gt; &quot;stuff&quot; regarding data sent to the SqlSatellite from SQL Server, and I want to see if I can find out what's going on with that. So, expect &lt;em&gt;Internals - X&lt;/em&gt; to be published some time next week. If you are interested in the previous &quot;episodes&quot; they can be found &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 33</title>
   <link href="http://nielsberglund.com/2017/08/20/interesting-stuff-week-33/"/>
   <updated>2017-08-20T20:25:44+02:00</updated>
   <id>http://nielsberglund.com/2017/08/20/interesting-stuff---week-33</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;.NET&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/&quot;&gt;Announcing .NET Core 2.0&lt;/a&gt;. Well, not much to add - .NET Core 2.0 final has been released!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://adamsitnik.com/Disassembly-Diagnoser/&quot;&gt;Disassembling .NET Code with BenchmarkDotNet&lt;/a&gt;. &lt;a href=&quot;http://adamsitnik.com/about/&quot;&gt;Adam&lt;/a&gt; has enhanced &lt;a href=&quot;https://github.com/dotnet/BenchmarkDotNet&quot;&gt;BenchmarkDotNet&lt;/a&gt; to also disassemble the .NET code that is benchmarked.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/dmv-diaries-sys-dm_os_threads/&quot;&gt;The DMV Diaries: sys.dm_os_threads&lt;/a&gt;. So while &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt; is on a &lt;a href=&quot;http://sqlonice.com/footsteps-of-cooperative-wait/&quot;&gt;threads and tasks journey&lt;/a&gt;, he also peeks into the diaries of DMV's. This is the first, in hopefully many to come posts about the guts of DMV's. I have said it before, and I say it again; &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald's&lt;/a&gt; blog is a &lt;strong&gt;MUST&lt;/strong&gt; read if you are interested in the inner workings of SQL Server! What are you waiting for - go ahead and read it!!!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Azure/Cloud&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/services/event-grid/&quot;&gt;Event Grid&lt;/a&gt;. This is so &quot;freaking&quot; awesome, so there are no words for it! A single service for managing routing of all events from any source to any destination. Designed for high availability, consistent performance, and dynamic scale! I so &lt;strong&gt;have to&lt;/strong&gt; &lt;del&gt;play with it&lt;/del&gt; research this!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/08/17/on-the-design-of-distributed-programming-models/&quot;&gt;On the design of distributed programming models&lt;/a&gt;. Is there a need for a programming model for distributed computing? &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;Adrian&lt;/a&gt; dissects a white paper making the case for it.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;p&gt;It's been a while since I have had any coverage of &lt;strong&gt;Apache Kafka&lt;/strong&gt; and / or &lt;strong&gt;Apache Flink&lt;/strong&gt;. Fortunately that changes today!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://data-artisans.com/blog/flink-forward-berlin-preview-apache-flink-internals-sessions&quot;&gt;Flink Forward Berlin Preview: Apache Flink Internals Sessions&lt;/a&gt;. A preview of what is to come at the &lt;a href=&quot;https://berlin.flink-forward.org/&quot;&gt;Flink Forward&lt;/a&gt; conference in Berlin September 11 - 13. All I can say is that I hope there will be video recordings available after the conference, as it looks awesome!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/apache-kafka-for-service-architectures/&quot;&gt;Using Apache Kafka as a Scalable, Event-Driven Backbone for Service Architectures&lt;/a&gt;. A practical guide to building event driven systems using Apache Kafka as the message broker.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/leveraging-power-database-unbundled/&quot;&gt;Leveraging the Power of a Database ‘Unbundled’&lt;/a&gt;. &quot;Hello my name is Niels, and I am a database guy!&quot;. That's me; but this, this is &quot;absofreakinglutely&quot; awesome! I am right now installing Docker so I can download Kafka containers onto my Windows machine and start playing with this!!!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/image-featurizer.html&quot;&gt;How to build an image recognizer in R using just a few images&lt;/a&gt;. The boys at &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; talks about how to build your own image recognizer using the new &lt;strong&gt;Image Featurizer&lt;/strong&gt; capabilities of Microsoft R Server. Go forth and read, this is cool!!!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://buckwoody.wordpress.com/2017/08/17/a-data-science-microsoft-project-template-you-can-use-in-your-solutions/&quot;&gt;A Data Science Microsoft Project Template You Can Use in Your Solutions&lt;/a&gt;. &lt;a href=&quot;https://buckwoody.wordpress.com/&quot;&gt;Buck Woody&lt;/a&gt; blogs about a Microsoft Project template for Data Science built on top of the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/machine-learning/data-science-process-overview&quot;&gt;Microsoft Team Data Science Process&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/20-years-of-the-r-core-group.html&quot;&gt;20 years of the R Core Group&lt;/a&gt;. The &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; guys points out that it was 20 year since the R Core Group was established. Happy Birthday!!!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/08/18/microsoft-sql-server-r-services-internals-ix/&quot;&gt;Microsoft SQL Server R Services - Internals IX&lt;/a&gt;. I published &quot;episode&quot; nine of the SQL Server R Services Internals &quot;saga&quot;. Here we look at what communication methods are being used between the various components in play when we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft SQL Server R Services - Internals IX</title>
   <link href="http://nielsberglund.com/2017/08/18/microsoft-sql-server-r-services-internals-ix/"/>
   <updated>2017-08-18T17:44:22+02:00</updated>
   <id>http://nielsberglund.com/2017/08/18/microsoft-sql-server-r-services---internals-ix</id>
   <content type="html">&lt;p&gt;This post is part of a series of blog-posts about Microsoft SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Microsoft SQL Server R Services - Internals III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Microsoft SQL Server R Services - Internals IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Microsoft SQL Server R Services - Internals V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Microsoft SQL Server R Services - Internals VI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;Microsoft SQL Server R Services - Internals VII&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Microsoft SQL Server R Services - Internals VIII&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server R Services - Internals IX (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/08/29/microsoft-sql-server-r-services-internals-x/&quot;&gt;Microsoft SQL Server R Services - Internals X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This post is the tenth post about Microsoft SQL Server R Services, and the ninth post that drills down into the internal of how it works.&lt;/p&gt;

&lt;p&gt;We are now nearing the end of the Internals part of this series (you probably say &quot;about time&quot;). When I started this series way back in March this year, I thought that the Internals would be two, maximum three episodes. Boy was I wrong!&lt;/p&gt;

&lt;p&gt;In this post we'll look at how the various components are communicating with each other.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Internals - VIII&lt;/a&gt; we looked at what different components are involved when we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL Server calls into the launchpad service.&lt;/li&gt;
&lt;li&gt;The launchpad service calls into the &lt;code&gt;Rlauncher.dll&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Rlauncher.dll&lt;/code&gt; creates Rterm processes.&lt;/li&gt;
&lt;li&gt;Through Rterm, the &lt;code&gt;R.dll&lt;/code&gt; is loaded together with &lt;code&gt;RxLink.dll&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;RxLink.dll&lt;/code&gt; creates the &lt;code&gt;BxlServer.exe&lt;/code&gt; process.&lt;/li&gt;
&lt;li&gt;To coordinate with SQL Server, &lt;code&gt;BxlServer.exe&lt;/code&gt; loads &lt;code&gt;BxServerLink.dll&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The above can be illustrated as in &lt;em&gt;Figure 1&lt;/em&gt; below&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_arch_overview.png&quot; width=&quot;650&quot; height=&quot;194&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Components In Play&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The questions are though how the components are communicating and what is involved in getting back to SQL Server after &lt;code&gt;BxlServer.exe&lt;/code&gt; and &lt;code&gt;BxServerLink.dll&lt;/code&gt; have done their &quot;magic&quot;?&lt;/p&gt;

&lt;h2&gt;Demo Code&lt;/h2&gt;

&lt;p&gt;Before we drill into the questions above, let's look at the demo code we'll use. Let's start with setting up the database and a table with some data we can use. All in all 1 million rows:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Setup&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_1M&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_1M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RowID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                          &lt;span class=&quot;n&quot;&gt;rand1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                          &lt;span class=&quot;n&quot;&gt;rand5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_1M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Setup of Database, Table and Data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The data is more or less the same data we used in &lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Internals - V&lt;/a&gt;, and the code to execute looks also almost the same:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execute from SQL Server&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;          &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             #Sys.sleep(10)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             pid &amp;lt;- Sys.getpid()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             d &amp;lt;- getwd()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(paste0(&quot;ProcessId: &quot;, pid))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(paste0(&quot;WorkDir: &quot;, d))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             r &amp;lt;- rxLinMod(y ~ rand1 + rand2 + rand3 + rand4 + rand5,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                           data=InputDataSet)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             coef &amp;lt;- r$coefficients
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             icept &amp;lt;- coef&lt;a href=&quot;&quot;&gt;1&lt;/a&gt;;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             OutputDataSet &amp;lt;- data.frame(pid=pid, nRows=r$nValidObs,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                          intercept=icept)'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;       &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              SELECT y, rand1, rand2, rand3,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      rand4, rand5
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              FROM dbo.rand_10M'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BIGINT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BIGINT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                   &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLOAT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Code to Execute&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 2&lt;/em&gt; we see how we read in data from the statement in the &lt;code&gt;@input_data_1&lt;/code&gt; parameter. The actual R code retrieves the process id and work directory and assigns them to the &lt;code&gt;pid&lt;/code&gt; and  &lt;code&gt;d&lt;/code&gt; variables which then are printed out through the &lt;code&gt;cat&lt;/code&gt; statements. After a model has been created in &lt;code&gt;rxLinMod&lt;/code&gt; some information about the model is returned as a resultset from the &lt;code&gt;OutputDataSet&lt;/code&gt; variable. The schema of the resultset is defined in &lt;code&gt;WITH RESULT SETS ...&lt;/code&gt;. For us to be able to determine what is happening when executing the code, there is a &lt;code&gt;Sys.sleep&lt;/code&gt; statement, which for now is commented out. Before we go any further, let's make sure it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restart the launchpad service (stop and start).&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If everything has worked OK, the Results tab in SSMS should look something like in &lt;em&gt;Figure 2&lt;/em&gt;, and the Message tab like in &lt;em&gt;Figure 3&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_test_result.png&quot; width=&quot;355&quot; height=&quot;80&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Results from Running the Code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_test_msgs.png&quot; width=&quot;610&quot; height=&quot;216&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Message Output from Running the Code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we know that the execution of the R code happens outside of SQL Server, the question is what component(s) are responsible for returning results and messages to SQL Server. Before looking at that, let's look at how communication happens between the various components.&lt;/p&gt;

&lt;h2&gt;Communication&lt;/h2&gt;

&lt;p&gt;The components we are interested in the communication between are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL Server -&gt; Launchpad&lt;/li&gt;
&lt;li&gt;launchpad -&gt; Rterm&lt;/li&gt;
&lt;li&gt;Rterm -&gt; BxlServer&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;SQL Server -&gt; Launchpad&lt;/h4&gt;

&lt;p&gt;So, let's start with the communication between SQL Server and the launchpad service. In &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Internals - I&lt;/a&gt; and &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Internals - II&lt;/a&gt; we used WinDbg and we saw how SQL Server calls (among other things) &lt;code&gt;sqllang!CSQLSatelliteConnection::OpenNpConnection&lt;/code&gt; to create and open a named pipe to the launchpad service. Let us make double sure that there really is named pipe involved, and the way we'll do that is by using &lt;strong&gt;WinDbg&lt;/strong&gt; and &lt;a href=&quot;https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx&quot;&gt;&lt;strong&gt;Process Explorer&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we'll do is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restart SQL Server and the launchpad service (please, do not do this on a production server :) ).&lt;/li&gt;
&lt;li&gt;Start WinDbg and Process Explorer as admin.&lt;/li&gt;
&lt;li&gt;In Process Explorer, ensure that the lower pane is visible (Ctrl + L).&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;To begin we'll see what named pipes SQL Server has created &quot;out of the box&quot; so to speak. Named pipes are exposed as handles in Process Explorer, so by clicking on the &lt;code&gt;sqlserver.exe&lt;/code&gt; process in Process Explorer and then Ctrl + H you should see handles in the lower pane. By ordering on name and scrolling down to &lt;code&gt;Device\Named&lt;/code&gt; pipe, you should see something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_sql_named_pipes1.png&quot; width=&quot;350&quot; height=&quot;143&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;SQL Server Initial Named Pipes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we see in &lt;em&gt;Figure 4&lt;/em&gt;, we have (at least on my machine) six named pipes. There is nothing that would indicate a named pipe to the launchpad service.&lt;/p&gt;

&lt;p&gt;Now you can go on and see what named pipes (if any) the launchpad service (&lt;code&gt;launchpad.exe&lt;/code&gt;) has. On my machine it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_launchpad_named_pipes1.png&quot; width=&quot;351&quot; height=&quot;55&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Launchpad Named Pipes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hmm, that is interesting - there are two named pipes with a name similar to what we have seen in previous posts: &lt;em&gt;sqlsatellite&lt;/em&gt;. However, since the launchpad service is inactive right now, it seems those two named pipes are not connected to anything.&lt;/p&gt;

&lt;p&gt;So far we do not have any evidence of named pipes between SQL Server and the launchpad service, but on the other hand we have not executed anything yet either (since the restart). Let us now go on and execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt; again, but before we do that let us do what we did in &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Internals - I&lt;/a&gt; and set a breakpoint at &lt;code&gt;sqllang!CSQLSatelliteConnection::OpenNpConnection&lt;/code&gt;. So attach WinDbg to the &lt;code&gt;sqlserver.exe&lt;/code&gt; process and set the breakpoint.&lt;/p&gt;

&lt;p&gt;Before you execute the code, uncomment the &lt;code&gt;Sys.sleep&lt;/code&gt; call and change the time to sleep to 30 seconds (&lt;code&gt;Sys.sleep(30)&lt;/code&gt;), so you can investigate what is happening. Now, go ahead and execute.&lt;/p&gt;

&lt;p&gt;The breakpoint is hit and execution stops. Look in Process Explorer and see what named pipes there are both for SQL Server as well as the launchpad service. At this stage there should not be any more named pipes than what you see in &lt;em&gt;Figure 4&lt;/em&gt; and &lt;em&gt;Figure 5&lt;/em&gt;. Continue execution of the code, and look again in Process Explorer. You should now see for SQL Server something like in &lt;em&gt;Figure 6&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_sql_named_pipes2.png&quot; width=&quot;350&quot; height=&quot;124&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;SQL Server Named Pipes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the launchpad service it looks something like &lt;em&gt;Figure 7&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_launchpad_named_pipes2.png&quot; width=&quot;354&quot; height=&quot;49&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; &lt;em&gt;Launchpad Named Pipes During Execution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We see now how for SQL Server we have a new named pipe: &lt;code&gt;\Device\NamedPipe\sqlsatellitelaunch&lt;/code&gt;, and for the launchpad service a corresponding additional named pipe: &lt;code&gt;\Device\NamedPipe\sqlsatellitelaunch&lt;/code&gt;. By now we should be fairly certain that communication between SQL Server and the launchpad service is through named pipes.&lt;/p&gt;

&lt;h4&gt;Launchpad -&gt; Rterm&lt;/h4&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The heading above is somewhat misleading as it is not &lt;code&gt;Launchpad.exe&lt;/code&gt; that connects to Rterm but &lt;code&gt;Rlauncher.dll&lt;/code&gt;, however we'll use launchpad for now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When I started writing this section, I thought: &quot;how hard can this be, the launchpad service obviously talks to Rterm via named pipes&quot;. It turned out to be not that simple. The way I went about &quot;proving&quot; (or not) that named pipes were used was similar to what we did above between SQL Server and the launchpad service, but initially I didn't use WinDbg:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restart SQL Server and the launchpad service.&lt;/li&gt;
&lt;li&gt;Make sure Process Explorer is up and running.&lt;/li&gt;
&lt;li&gt;Set a sufficiently high &lt;code&gt;Sys.sleep&lt;/code&gt; value in the code (I ended up using 120 seconds).&lt;/li&gt;
&lt;li&gt;Execute the code.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When I at this stage looked at the handles for the launchpad service, I saw the three named pipes we saw in &lt;em&gt;Figure 7&lt;/em&gt;. That would make sense, we know that one of them is the named pipe connection from SQL Server, and then one of the other two would be used between the launchpad service and Rterm.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; When using named pipes, and you look at them in Process Explorer, you should see the same name in both source as well as destination.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The problem was that I did not see a named pipe in the executing Rterm process, with the same name as in the launchpad service. Hmm, there went that theory. Well, if named pipes are not used, what about TCP/IP and sockets? So I noted the PID of the launchpad service, executed the code again, and while the code was running I (from command line) used &lt;code&gt;netstat&lt;/code&gt; to see what socket connections there were. The command I used was &lt;code&gt;netstat -a -n -o&lt;/code&gt;, which means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;show all connections and listening ports (&lt;code&gt;-a&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;display addresses and port numbers in in numerical form (&lt;code&gt;-n&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;display the owning PID associated with each connection (&lt;code&gt;-o&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I looked for the PID of the launchpad service to see if there were any connections, but none could be found. Now the original question of &quot;how hard can this be&quot; had an answer - &quot;actually, pretty hard&quot;! At this stage I resorted to some WinDbg &lt;a href=&quot;&quot;&gt;&quot;spelunking&quot;&lt;/a&gt;, and looked for &quot;promising&quot; routine names. Seeing that a lot of the routines we have seen so far in this series comes from classes with &quot;satellite&quot; in them I executed: &lt;code&gt;x *!*satellite*&lt;/code&gt;. Eish, that returned a &lt;strong&gt;lot&lt;/strong&gt;. However, while scrolling through the output, I came across following routine: &lt;code&gt;launchpad!CSQLSatelliteConnection::AddProviderDoneIOCPCallback&lt;/code&gt;. Hmm, something that has to do with callback from &lt;code&gt;IOCP&lt;/code&gt;, could it be that the launchpad service connects via IO Completion Ports (IOCP)? Only one way to find out - set some breakpoints in WinDbg.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Internals - II&lt;/a&gt; where we discussed what happens inside the launchpad service, we had a diagram of the flow of a call looking like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad-r-post.png&quot; width=&quot;650&quot; height=&quot;325&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;Launchpad Service Call Flow&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 8&lt;/em&gt; we see how the communication to Rterm is done in the &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; call, so the setup of the IOCP should be done before the &lt;code&gt;WriteMessage&lt;/code&gt; call, and most likely after the &lt;code&gt;LaunchServTask&lt;/code&gt; call. So in the already attached WinDbg, I set three breakpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!CLaunchContext::LaunchServTask&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bp KERNELBASE!CreateIoCompletionPort&lt;/code&gt; (I had read documentation of IOCP and saw that this was a likely call).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If my theory was to be correct, I would see the execution first stop at &lt;code&gt;LaunchServTask&lt;/code&gt;, followed by &lt;code&gt;CreateIoCompletionPort&lt;/code&gt; and then finally at &lt;code&gt;WriteMessage&lt;/code&gt;. I executed the code in &lt;em&gt;Code Snippet 2&lt;/em&gt; with &lt;code&gt;Sys.sleep(10)&lt;/code&gt; and this is what I saw in WinDbg:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Breakpoints&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLaunchContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchServTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateIoCompletionPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Launchpad Breakpoints being Hit&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This to me indicates that yes, IOCP is being used as communication mechanism between the launchpad service and Rterm.&lt;/p&gt;

&lt;h4&gt;Rterm -&gt; BxlServer&lt;/h4&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Internals - VIII&lt;/a&gt; we spoke about &lt;code&gt;BxlServer.exe&lt;/code&gt;, how it hosts RevoScaleR code and how it also coordinates with the R runtime in order to manage exchanges of data with SQL Server. The &lt;code&gt;BxlServer.exe&lt;/code&gt; process is created by the Rterm process via the &lt;code&gt;RxLink.dll&lt;/code&gt; which acts as a conduit. The source code for &lt;code&gt;RxLink.dll&lt;/code&gt; is &lt;a href=&quot;https://packages.revolutionanalytics.com/tools/src/rre-gpl-src.8.0.3.tar.gz&quot;&gt;available&lt;/a&gt;, and when I had a look at the source, I saw quite a lot of code related to named pipes. So my assumption is that communication between the Rterm process (via &lt;code&gt;RxLink.dll&lt;/code&gt;) and the BxlServer process happens through named pipes.&lt;/p&gt;

&lt;p&gt;Seeing that I don't have any debug symbols for &lt;code&gt;Rterm.exe&lt;/code&gt;, &lt;code&gt;R.dll&lt;/code&gt;, &lt;code&gt;RxLink.dll&lt;/code&gt; or &lt;code&gt;BxlServer.exe&lt;/code&gt; we'll try and use other methods to prove (or disprove) that named pipes are used. The way we'll do it is to use Process Explorer as we did with the communication between SQL Server and the launchpad service. Now is probably a good time to restart both the SQL Server service as well as the launchpad service (just to start afresh).&lt;/p&gt;

&lt;p&gt;After the SQL Server and the launchpad service has been restarted bring back Process Explorer again (as admin). This time though we'll look at the Rterm process and the hosted BxlServer process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In Process Explorer navigate to the launchpad process.&lt;/li&gt;
&lt;li&gt;Set big enough &lt;code&gt;Sys.sleep&lt;/code&gt; value in the code. 90 seconds worked fine for me.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When executing the code, look in Process Explorer for the Rterm process and BxlServer process where you have a &lt;code&gt;CPU&lt;/code&gt; value greater than 0:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_rterm_bxlserver.png&quot; width=&quot;360&quot; height=&quot;309&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;Rterm and BxlServer Processes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 8&lt;/em&gt; we see the Rterm and BxlServer processes that are active. When you have found the active processes check if there are any named pipe handles for those two processes (Ctrl+H):&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_rterm_nps.png&quot; width=&quot;313&quot; height=&quot;33&quot;  &gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; &lt;em&gt;Rterm Named Pipes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_bxlserver_nps.png&quot; width=&quot;315&quot; height=&quot;36&quot;  &gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; &lt;em&gt;BxlServer Named Pipes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 9&lt;/em&gt; and &lt;em&gt;Figure 10&lt;/em&gt; show the named pipes file handles for the Rterm process (&lt;em&gt;Figure 9&lt;/em&gt;), and BxlServer process (&lt;em&gt;Figure 10&lt;/em&gt;). As we can, the same named pipes exists in both processes (they have the same names), so we can with some certainty say that communication between Rterm and BxlServer is done via named pipes. With this in mind we can enhance &lt;em&gt;Figure 1&lt;/em&gt; and show the communication mechanisms:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_comms1.png&quot; width=&quot;650&quot; height=&quot;193&quot;  &gt;
&lt;strong&gt;Figure 11:&lt;/strong&gt; &lt;em&gt;Communication Mechanisms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 11&lt;/em&gt; the numbers indicate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 - named pipe.&lt;/li&gt;
&lt;li&gt;2 - IOCP.&lt;/li&gt;
&lt;li&gt;3 - named pipe.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SqlSatellite&lt;/h2&gt;

&lt;p&gt;Now, we've seen how the various components are communicating with each other, but - how is data exchanged? E.g, how does a resultset get back to SQL Server, and does the print (&lt;code&gt;cat&lt;/code&gt;) statements travel back the same way? In &lt;em&gt;Figure 11&lt;/em&gt; wee see how the BxlServer is doing &quot;stuff&quot; and then interacts with BxServerLink, but it kind of stops there. Surely a dataset like in our code wouldn't go back over the IOCP? Would there be any other components in play? Let's see what we can find out.&lt;/p&gt;

&lt;p&gt;Once again use the Process Explorer, but now we are interested in what dll's the BxlServer loads while it's running. Execute the code again, and when you have found the &quot;active&quot; BxlServer process do a Ctrl+D to find the loaded dlls, and see what &quot;pops up&quot;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_sqlsatellite.png&quot; width=&quot;620&quot; height=&quot;78&quot;  &gt;
&lt;strong&gt;Figure 12:&lt;/strong&gt; &lt;em&gt;SqlSatellite.dll&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we look at the various dll's that are loaded by BxlServer we come across a name we have seen and briefly mentioned before: &lt;code&gt;SqlSatellite.dll&lt;/code&gt;. In Internals &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;II&lt;/a&gt;, &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;III&lt;/a&gt; and &lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;VII&lt;/a&gt; we saw how paths were set, pointing to where the &lt;code&gt;sqlsatellite.dll&lt;/code&gt; is located. In &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; we also mentioned how SqlSatellite is an API to support external code and external run times. It is loaded by the BxlServer process and it handles data transfers between SQL Server and external languages (in this case R).&lt;/p&gt;

&lt;h4&gt;Communication&lt;/h4&gt;

&lt;p&gt;Now we have an idea who handles data exchange (at least some of it), but what mechanism is used? Named pipes could be an option, and we saw in SQL Server that named pipe: &lt;code&gt;\Device\NamedPipe\sqlsatellitelaunch&lt;/code&gt;. However, that pipe is used by SQL Server for communication with the launchpad service, and there were really no other named pipes that seemed to fit in. How about sockets and TCP/IP? That could be an option, let's see.&lt;/p&gt;

&lt;p&gt;Once again, do a restart of SQL Server as well as the launchpad service to make sure we are in a clean state. Make a note of the process id (PID) of SQL Server, well use it to see what socket connections SQL Server has. If Process Explorer is not running, start it up as admin. When SQL Server is restarted check what TCP connections we have by running the &lt;code&gt;netstat -a -n -o -p TCP&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Netstat&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1434&lt;/span&gt;         &lt;span class=&quot;mf&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;LISTENING&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2900&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52637&lt;/span&gt;        &lt;span class=&quot;mf&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;LISTENING&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2900&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;TCP Connections SQL Server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The PID for SQL Server after I restarted was 2900, and from &lt;em&gt;Code Snippet 4&lt;/em&gt; we can see two listening connections, with no source as of yet. The listener for port 1434 is for the SQL Server Browser Service, whereas port 52637 is something of a mystery. Let's now execute our code and see if anything changes (I set &lt;code&gt;Sys.sleep&lt;/code&gt; to 90 seconds to make sure I had enough time to see what happens). While the code is executing run &lt;code&gt;netstat -a -n -o -p TCP -b&lt;/code&gt; (&lt;code&gt;-b&lt;/code&gt; will display the executable involved in creating the connection). When I executed the code and ran the netstat command I saw the following:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Netstat&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1434&lt;/span&gt;         &lt;span class=&quot;mf&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;LISTENING&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2900&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlservr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52637&lt;/span&gt;        &lt;span class=&quot;mf&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;LISTENING&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2900&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlservr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52637&lt;/span&gt;        &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64511&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ESTABLISHED&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;2900&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlservr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64511&lt;/span&gt;        &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52637&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ESTABLISHED&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;8088&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BxlServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;TCP Connections SQL Server while Executing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That is interesting! From &lt;em&gt;Code Snippet 5&lt;/em&gt; we see how SQL Server now has an established TCP connection on port 52637, and the connection originates from PID 8088. That PID is &lt;code&gt;BxlServer.exe&lt;/code&gt;, and - as we know from earlier - &lt;code&gt;BxlServer.exe&lt;/code&gt; loads &lt;code&gt;SqlSatellite.dll&lt;/code&gt;. We now have a TCP/IP connection from SqlSatellite to SQL Server, and it is over that connection data is exchanged.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Not all data is exchanged over the TCP/IP socket connection, as we will see in next post.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Finally, let's do some more WinDbg &quot;spelunking&quot; in order to understand how and when the TCP connection is established:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restart SQL Server and the launchpad service, to clean things up.&lt;/li&gt;
&lt;li&gt;Attach WinDbg to the SQL Server process&lt;/li&gt;
&lt;li&gt;Browse symbols with the name TCP&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When browsing for the symbols, you can use this command: &lt;code&gt;x /1 *!TCP*&lt;/code&gt;. By using the option &lt;code&gt;/1&lt;/code&gt; you'll only see the names, and no addresses. On my machine that gives me quite a lot, but there are two entries that catch my eye: &lt;code&gt;sqllang!Tcp::AcceptConnection&lt;/code&gt; and &lt;code&gt;sqllang!Tcp::Close&lt;/code&gt;. So let us set breakpoints at those two symbols, and see what happens when we execute our code.&lt;/p&gt;

&lt;p&gt;The result when executing the code is that we initially break at &lt;code&gt;sqllang!Tcp::AcceptConnection&lt;/code&gt;. Followed somewhat later by breaking at &lt;code&gt;sqllang!Tcp::Close&lt;/code&gt;. Cool, this seems to work - let us set some more breakpoints and try to figure out the flow of events.&lt;/p&gt;

&lt;p&gt;To be able to see the flow, we need to involve the launchpad service as well, as it is that service who &quot;spins up&quot; the Rterm process who in turn creates the BxlServer process who loads BxServerLink as well as SqlSatellite. So, remember from &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; what the code looked like (from a very high level) to create the executing Rterm processes, it was something like this:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Flow&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessForSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhysicalUserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessInternalW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satellite_ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcessToJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteCommunication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendResumeWithLoginInfo&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMessage&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 6:&lt;/strong&gt; &lt;em&gt;Launchpad Code Flow&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As discussed in &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Internal - II&lt;/a&gt; and &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;, when an external script is executed 6 different Rterm processes are &quot;spun&quot; up, bit only one will be the executing process, and the code in &lt;em&gt;Code Snippet 6&lt;/em&gt; illustrates the code creating the executing Rterm process.&lt;/p&gt;

&lt;p&gt;With this in mind, let us:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Delete any sub folders of the user account folders in the &lt;code&gt;C:\&amp;lt;path_to_sql_server_instance&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do &lt;strong&gt;NOT&lt;/strong&gt; delete the user account folders themselves.&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;li&gt;Attach WinDbg to the launchpad process.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Set breakpoints in the attached launchpad process at (make sure that the SQL Server breakpoints are enabled):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!SatelliteJobObject::AssociateProcess&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What we now want to do is to run the two WinDbg instances side by side and see when the individual breakpoints are hit, and in what order. Before we begin, clear out the WinDbg command output (&lt;code&gt;.cls&lt;/code&gt;). Execute the code and look closely at what happens in the two WinDbg instances.&lt;/p&gt;

&lt;p&gt;What I see on my machine is that I break two or three times in launchpad at &lt;code&gt;launchpad!SatelliteJobObject::AssociateProcess&lt;/code&gt;, and after the second or third break, I break at &lt;code&gt;sqllang!Tcp::AcceptConnection&lt;/code&gt; in SQL Server. That is followed by &lt;code&gt;launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo&lt;/code&gt; and &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;, plus more &lt;code&gt;launchpad!SatelliteJobObject::AssociateProcess&lt;/code&gt;. After a while I receive two more &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; in the launchpad service and a &lt;code&gt;sqllang!Tcp::Close&lt;/code&gt; in SQL Server.&lt;/p&gt;

&lt;p&gt;The conclusion I draw from this is that after the executing Rterm process has been created (and BxlServer, BxLinkServer and SqlSatellite), SqlSatellite connects into SQL Server.&lt;/p&gt;

&lt;p&gt;You may notice that the &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; breakpoint will be hit a couple of times after the SQL Server &lt;code&gt;sqllang!Tcp::AcceptConnection&lt;/code&gt;. We'll discuss that in the next Internals blogpost.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post we set out trying to determine what communication mechanisms there are between the various components interacting when &lt;code&gt;sp_execute_external_script&lt;/code&gt; is called. We also saw how a &quot;new&quot; component &lt;code&gt;sqlsatellite.dll&lt;/code&gt; is in the mix, and in the next blogpost in the Internals series we'll look more in detail what it does.&lt;/p&gt;

&lt;p&gt;So, &lt;em&gt;Figure 13&lt;/em&gt; below illustrates quite well the communication mechanisms between the various components:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_comms2.png&quot; width=&quot;650&quot; height=&quot;228&quot;  &gt;
&lt;strong&gt;Figure 13:&lt;/strong&gt; &lt;em&gt;How Communication Happens&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The figure looks quite like &lt;em&gt;Figure 11&lt;/em&gt; and the numbers indicate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 - named pipe.&lt;/li&gt;
&lt;li&gt;2 - IOCP.&lt;/li&gt;
&lt;li&gt;3 - named pipe.&lt;/li&gt;
&lt;li&gt;4 - TCP/IP&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 32</title>
   <link href="http://nielsberglund.com/2017/08/13/interesting-stuff-week-32/"/>
   <updated>2017-08-13T20:12:03+02:00</updated>
   <id>http://nielsberglund.com/2017/08/13/interesting-stuff---week-32</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://philcalcado.com/microservices-patterns.html&quot;&gt;Patterns of Microservices Architecture&lt;/a&gt;. &lt;a href=&quot;https://twitter.com/pcalcado&quot;&gt;Phil Calcado&lt;/a&gt; is an expert on microservices architecture. The post I am pointing to contains links to articles about patterns in microservices architecture.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/towards-data-science/selling-analytics-to-your-stakeholders-3e516cd6cc2b&quot;&gt;Selling Analytics to your Stakeholders&lt;/a&gt;. If you are a data scientist, or a data nerd in general, or a manager - this article is a &lt;strong&gt;MUST&lt;/strong&gt; read. Enough said!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/tutorial-sqlrutils.html&quot;&gt;Tutorial: Publish an R function as a SQL Server stored procedure with the sqlrutils package&lt;/a&gt;. &quot;Aw schucks, blush&quot; - the guys at &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revlution Analytics&lt;/a&gt; points to a &lt;a href=&quot;/2017/06/25/creating-r-stored-procedures-in-sql-server-2016-using-sqlrutils/&quot;&gt;blog-post&lt;/a&gt; of mine, how to use the &lt;code&gt;sqlrutils&lt;/code&gt; package to create SQL Server stored procedures from R code. Thanks guys!!!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/rserver/2017/08/07/using-microsoft-r-server-operationalization-on-hdinsight/&quot;&gt;Using Microsoft R Server Operationalization on HDInsight&lt;/a&gt;. Microsoft R Server has an awesome operationalization story! This blog-post talks about how to do it on HDInsight!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The guys at &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; have really been busy the last week. Apart from the post above about &lt;code&gt;sqlrutils&lt;/code&gt;, the rest of the content under Data Science comes from them!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/keras-and-cntk.html&quot;&gt;Tutorial: Deep Learning with R on Azure with Keras and CNTK&lt;/a&gt;. &lt;a href=&quot;https://www.microsoft.com/en-us/cognitive-toolkit/&quot;&gt;Microsoft Cognitive Toolkit&lt;/a&gt; (CNTK) is a commercial-grade and open-source framework for deep learning tasks. Unfortunately for you if you are an R programmer, CNTK does not have an R interface (too bad, so sad!). Fortunately however, the RStudio team has developed an R interface for &lt;a href=&quot;https://keras.io/&quot;&gt;Keras&lt;/a&gt; making it possible to run CNTK (plus other deep learning backends), from within an R session.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/dplyrxdf-0100-beta-prerelease.html&quot;&gt;dplyrXdf 0.10.0 beta prerelease&lt;/a&gt;. The &lt;strong&gt;dplyr&lt;/strong&gt; package is a toolkit for data transformation and manipulation. It is a great package, but it has the &quot;usual&quot; R limitations of everything being in-memory. The &lt;strong&gt;dbplyrXdf&lt;/strong&gt; package however, does not requires all data to be stored in memory, but it allows it to be stored on disk as well, which will make it ideal for handling really large datasets.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/in-case-you-missed-it-july-2017-roundup.html&quot;&gt;In case you missed it: July 2017 roundup&lt;/a&gt;. The monthly roundup from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt;, quite a few interesting things to have a look at!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;I am still working on episode &lt;em&gt;Internals - IX&lt;/em&gt; in the &lt;strong&gt;SQL Server 2016 R Services&lt;/strong&gt; series. I had aimed to have it published this weekend, but work &quot;reared its ugly head, so ...&quot;. However, I am fairly confident I'll be able to publish it before the coming weekend! If you are interested in the previous &quot;episodes&quot; they can be found &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 

</feed>
