<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Niels Berglund</title>
 <link href="http://nielsberglund.com/atom.xml" rel="self"/>
 <link href="http://nielsberglund.com/"/>
 <updated>2017-08-18T18:14:02+02:00</updated>
 <id>http://nielsberglund.com</id>
 <author>
   <name>Niels Berglund</name>
   <email></email>
 </author>

 
 <entry>
   <title>Microsoft SQL Server R Services - Internals IX</title>
   <link href="http://nielsberglund.com/2017/08/18/microsoft-sql-server-r-services-internals-ix/"/>
   <updated>2017-08-18T17:44:22+02:00</updated>
   <id>http://nielsberglund.com/2017/08/18/microsoft-sql-server-r-services---internals-ix</id>
   <content type="html">&lt;p&gt;This post is part of a series of blog-posts about Microsoft SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Microsoft SQL Server R Services - Internals III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Microsoft SQL Server R Services - Internals IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Microsoft SQL Server R Services - Internals V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Microsoft SQL Server R Services - Internals VI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;Microsoft SQL Server R Services - Internals VII&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Microsoft SQL Server R Services - Internals VIII&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server R Services - Internals IX (this post)&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This post is the tenth post about Microsoft SQL Server R Services, and the ninth post that drills down into the internal of how it works.&lt;/p&gt;

&lt;p&gt;We are now nearing the end of the Internals part of this series (you probably say &quot;about time&quot;). When I started this series way back in March this year, I thought that the Internals would be two, maximum three episodes. Boy was I wrong!&lt;/p&gt;

&lt;p&gt;In this post we'll look at how the various components are communicating with each other.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Internals - VIII&lt;/a&gt; we looked at what different components are involved when we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL Server calls into the launchpad service.&lt;/li&gt;
&lt;li&gt;The launchpad service calls into the &lt;code&gt;Rlauncher.dll&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Rlauncher.dll&lt;/code&gt; creates Rterm processes.&lt;/li&gt;
&lt;li&gt;Through Rterm, the &lt;code&gt;R.dll&lt;/code&gt; is loaded together with &lt;code&gt;RxLink.dll&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;RxLink.dll&lt;/code&gt; creates the &lt;code&gt;BxlServer.exe&lt;/code&gt; process.&lt;/li&gt;
&lt;li&gt;To coordinate with SQL Server, &lt;code&gt;BxlServer.exe&lt;/code&gt; loads &lt;code&gt;BxServerLink.dll&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The above can be illustrated as in &lt;em&gt;Figure 1&lt;/em&gt; below&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_arch_overview.png&quot; width=&quot;650&quot; height=&quot;194&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Components In Play&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The questions are though how the components are communicating and what is involved in getting back to SQL Server after &lt;code&gt;BxlServer.exe&lt;/code&gt; and &lt;code&gt;BxServerLink.dll&lt;/code&gt; have done their &quot;magic&quot;?&lt;/p&gt;

&lt;h2&gt;Demo Code&lt;/h2&gt;

&lt;p&gt;Before we drill into the questions above, let's look at the demo code we'll use. Let's start with setting up the database and a table with some data we can use. All in all 1 million rows:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Setup&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_1M&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_1M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RowID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                          &lt;span class=&quot;n&quot;&gt;rand1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                          &lt;span class=&quot;n&quot;&gt;rand5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_1M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Setup of Database, Table and Data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The data is more or less the same data we used in &lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Internals - V&lt;/a&gt;, and the code to execute looks also almost the same:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execute from SQL Server&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;          &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             #Sys.sleep(10)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             pid &amp;lt;- Sys.getpid()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             d &amp;lt;- getwd()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(paste0(&quot;ProcessId: &quot;, pid))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(paste0(&quot;WorkDir: &quot;, d))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             r &amp;lt;- rxLinMod(y ~ rand1 + rand2 + rand3 + rand4 + rand5,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                           data=InputDataSet)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             coef &amp;lt;- r$coefficients
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             icept &amp;lt;- coef&lt;a href=&quot;&quot;&gt;1&lt;/a&gt;;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             OutputDataSet &amp;lt;- data.frame(pid=pid, nRows=r$nValidObs,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                          intercept=icept)'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;       &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              SELECT y, rand1, rand2, rand3,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      rand4, rand5
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              FROM dbo.rand_10M'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BIGINT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BIGINT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                   &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLOAT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Code to Execute&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 2&lt;/em&gt; we see how we read in data from the statement in the &lt;code&gt;@input_data_1&lt;/code&gt; parameter. The actual R code retrieves the process id and work directory and assigns them to the &lt;code&gt;pid&lt;/code&gt; and  &lt;code&gt;d&lt;/code&gt; variables which then are printed out through the &lt;code&gt;cat&lt;/code&gt; statements. After a model has been created in &lt;code&gt;rxLinMod&lt;/code&gt; some information about the model is returned as a resultset from the &lt;code&gt;OutputDataSet&lt;/code&gt; variable. The schema of the resultset is defined in &lt;code&gt;WITH RESULT SETS ...&lt;/code&gt;. For us to be able to determine what is happening when executing the code, there is a &lt;code&gt;Sys.sleep&lt;/code&gt; statement, which for now is commented out. Before we go any further, let's make sure it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restart the launchpad service (stop and start).&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If everything has worked OK, the Results tab in SSMS should look something like in &lt;em&gt;Figure 2&lt;/em&gt;, and the Message tab like in &lt;em&gt;Figure 3&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_test_result.png&quot; width=&quot;355&quot; height=&quot;80&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Results from Running the Code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_test_msgs.png&quot; width=&quot;610&quot; height=&quot;216&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Message Output from Running the Code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we know that the execution of the R code happens outside of SQL Server, the question is what component(s) are responsible for returning results and messages to SQL Server. Before looking at that, let's look at how communication happens between the various components.&lt;/p&gt;

&lt;h2&gt;Communication&lt;/h2&gt;

&lt;p&gt;The components we are interested in the communication between are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL Server -&gt; Launchpad&lt;/li&gt;
&lt;li&gt;launchpad -&gt; Rterm&lt;/li&gt;
&lt;li&gt;Rterm -&gt; BxlServer&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;SQL Server -&gt; Launchpad&lt;/h4&gt;

&lt;p&gt;So, let's start with the communication between SQL Server and the launchpad service. In &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Internals - I&lt;/a&gt; and &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Internals - II&lt;/a&gt; we used WinDbg and we saw how SQL Server calls (among other things) &lt;code&gt;sqllang!CSQLSatelliteConnection::OpenNpConnection&lt;/code&gt; to create and open a named pipe to the launchpad service. Let us make double sure that there really is named pipe involved, and the way we'll do that is by using &lt;strong&gt;WinDbg&lt;/strong&gt; and &lt;a href=&quot;https://technet.microsoft.com/en-us/sysinternals/processexplorer.aspx&quot;&gt;&lt;strong&gt;Process Explorer&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we'll do is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restart SQL Server and the launchpad service (please, do not do this on a production server :) ).&lt;/li&gt;
&lt;li&gt;Start WinDbg and Process Explorer as admin.&lt;/li&gt;
&lt;li&gt;In Process Explorer, ensure that the lower pane is visible (Ctrl + L).&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;To begin we'll see what named pipes SQL Server has created &quot;out of the box&quot; so to speak. Named pipes are exposed as handles in Process Explorer, so by clicking on the &lt;code&gt;sqlserver.exe&lt;/code&gt; process in Process Explorer and then Ctrl + H you should see handles in the lower pane. By ordering on name and scrolling down to &lt;code&gt;Device\Named&lt;/code&gt; pipe, you should see something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_sql_named_pipes1.png&quot; width=&quot;350&quot; height=&quot;143&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;SQL Server Initial Named Pipes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we see in &lt;em&gt;Figure 4&lt;/em&gt;, we have (at least on my machine) six named pipes. There is nothing that would indicate a named pipe to the launchpad service.&lt;/p&gt;

&lt;p&gt;Now you can go on and see what named pipes (if any) the launchpad service (&lt;code&gt;launchpad.exe&lt;/code&gt;) has. On my machine it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_launchpad_named_pipes1.png&quot; width=&quot;351&quot; height=&quot;55&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Launchpad Named Pipes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hmm, that is interesting - there are two named pipes with a name similar to what we have seen in previous posts: &lt;em&gt;sqlsatellite&lt;/em&gt;. However, since the launchpad service is inactive right now, it seems those two named pipes are not connected to anything.&lt;/p&gt;

&lt;p&gt;So far we do not have any evidence of named pipes between SQL Server and the launchpad service, but on the other hand we have not executed anything yet either (since the restart). Let us now go on and execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt; again, but before we do that let us do what we did in &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Internals - I&lt;/a&gt; and set a breakpoint at &lt;code&gt;sqllang!CSQLSatelliteConnection::OpenNpConnection&lt;/code&gt;. So attach WinDbg to the &lt;code&gt;sqlserver.exe&lt;/code&gt; process and set the breakpoint.&lt;/p&gt;

&lt;p&gt;Before you execute the code, uncomment the &lt;code&gt;Sys.sleep&lt;/code&gt; call and change the time to sleep to 30 seconds (&lt;code&gt;Sys.sleep(30)&lt;/code&gt;), so you can investigate what is happening. Now, go ahead and execute.&lt;/p&gt;

&lt;p&gt;The breakpoint is hit and execution stops. Look in Process Explorer and see what named pipes there are both for SQL Server as well as the launchpad service. At this stage there should not be any more named pipes than what you see in &lt;em&gt;Figure 4&lt;/em&gt; and &lt;em&gt;Figure 5&lt;/em&gt;. Continue execution of the code, and look again in Process Explorer. You should now see for SQL Server something like in &lt;em&gt;Figure 6&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_sql_named_pipes2.png&quot; width=&quot;350&quot; height=&quot;124&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;SQL Server Named Pipes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the launchpad service it looks something like &lt;em&gt;Figure 7&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_launchpad_named_pipes2.png&quot; width=&quot;354&quot; height=&quot;49&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; &lt;em&gt;Launchpad Named Pipes During Execution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We see now how for SQL Server we have a new named pipe: &lt;code&gt;\Device\NamedPipe\sqlsatellitelaunch&lt;/code&gt;, and for the launchpad service a corresponding additional named pipe: &lt;code&gt;\Device\NamedPipe\sqlsatellitelaunch&lt;/code&gt;. By now we should be fairly certain that communication between SQL Server and the launchpad service is through named pipes.&lt;/p&gt;

&lt;h4&gt;Launchpad -&gt; Rterm&lt;/h4&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The heading above is somewhat misleading as it is not &lt;code&gt;Launchpad.exe&lt;/code&gt; that connects to Rterm but &lt;code&gt;Rlauncher.dll&lt;/code&gt;, however we'll use launchpad for now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When I started writing this section, I thought: &quot;how hard can this be, the launchpad service obviously talks to Rterm via named pipes&quot;. It turned out to be not that simple. The way I went about &quot;proving&quot; (or not) that named pipes were used was similar to what we did above between SQL Server and the launchpad service, but initially I didn't use WinDbg:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restart SQL Server and the launchpad service.&lt;/li&gt;
&lt;li&gt;Make sure Process Explorer is up and running.&lt;/li&gt;
&lt;li&gt;Set a sufficiently high &lt;code&gt;Sys.sleep&lt;/code&gt; value in the code (I ended up using 120 seconds).&lt;/li&gt;
&lt;li&gt;Execute the code.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When I at this stage looked at the handles for the launchpad service, I saw the three named pipes we saw in &lt;em&gt;Figure 7&lt;/em&gt;. That would make sense, we know that one of them is the named pipe connection from SQL Server, and then one of the other two would be used between the launchpad service and Rterm.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; When using named pipes, and you look at them in Process Explorer, you should see the same name in both source as well as destination.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The problem was that I did not see a named pipe in the executing Rterm process, with the same name as in the launchpad service. Hmm, there went that theory. Well, if named pipes are not used, what about TCP/IP and sockets? So I noted the PID of the launchpad service, executed the code again, and while the code was running I (from command line) used &lt;code&gt;netstat&lt;/code&gt; to see what socket connections there were. The command I used was &lt;code&gt;netstat -a -n -o&lt;/code&gt;, which means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;show all connections and listening ports (&lt;code&gt;-a&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;display addresses and port numbers in in numerical form (&lt;code&gt;-n&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;display the owning PID associated with each connection (&lt;code&gt;-o&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I looked for the PID of the launchpad service to see if there were any connections, but none could be found. Now the original question of &quot;how hard can this be&quot; had an answer - &quot;actually, pretty hard&quot;! At this stage I resorted to some WinDbg &lt;a href=&quot;&quot;&gt;&quot;spelunking&quot;&lt;/a&gt;, and looked for &quot;promising&quot; routine names. Seeing that a lot of the routines we have seen so far in this series comes from classes with &quot;satellite&quot; in them I executed: &lt;code&gt;x *!*satellite*&lt;/code&gt;. Eish, that returned a &lt;strong&gt;lot&lt;/strong&gt;. However, while scrolling through the output, I came across following routine: &lt;code&gt;launchpad!CSQLSatelliteConnection::AddProviderDoneIOCPCallback&lt;/code&gt;. Hmm, something that has to do with callback from &lt;code&gt;IOCP&lt;/code&gt;, could it be that the launchpad service connects via IO Completion Ports (IOCP)? Only one way to find out - set some breakpoints in WinDbg.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Internals - II&lt;/a&gt; where we discussed what happens inside the launchpad service, we had a diagram of the flow of a call looking like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad-r-post.png&quot; width=&quot;650&quot; height=&quot;325&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;Launchpad Service Call Flow&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 8&lt;/em&gt; we see how the communication to Rterm is done in the &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; call, so the setup of the IOCP should be done before the &lt;code&gt;WriteMessage&lt;/code&gt; call, and most likely after the &lt;code&gt;LaunchServTask&lt;/code&gt; call. So in the already attached WinDbg, I set three breakpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!CLaunchContext::LaunchServTask&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bp KERNELBASE!CreateIoCompletionPort&lt;/code&gt; (I had read documentation of IOCP and saw that this was a likely call).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If my theory was to be correct, I would see the execution first stop at &lt;code&gt;LaunchServTask&lt;/code&gt;, followed by &lt;code&gt;CreateIoCompletionPort&lt;/code&gt; and then finally at &lt;code&gt;WriteMessage&lt;/code&gt;. I executed the code in &lt;em&gt;Code Snippet 2&lt;/em&gt; with &lt;code&gt;Sys.sleep(10)&lt;/code&gt; and this is what I saw in WinDbg:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Breakpoints&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLaunchContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchServTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateIoCompletionPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;Breakpoint&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Launchpad Breakpoints being Hit&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This to me indicates that yes, IOCP is being used as communication mechanism between the launchpad service and Rterm.&lt;/p&gt;

&lt;h4&gt;Rterm -&gt; BxlServer&lt;/h4&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Internals - VIII&lt;/a&gt; we spoke about &lt;code&gt;BxlServer.exe&lt;/code&gt;, how it hosts RevoScaleR code and how it also coordinates with the R runtime in order to manage exchanges of data with SQL Server. The &lt;code&gt;BxlServer.exe&lt;/code&gt; process is created by the Rterm process via the &lt;code&gt;RxLink.dll&lt;/code&gt; which acts as a conduit. The source code for &lt;code&gt;RxLink.dll&lt;/code&gt; is &lt;a href=&quot;https://packages.revolutionanalytics.com/tools/src/rre-gpl-src.8.0.3.tar.gz&quot;&gt;available&lt;/a&gt;, and when I had a look at the source, I saw quite a lot of code related to named pipes. So my assumption is that communication between the Rterm process (via &lt;code&gt;RxLink.dll&lt;/code&gt;) and the BxlServer process happens through named pipes.&lt;/p&gt;

&lt;p&gt;Seeing that I don't have any debug symbols for &lt;code&gt;Rterm.exe&lt;/code&gt;, &lt;code&gt;R.dll&lt;/code&gt;, &lt;code&gt;RxLink.dll&lt;/code&gt; or &lt;code&gt;BxlServer.exe&lt;/code&gt; we'll try and use other methods to prove (or disprove) that named pipes are used. The way we'll do it is to use Process Explorer as we did with the communication between SQL Server and the launchpad service. Now is probably a good time to restart both the SQL Server service as well as the launchpad service (just to start afresh).&lt;/p&gt;

&lt;p&gt;After the SQL Server and the launchpad service has been restarted bring back Process Explorer again (as admin). This time though we'll look at the Rterm process and the hosted BxlServer process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In Process Explorer navigate to the launchpad process.&lt;/li&gt;
&lt;li&gt;Set big enough &lt;code&gt;Sys.sleep&lt;/code&gt; value in the code. 90 seconds worked fine for me.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When executing the code, look in Process Explorer for the Rterm process and BxlServer process where you have a &lt;code&gt;CPU&lt;/code&gt; value greater than 0:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_rterm_bxlserver.png&quot; width=&quot;360&quot; height=&quot;309&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;Rterm and BxlServer Processes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 8&lt;/em&gt; we see the Rterm and BxlServer processes that are active. When you have found the active processes check if there are any named pipe handles for those two processes (Ctrl+H):&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_rterm_nps.png&quot; width=&quot;313&quot; height=&quot;33&quot;  &gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; &lt;em&gt;Rterm Named Pipes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_bxlserver_nps.png&quot; width=&quot;315&quot; height=&quot;36&quot;  &gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; &lt;em&gt;BxlServer Named Pipes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 9&lt;/em&gt; and &lt;em&gt;Figure 10&lt;/em&gt; show the named pipes file handles for the Rterm process (&lt;em&gt;Figure 9&lt;/em&gt;), and BxlServer process (&lt;em&gt;Figure 10&lt;/em&gt;). As we can, the same named pipes exists in both processes (they have the same names), so we can with some certainty say that communication between Rterm and BxlServer is done via named pipes. With this in mind we can enhance &lt;em&gt;Figure 1&lt;/em&gt; and show the communication mechanisms:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_comms1.png&quot; width=&quot;650&quot; height=&quot;193&quot;  &gt;
&lt;strong&gt;Figure 11:&lt;/strong&gt; &lt;em&gt;Communication Mechanisms&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 11&lt;/em&gt; the numbers indicate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 - named pipe.&lt;/li&gt;
&lt;li&gt;2 - IOCP.&lt;/li&gt;
&lt;li&gt;3 - named pipe.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SqlSatellite&lt;/h2&gt;

&lt;p&gt;Now, we've seen how the various components are communicating with each other, but - how is data exchanged? E.g, how does a resultset get back to SQL Server, and does the print (&lt;code&gt;cat&lt;/code&gt;) statements travel back the same way? In &lt;em&gt;Figure 11&lt;/em&gt; wee see how the BxlServer is doing &quot;stuff&quot; and then interacts with BxServerLink, but it kind of stops there. Surely a dataset like in our code wouldn't go back over the IOCP? Would there be any other components in play? Let's see what we can find out.&lt;/p&gt;

&lt;p&gt;Once again use the Process Explorer, but now we are interested in what dll's the BxlServer loads while it's running. Execute the code again, and when you have found the &quot;active&quot; BxlServer process do a Ctrl+D to find the loaded dlls, and see what &quot;pops up&quot;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_sqlsatellite.png&quot; width=&quot;620&quot; height=&quot;78&quot;  &gt;
&lt;strong&gt;Figure 12:&lt;/strong&gt; &lt;em&gt;SqlSatellite.dll&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we look at the various dll's that are loaded by BxlServer we come across a name we have seen and briefly mentioned before: &lt;code&gt;SqlSatellite.dll&lt;/code&gt;. In Internals &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;II&lt;/a&gt;, &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;III&lt;/a&gt; and &lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;VII&lt;/a&gt; we saw how paths were set, pointing to where the &lt;code&gt;sqlsatellite.dll&lt;/code&gt; is located. In &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; we also mentioned how SqlSatellite is an API to support external code and external run times. It is loaded by the BxlServer process and it handles data transfers between SQL Server and external languages (in this case R).&lt;/p&gt;

&lt;h4&gt;Communication&lt;/h4&gt;

&lt;p&gt;Now we have an idea who handles data exchange (at least some of it), but what mechanism is used? Named pipes could be an option, and we saw in SQL Server that named pipe: &lt;code&gt;\Device\NamedPipe\sqlsatellitelaunch&lt;/code&gt;. However, that pipe is used by SQL Server for communication with the launchpad service, and there were really no other named pipes that seemed to fit in. How about sockets and TCP/IP? That could be an option, let's see.&lt;/p&gt;

&lt;p&gt;Once again, do a restart of SQL Server as well as the launchpad service to make sure we are in a clean state. Make a note of the process id (PID) of SQL Server, well use it to see what socket connections SQL Server has. If Process Explorer is not running, start it up as admin. When SQL Server is restarted check what TCP connections we have by running the &lt;code&gt;netstat -a -n -o -p TCP&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Netstat&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1434&lt;/span&gt;         &lt;span class=&quot;mf&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;LISTENING&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2900&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52637&lt;/span&gt;        &lt;span class=&quot;mf&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;LISTENING&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2900&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;TCP Connections SQL Server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The PID for SQL Server after I restarted was 2900, and from &lt;em&gt;Code Snippet 4&lt;/em&gt; we can see two listening connections, with no source as of yet. The listener for port 1434 is for the SQL Server Browser Service, whereas port 52637 is something of a mystery. Let's now execute our code and see if anything changes (I set &lt;code&gt;Sys.sleep&lt;/code&gt; to 90 seconds to make sure I had enough time to see what happens). While the code is executing run &lt;code&gt;netstat -a -n -o -p TCP -b&lt;/code&gt; (&lt;code&gt;-b&lt;/code&gt; will display the executable involved in creating the connection). When I executed the code and ran the netstat command I saw the following:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Netstat&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1434&lt;/span&gt;         &lt;span class=&quot;mf&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;LISTENING&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2900&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlservr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52637&lt;/span&gt;        &lt;span class=&quot;mf&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;LISTENING&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2900&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlservr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52637&lt;/span&gt;        &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64511&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ESTABLISHED&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;2900&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlservr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt;    &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64511&lt;/span&gt;        &lt;span class=&quot;mf&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52637&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;ESTABLISHED&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;8088&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BxlServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;TCP Connections SQL Server while Executing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That is interesting! From &lt;em&gt;Code Snippet 5&lt;/em&gt; we see how SQL Server now has an established TCP connection on port 52637, and the connection originates from PID 8088. That PID is &lt;code&gt;BxlServer.exe&lt;/code&gt;, and - as we know from earlier - &lt;code&gt;BxlServer.exe&lt;/code&gt; loads &lt;code&gt;SqlSatellite.dll&lt;/code&gt;. We now have a TCP/IP connection from SqlSatellite to SQL Server, and it is over that connection data is exchanged.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Not all data is exchanged over the TCP/IP socket connection, as we will see in next post.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Finally, let's do some more WinDbg &quot;spelunking&quot; in order to understand how and when the TCP connection is established:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Restart SQL Server and the launchpad service, to clean things up.&lt;/li&gt;
&lt;li&gt;Attach WinDbg to the SQL Server process&lt;/li&gt;
&lt;li&gt;Browse symbols with the name TCP&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When browsing for the symbols, you can use this command: &lt;code&gt;x /1 *!TCP*&lt;/code&gt;. By using the option &lt;code&gt;/1&lt;/code&gt; you'll only see the names, and no addresses. On my machine that gives me quite a lot, but there are two entries that catch my eye: &lt;code&gt;sqllang!Tcp::AcceptConnection&lt;/code&gt; and &lt;code&gt;sqllang!Tcp::Close&lt;/code&gt;. So let us set breakpoints at those two symbols, and see what happens when we execute our code.&lt;/p&gt;

&lt;p&gt;The result when executing the code is that we initially break at &lt;code&gt;sqllang!Tcp::AcceptConnection&lt;/code&gt;. Followed somewhat later by breaking at &lt;code&gt;sqllang!Tcp::Close&lt;/code&gt;. Cool, this seems to work - let us set some more breakpoints and try to figure out the flow of events.&lt;/p&gt;

&lt;p&gt;To be able to see the flow, we need to involve the launchpad service as well, as it is that service who &quot;spins up&quot; the Rterm process who in turn creates the BxlServer process who loads BxServerLink as well as SqlSatellite. So, remember from &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; what the code looked like (from a very high level) to create the executing Rterm processes, it was something like this:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Flow&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLSatellite_LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessForSatelliteSession&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhysicalUserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaunchProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;n&quot;&gt;KERNELBASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateProcessInternalW&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Satellite_ResourceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcessToJobObject&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SatelliteJobObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssociateProcess&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteCommunication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendResumeWithLoginInfo&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;launchpad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CSQLSatelliteConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMessage&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 6:&lt;/strong&gt; &lt;em&gt;Launchpad Code Flow&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As discussed in &lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Internal - II&lt;/a&gt; and &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;, when an external script is executed 6 different Rterm processes are &quot;spun&quot; up, bit only one will be the executing process, and the code in &lt;em&gt;Code Snippet 6&lt;/em&gt; illustrates the code creating the executing Rterm process.&lt;/p&gt;

&lt;p&gt;With this in mind, let us:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Delete any sub folders of the user account folders in the &lt;code&gt;C:\&amp;lt;path_to_sql_server_instance&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do &lt;strong&gt;NOT&lt;/strong&gt; delete the user account folders themselves.&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;li&gt;Attach WinDbg to the launchpad process.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Set breakpoints in the attached launchpad process at (make sure that the SQL Server breakpoints are enabled):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!SatelliteJobObject::AssociateProcess&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bp launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What we now want to do is to run the two WinDbg instances side by side and see when the individual breakpoints are hit, and in what order. Before we begin, clear out the WinDbg command output (&lt;code&gt;.cls&lt;/code&gt;). Execute the code and look closely at what happens in the two WinDbg instances.&lt;/p&gt;

&lt;p&gt;What I see on my machine is that I break two or three times in launchpad at &lt;code&gt;launchpad!SatelliteJobObject::AssociateProcess&lt;/code&gt;, and after the second or third break, I break at &lt;code&gt;sqllang!Tcp::AcceptConnection&lt;/code&gt; in SQL Server. That is followed by &lt;code&gt;launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo&lt;/code&gt; and &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt;, plus more &lt;code&gt;launchpad!SatelliteJobObject::AssociateProcess&lt;/code&gt;. After a while I receive two more &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; in the launchpad service and a &lt;code&gt;sqllang!Tcp::Close&lt;/code&gt; in SQL Server.&lt;/p&gt;

&lt;p&gt;The conclusion I draw from this is that after the executing Rterm process has been created (and BxlServer, BxLinkServer and SqlSatellite), SqlSatellite connects into SQL Server.&lt;/p&gt;

&lt;p&gt;You may notice that the &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; breakpoint will be hit a couple of times after the SQL Server &lt;code&gt;sqllang!Tcp::AcceptConnection&lt;/code&gt;. We'll discuss that in the next Internals blogpost.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post we set out trying to determine what communication mechanisms there are between the various components interacting when &lt;code&gt;sp_execute_external_script&lt;/code&gt; is called. We also saw how a &quot;new&quot; component &lt;code&gt;sqlsatellite.dll&lt;/code&gt; is in the mix, and in the next blogpost in the Internals series we'll look more in detail what it does.&lt;/p&gt;

&lt;p&gt;So, &lt;em&gt;Figure 13&lt;/em&gt; below illustrates quite well the communication mechanisms between the various components:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_9_comms2.png&quot; width=&quot;650&quot; height=&quot;228&quot;  &gt;
&lt;strong&gt;Figure 13:&lt;/strong&gt; &lt;em&gt;How Communication Happens&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The figure looks quite like &lt;em&gt;Figure 11&lt;/em&gt; and the numbers indicate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 - named pipe.&lt;/li&gt;
&lt;li&gt;2 - IOCP.&lt;/li&gt;
&lt;li&gt;3 - named pipe.&lt;/li&gt;
&lt;li&gt;4 - TCP/IP&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 32</title>
   <link href="http://nielsberglund.com/2017/08/13/interesting-stuff-week-32/"/>
   <updated>2017-08-13T20:12:03+02:00</updated>
   <id>http://nielsberglund.com/2017/08/13/interesting-stuff---week-32</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://philcalcado.com/microservices-patterns.html&quot;&gt;Patterns of Microservices Architecture&lt;/a&gt;. &lt;a href=&quot;https://twitter.com/pcalcado&quot;&gt;Phil Calcado&lt;/a&gt; is an expert on microservices architecture. The post I am pointing to contains links to articles about patterns in microservices architecture.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/towards-data-science/selling-analytics-to-your-stakeholders-3e516cd6cc2b&quot;&gt;Selling Analytics to your Stakeholders&lt;/a&gt;. If you are a data scientist, or a data nerd in general, or a manager - this article is a &lt;strong&gt;MUST&lt;/strong&gt; read. Enough said!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/tutorial-sqlrutils.html&quot;&gt;Tutorial: Publish an R function as a SQL Server stored procedure with the sqlrutils package&lt;/a&gt;. &quot;Aw schucks, blush&quot; - the guys at &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revlution Analytics&lt;/a&gt; points to a &lt;a href=&quot;/2017/06/25/creating-r-stored-procedures-in-sql-server-2016-using-sqlrutils/&quot;&gt;blog-post&lt;/a&gt; of mine, how to use the &lt;code&gt;sqlrutils&lt;/code&gt; package to create SQL Server stored procedures from R code. Thanks guys!!!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/rserver/2017/08/07/using-microsoft-r-server-operationalization-on-hdinsight/&quot;&gt;Using Microsoft R Server Operationalization on HDInsight&lt;/a&gt;. Microsoft R Server has an awesome operationalization story! This blog-post talks about how to do it on HDInsight!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The guys at &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; have really been busy the last week. Apart from the post above about &lt;code&gt;sqlrutils&lt;/code&gt;, the rest of the content under Data Science comes from them!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/keras-and-cntk.html&quot;&gt;Tutorial: Deep Learning with R on Azure with Keras and CNTK&lt;/a&gt;. &lt;a href=&quot;https://www.microsoft.com/en-us/cognitive-toolkit/&quot;&gt;Microsoft Cognitive Toolkit&lt;/a&gt; (CNTK) is a commercial-grade and open-source framework for deep learning tasks. Unfortunately for you if you are an R programmer, CNTK does not have an R interface (too bad, so sad!). Fortunately however, the RStudio team has developed an R interface for &lt;a href=&quot;https://keras.io/&quot;&gt;Keras&lt;/a&gt; making it possible to run CNTK (plus other deep learning backends), from within an R session.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/dplyrxdf-0100-beta-prerelease.html&quot;&gt;dplyrXdf 0.10.0 beta prerelease&lt;/a&gt;. The &lt;strong&gt;dplyr&lt;/strong&gt; package is a toolkit for data transformation and manipulation. It is a great package, but it has the &quot;usual&quot; R limitations of everything being in-memory. The &lt;strong&gt;dbplyrXdf&lt;/strong&gt; package however, does not requires all data to be stored in memory, but it allows it to be stored on disk as well, which will make it ideal for handling really large datasets.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/08/in-case-you-missed-it-july-2017-roundup.html&quot;&gt;In case you missed it: July 2017 roundup&lt;/a&gt;. The monthly roundup from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt;, quite a few interesting things to have a look at!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;I am still working on episode &lt;em&gt;Internals - IX&lt;/em&gt; in the &lt;strong&gt;SQL Server 2016 R Services&lt;/strong&gt; series. I had aimed to have it published this weekend, but work &quot;reared its ugly head, so ...&quot;. However, I am fairly confident I'll be able to publish it before the coming weekend! If you are interested in the previous &quot;episodes&quot; they can be found &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 31</title>
   <link href="http://nielsberglund.com/2017/08/06/interesting-stuff-week-31/"/>
   <updated>2017-08-06T19:36:25+02:00</updated>
   <id>http://nielsberglund.com/2017/08/06/interesting-stuff---week-31</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/footsteps-of-cooperative-wait/&quot;&gt;In the footsteps of a cooperative wait&lt;/a&gt;. &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt; is continuing on his journey of threads and tasks. This week it is about context switching and the cooperative wait.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;.NET&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mattwarren.org/2017/08/02/A-look-at-the-internals-of-boxing-in-the-CLR/&quot;&gt;A look at the internals of 'boxing' in the CLR&lt;/a&gt;. &lt;a href=&quot;http://mattwarren.org&quot;&gt;Matthew Warren&lt;/a&gt; drills down into the mysteries of &quot;boxing&quot; in .NET. If you are a .NET developer then Matthew's blog is a must read!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Distributed Computing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/big-data-serverless-aws-lambda&quot;&gt;Serverless Design Patterns with AWS Lambda: Big Data with Little Effort&lt;/a&gt;. An &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; presentation by Tim Wagner about how to do Big Data on a server-less architecture.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/microservices-data-centric&quot;&gt;Managing Data in Microservices&lt;/a&gt;. Another &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; presentation. This is about how to handle data in microservices. I found this presentation extremely informative.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Programming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://spectrum.ieee.org/computing/software/the-2017-top-programming-languages&quot;&gt;The 2017 Top Programming Languages&lt;/a&gt;. &lt;a href=&quot;http://spectrum.ieee.org&quot;&gt;IEEE Spectrum's&lt;/a&gt; annual roundup of programming languages. Interesting to see how Python is now at first place.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/towards-data-science/data-science-simplified-simple-linear-regression-models-3a97811a6a3d&quot;&gt;Data Science Simplified Part 4: Simple Linear Regression Models&lt;/a&gt;. Part 4 of a series trying to simplify data science. This &quot;episode&quot; tackles linear regression.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/07/h2o-hdinsight.html&quot;&gt;How to use H2O with R on HDInsight&lt;/a&gt;. &lt;a href=&quot;https://www.h2o.ai/&quot;&gt;H2O&lt;/a&gt; is a leading open source deep learning platform. In this blog-post, David from &lt;a href=&quot;http://blog.revolutionanalytics.com&quot;&gt;Revolution Analytics&lt;/a&gt; points to an article how use H2O together with Azure HDInsight. Cool stuff!!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/towards-data-science/data-curious-31-07-2017-a-roundup-of-data-stories-datasets-and-visualizations-from-last-week-da8b8cf5ea9b&quot;&gt;Data Curious 31.07.2017: A roundup of data stories, datasets and visualizations from last week&lt;/a&gt;. So, I am not the only one doing roundups. This is a roundup concentrating on data by &lt;a href=&quot;https://medium.com/@bnj_cooley&quot;&gt;Benjamin Cooley&lt;/a&gt;. Seeing his roundups, I am thinking of packing up and go home. They are absolutely awesome!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/towards-data-science/a-gentle-introduction-to-neural-networks-series-part-1-2b90b87795bc&quot;&gt;A Gentle Introduction To Neural Networks Series — Part 1&lt;/a&gt;. The start of a series covering introduction to Neural Networks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sunilprakash.com/post/intro-to-tensorflow/&quot;&gt;Intro To Tensorflow&lt;/a&gt;. Another introduction. This time introduction to TensorFlow.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/rserver/2017/08/01/machine-learning-services-in-sql-server-2017/&quot;&gt;Machine Learning Services in SQL Server 2017&lt;/a&gt;. A blog-post about some of the highlights related to machine learning in the latest release (RC2) of SQL Server 2017.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;I am still working on episode &lt;em&gt;Internals - IX&lt;/em&gt; in the &lt;strong&gt;SQL Server 2016 R Services&lt;/strong&gt; series. I hope to have it out at the end of next week, or - worst case scenario - following week. If you are interested in the previous &quot;episodes&quot; they can be found &lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Shameless Self Promotion&lt;/h2&gt;

&lt;p&gt;In the beginning of last week I received an email &quot;out of the blue&quot;, congratulating me to have been awarded &lt;strong&gt;MVP&lt;/strong&gt; for &lt;em&gt;Microsoft Data Platform&lt;/em&gt;. So it seems that writing blog-posts, answering forum questions and speaking at the &quot;odd&quot; conference now and then has its perks. I am chuffed!!&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 30</title>
   <link href="http://nielsberglund.com/2017/07/30/interesting-stuff-week-30/"/>
   <updated>2017-07-30T14:23:33+02:00</updated>
   <id>http://nielsberglund.com/2017/07/30/interesting-stuff---week-30</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/where-do-sqlos-tasks-come-from/&quot;&gt;Where do SQL Server tasks come from?&lt;/a&gt;. &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt; continues his tales, about thread and tasks and other cool stuff, from &lt;a href=&quot;http://sqlonice.com/the-early-life-of-a-sqlos-thread/&quot;&gt;last week&lt;/a&gt; when he spoke about SQLOS threads. This time he looks at how threads and tasks fit together. I really, really like what he writes about, seeing that is deep down in SQLOS (and he uses WinDbg a lot :) ).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sql-sasquatch.blogspot.com/2017/07/sql-server-memory-accounting-aligning.html&quot;&gt;SQL Server Memory Accounting: Aligning Perfmon &amp;amp; DMVs&lt;/a&gt;. &lt;a href=&quot;http://sql-sasquatch.blogspot.com&quot;&gt;Lonny&lt;/a&gt; writes a very interesting article about squaring up what you see in SQL Server performance counters with what you get from DMV's.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;.NET&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/07/26/the-new-net-application-architecture-guidance/&quot;&gt;.NET Application Architecture Guidance&lt;/a&gt;. The .NET team has published some free eBooks as guidance to application architecture, especially microservices and container based applications (at least that's the ones I am interested in).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/07/24/get-started-with-f-as-a-c-developer/&quot;&gt;Get Started with F# as a C# developer&lt;/a&gt;. A nice introduction for C# developers how to get started with F#.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/06/29/performance-improvements-in-ryujit-in-net-core-and-net-framework/&quot;&gt;Performance Improvements in RyuJIT in .NET Core and .NET Framework&lt;/a&gt;. A blog-post pointing out some of the improvements that have gone into the RyuiJIT compiler for .NET Core (x64 and x86) as well as .NET Framework (x64). Pretty impressive stuff!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tomaztsql.wordpress.com/2017/07/25/passing-two-sql-queries-to-sp_execute_external_script/&quot;&gt;Passing two SQL queries to sp_execute_external_script&lt;/a&gt;. The procedure &lt;code&gt;sp_execute_external_script&lt;/code&gt; which is used to execute R or Python scripts, has an input parameter: &lt;code&gt;@input_data_1&lt;/code&gt;. It is used to input a dataset to the external script. Based on the name you might expect that there would be more parameters for input of data (&lt;code&gt;@input_data_2&lt;/code&gt;, &lt;code&gt;@input_data_3&lt;/code&gt;, etc.) However, that is not the case, and there has been quite a few questions on various newsgroups what to do if you want to send in multiple datasets. In this blog-post, &lt;a href=&quot;https://tomaztsql.wordpress.com/&quot;&gt;Tomaz&lt;/a&gt;, shows a way you can achieve to input multiple datasets. Cool!!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thdeltei/azure-function-r&quot;&gt;Running R scripts on Azure Function&lt;/a&gt;. Serverless computing is really an &quot;in thing&quot;, and in AWS you have Lambda, and in Azure; Azure Functions (geez, what is it with Microsoft and naming of stuff?). Anyway &lt;a href=&quot;https://github.com/thdeltei&quot;&gt;Thomas Delteil&lt;/a&gt; from Microsoft shows how you can deploy a R scripts on Azure Function.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://buckwoody.wordpress.com/2017/07/27/data-science-start-at-the-very-beginning-its-a-very-good-place-to-start/&quot;&gt;Data Science: Start at the very Beginning, It’s a very good place to start&lt;/a&gt;. &lt;a href=&quot;https://buckwoody.wordpress.com/author/buckwoody/&quot;&gt;Buck Woody&lt;/a&gt; posts about two different types of data science projects, and which type of project won't work, and why.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 29</title>
   <link href="http://nielsberglund.com/2017/07/23/interesting-stuff-week-29/"/>
   <updated>2017-07-23T19:51:06+02:00</updated>
   <id>http://nielsberglund.com/2017/07/23/interesting-stuff---week-29</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlonice.com/the-early-life-of-a-sqlos-thread/&quot;&gt;The early life of a SQLOS thread&lt;/a&gt;. &quot;And on that day a SQLOS thread was born&quot;! &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt; talks about SQLOS threads in his normal entertaining style. Once again, if you are interested in the inner workings of SQL Server in general and SQLOS specifically, you have to follow &lt;a href=&quot;http://sqlonice.com/&quot;&gt;Ewald&lt;/a&gt;!!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://social.msdn.microsoft.com/Forums/en-US/e78c8278-aeef-4a30-996e-cb80e385fea4/sqlclr-deployment-utility-and-helper-library?forum=sqlnetfx&quot;&gt;SQLCLR Deployment Utility and Helper library&lt;/a&gt;. A post on the &lt;a href=&quot;https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlnetfx&quot;&gt;.NET Framework inside SQL Server&lt;/a&gt; forum about a utility for SQLCLR functions as well as deployments. Have a look at the &lt;a href=&quot;https://github.com/vaseug/PowerLib&quot;&gt;GitHub&lt;/a&gt; repo for all the supporting code. Very impressive!!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/07/23/sql-server-2017-sqlclr-white-listing-assemblies/&quot;&gt;SQL Server 2017 SQLCLR - Whitelisting Assemblies&lt;/a&gt;. A post by me about new functionality in SQL Server 2017 RC1 to be able to whitelist SQLCLR assemblies. Quite interesting if I may say so myself!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://thomaswdinsmore.com/2017/07/17/how-gdpr-affects-data-science/&quot;&gt;HOW GDPR AFFECTS DATA SCIENCE&lt;/a&gt;. A very interesting post about the upcoming legislation in EU over data protection, the GDPR, and what effects it will have on Data Science.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/useR-international-R-User-conferences/useR-International-R-User-2017-Conference&quot;&gt;useR! International R User 2017 Conference&lt;/a&gt;. A Microsoft &lt;a href=&quot;https://channel9.msdn.com&quot;&gt;Channel 9&lt;/a&gt; post containing videos of most of the presentations from the &lt;strong&gt;useR 2017&lt;/strong&gt; conference in Belgium in the early days of July. A lot of very interesting talks!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.revolutionanalytics.com/2017/07/nnets-from-scratch.html&quot;&gt;Neural Networks from Scratch, in R&lt;/a&gt;. A post from Ilia Karmanov, (a Data Scientists at Microsoft), about how to build a neural-network from scratch in R. If I only would understand half of it ...&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sanddance.ms/&quot;&gt;SandDance - Visually Explore, Understand, and Present Data&lt;/a&gt;. SandDance is a Microsoft Research project aimed to help you find insights about your data. It looks very, very interesting!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Microsoft SQL Server R Services - Internals VII&lt;/a&gt;. Have I been a busy boy this week or what?! The &lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Internals - VIII&lt;/a&gt; covers some of the components the launchpad service loads; Rterm.exe, BxlServer.exe, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SQL Server 2017 SQLCLR - Whitelisting Assemblies</title>
   <link href="http://nielsberglund.com/2017/07/23/sql-server-2017-sqlclr-white-listing-assemblies/"/>
   <updated>2017-07-23T09:53:57+02:00</updated>
   <id>http://nielsberglund.com/2017/07/23/sql-server-2017-sqlclr-white-listing-assemblies</id>
   <content type="html">&lt;p&gt;A little while ago I wrote a &lt;a href=&quot;/2017/07/02/sql-server-2017-sqlclr-and-permissions/&quot;&gt;blog-post&lt;/a&gt; about the changes in the SQLCLR security model in SQL Server 2017. I wrote about how Microsoft has changed the relation between CAS and security boundaries, and CAS is no longer supported as a boundary! And also how Microsoft introduced an &lt;code&gt;sp_configure&lt;/code&gt; option called &lt;code&gt;clr strict security&lt;/code&gt;, which by default is set to 1 (on). When the setting is on, SQL Server treats all assemblies (&lt;code&gt;SAFE&lt;/code&gt;, &lt;code&gt;EXTERNAL_ACCESS&lt;/code&gt;, &lt;code&gt;UNSAFE&lt;/code&gt;) as if they were marked &lt;code&gt;UNSAFE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The release I wrote the post against was CTP 2.1, and earlier this week Microsoft released SQL Server 2017 RC1. Some days ago I received a comment from &lt;em&gt;Paul Vestuto&lt;/em&gt; on my &lt;a href=&quot;/2017/07/02/sql-server-2017-sqlclr-and-permissions/&quot;&gt;post&lt;/a&gt;, pointing out that in RC1 there has been some more changes to the security model. I thought those changes would earn their own blog-post, instead of just editing the &lt;a href=&quot;/2017/07/02/sql-server-2017-sqlclr-and-permissions/&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;Let's look back at what the changes were in SQL 2017, to the SQLCLR permissions.&lt;/p&gt;

&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;In SQL Server 2017, Microsoft now by default requires that all type of assemblies (&lt;code&gt;SAFE&lt;/code&gt;, &lt;code&gt;EXTERNAL_ACCESS&lt;/code&gt;, &lt;code&gt;UNSAFE&lt;/code&gt;) are authorized for &lt;code&gt;UNSAFE&lt;/code&gt; access, by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The database is set to be &lt;code&gt;TRUSTWORTHY&lt;/code&gt;, &lt;em&gt;OR&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The assembly is signed with a certificate that has a corresponding login with &lt;code&gt;UNSAFE ASSEMBLY&lt;/code&gt; permission, &lt;em&gt;OR&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The assembly is signed with an asymmetric key that has a corresponding login with &lt;code&gt;UNSAFE ASSEMBLY&lt;/code&gt; permission.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The implication of the above is that, unless you want to mark your database &lt;code&gt;TRUSTWORTHY&lt;/code&gt;, you can no longer &quot;just&quot; deploy a &lt;code&gt;SAFE&lt;/code&gt; assembly, it has to be signed!&lt;/p&gt;

&lt;p&gt;You may say that: &quot;signing is not that bad - what's the big deal&quot;. Sure, sign one or two assemblies may not be that bad, but if you have, like &lt;a href=&quot;/derivco&quot;&gt;us&lt;/a&gt;, 50 - 60 assemblies then it can become a chore. Especially since there is no real tooling for this.&lt;/p&gt;

&lt;p&gt;So, in SQL Server 2017 RC1, Microsoft has tried to make things somewhat simpler.&lt;/p&gt;

&lt;h2&gt;Assembly Whitelisting&lt;/h2&gt;

&lt;p&gt;What Microsoft introduces in SQL Server 2017 RC1, is something I refer to as &lt;a href=&quot;https://en.wikipedia.org/wiki/Whitelist&quot;&gt;whitelisting&lt;/a&gt;. It is somewhat similar to the &lt;code&gt;TRUSTWORTHY&lt;/code&gt; setting, where you indicate that a database is to be trusted. But instead of doing it on the database level, you do it per assembly.&lt;/p&gt;

&lt;p&gt;To whitelist in SQL Server 2017 RC1, you use the system stored procedure &lt;code&gt;sys.sp_add_trusted_assembly&lt;/code&gt;. As the name implies the procedure adds an assembly to a list of &quot;trusted&quot; assemblies. By marking an assembly as trusted, SQL Server will allow it to be loaded when &lt;code&gt;clr strict security&lt;/code&gt; is on (on by default), even if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the assembly is not signed, &lt;em&gt;and&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the database where you want to deploy it to is not &lt;code&gt;TRUSTWORTHY&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Demo Code&lt;/h4&gt;

&lt;p&gt;Before we start to look into how this works, let's look at the demo code we'll be using. If you read the &lt;a href=&quot;/2017/07/02/sql-server-2017-sqlclr-and-permissions/&quot;&gt;SQL Server 2017, SQLCLR and Permissions&lt;/a&gt; post, the code should look fairly familiar. So, on a SQL Server 2017 RC1 installation, let us first make sure that we are correctly configured:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Configuration&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sp_configure&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'show advanced options'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;RECONFIGURE&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sp_configure&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'clr_enabled'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;RECONFIGURE&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sp_configure&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Check Configuration&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 1&lt;/em&gt; we ensure that we can see all the various options that exist, and then we enable SQLCLR. Finally we see what values we have for the options and that should result in something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql2k17_trust_asms_options.png&quot; width=&quot;547&quot; height=&quot;100&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Configuration Settings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From &lt;em&gt;Figure 1&lt;/em&gt; we see that SQLCLR is enabled as well as that &lt;code&gt;clr strict security&lt;/code&gt; is on. We can now create the databases we need (yes, databases as in plural - will explain later):&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Databases&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeployDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustedAsmDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeployDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeployDB&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUSTWORTHY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustedAsmDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Create Databases&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For now, don't worry about the &lt;code&gt;DeployDB&lt;/code&gt; database, the database that will be the &quot;production&quot; database and to where we want to deploy an assembly is &lt;code&gt;TrustedAsmDB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With the databases created, the CLR code we will use is some of what we used in the &lt;a href=&quot;/2017/07/02/sql-server-2017-sqlclr-and-permissions/&quot;&gt;SQL Server 2017, SQLCLR and Permissions&lt;/a&gt; post:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;CLR&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Threading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sql2k17TrustedAsm1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Functions&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fn_clr_Adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fn_clr_LongRunningAdder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LongRunning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LongRunning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7b;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;&amp;#x7d;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;C# Code to Use&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After having compiled the code in &lt;em&gt;Code Snippet 3&lt;/em&gt; we can now try and deploy the assembly to our production database (which is not &lt;code&gt;TRUSTWORTHY&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Assembly Creation&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TrustedAsmDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSEMBLY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sql2k17TrustedAsm&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'W:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;path_to_dll&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Sql2k17TrustedAsm1.dll'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 4:&lt;/strong&gt; &lt;em&gt;Create Assembly&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When executing the code in &lt;em&gt;Code Snippet 4&lt;/em&gt;, you'll get almost the same error message as we initially saw in &lt;a href=&quot;/2017/07/02/sql-server-2017-sqlclr-and-permissions/&quot;&gt;SQL Server 2017, SQLCLR and Permissions&lt;/a&gt;, when we tried an deploy an assembly without the assembly being signed:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql2k17_trust_asms_creation_fail.png&quot; width=&quot;627&quot; height=&quot;190&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Error Deploying Assembly&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The only difference is the last part of the error message: &lt;em&gt;Alternatively, you can trust the assembly using sp_add_trusted_assembly&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;sys.sp_add_trusted_assembly&lt;/h2&gt;

&lt;p&gt;Above we mentioned how &lt;code&gt;sys.sp_add_trusted_assembly&lt;/code&gt; adds an assembly to a list of &quot;trusted&quot; assemblies. We also said that by marking an assembly as trusted, SQL Server will allow it to be loaded when &lt;code&gt;clr strict security&lt;/code&gt; is on, even though the assembly in question is not signed, and the database where you want to deploy it to is not &lt;code&gt;TRUSTWORTHY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How do we use &lt;code&gt;sys.sp_add_trusted_assembly&lt;/code&gt;? Well, the signature looks like this:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Proc. Signature&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sp_add_trusted_assembly&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'description'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 5:&lt;/strong&gt; &lt;em&gt;Signature of sys.sp_add_trusted_assembly&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we see in &lt;em&gt;Code Snippet 5&lt;/em&gt;, the procedure takes two parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@hash&lt;/code&gt; - this is the &lt;code&gt;SHA2_512&lt;/code&gt; hash value of the binary representation of the assembly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@description&lt;/code&gt; - an optional description of the assembly. It is recommended that the description is the same as you would see in the &lt;code&gt;clr_name&lt;/code&gt; column in &lt;code&gt;sys.assemblies&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That seems straightforward enough, grab the binary, hash it and off you go! But wait a second, how do you get the binary representation of the assembly, and how do you hash it?&lt;/p&gt;

&lt;p&gt;Well, there are various way you can get the binary representation; write some C# code that reads out the binary value of the dll, is one way - and then when you have it, you can run some C# code to create the hash.&lt;/p&gt;

&lt;p&gt;Me, I am a lazy guy, and I am a database developer at heart, so I use the database for this, and this is now where that second database in &lt;em&gt;Code Snippet 2&lt;/em&gt; comes in. The &lt;code&gt;DeployDB&lt;/code&gt; which was marked as &lt;code&gt;TRUSTWORTHY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What I do is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create the assembly in the &lt;code&gt;TRUSTWORTHY&lt;/code&gt; database.&lt;/li&gt;
&lt;li&gt;In SQL Server Management Studio's (SSMS) &lt;strong&gt;Object Explorer&lt;/strong&gt; I script out the assembly as &lt;code&gt;CREATE&lt;/code&gt; to the clipboard, or a new query window:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql2k17_trust_asms_binary.png&quot; width=&quot;650&quot; height=&quot;580&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Scripting the Assembly&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Scripting the assembly gives you the &lt;code&gt;CREATE&lt;/code&gt; statement of the assembly based on the binary representation:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Create&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ASSEMBLY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sql2k17TrustedAsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x4D5A90000300000004000000FFFF00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 6:&lt;/strong&gt; &lt;em&gt;Create Assembly from Binary&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Instead of scripting it out, I could have done a &lt;code&gt;SELECT&lt;/code&gt; against the &lt;code&gt;sys.assembly_files&lt;/code&gt; table and the &lt;code&gt;content&lt;/code&gt; column, but I rather do it using the scripting option. I finally grab the &lt;code&gt;clr_name&lt;/code&gt; value from the &lt;code&gt;sys.assemblies&lt;/code&gt; table for the assembly:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql2k17_trust_asms_clr_name.png&quot; width=&quot;650&quot; height=&quot;48&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Clr Name&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Equipped with this I can now add the assembly as a trusted assembly. You may ask how do I get the hash value of the assembly? Fortunately SQL Server has a handy function called &lt;code&gt;HASHBYTES&lt;/code&gt; which looks like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Hashbytes&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;HASHBYTES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;algorithm&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#x7b;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#x7d;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 7:&lt;/strong&gt; &lt;em&gt;T-SQL Hashbytes Function&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The function takes two parameters as you can see from &lt;em&gt;Code Snippet 7&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;'&amp;lt;algorithm&amp;gt;'&lt;/code&gt; - That is the hashing algorithm to use. In our case, &lt;code&gt;sys.sp_add_trusted_assembly&lt;/code&gt; requires &lt;code&gt;SHA2_512&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{@input|'input'}&lt;/code&gt; - This is either a &lt;code&gt;varchar&lt;/code&gt;, &lt;code&gt;nvarchar&lt;/code&gt; or &lt;code&gt;varbinary&lt;/code&gt; variable, (&lt;code&gt;@input&lt;/code&gt;), or an expression that results in a &lt;code&gt;varchar&lt;/code&gt;, &lt;code&gt;nvarchar&lt;/code&gt; or &lt;code&gt;varbinary&lt;/code&gt;, (&lt;code&gt;'input'&lt;/code&gt;). An example of the latter could be a column in a &lt;code&gt;SELECT&lt;/code&gt; statement.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When using the &lt;code&gt;SHA2_512&lt;/code&gt; algorithm, the return value is 64 bytes, and an example of executing it based on the binary value of our assembly looks like this:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;HASHBYTES&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asmBin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varbinary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x4D5A90000300000004000000FFFF00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varbinary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HASHBYTES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SHA2_512'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asmBin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 8:&lt;/strong&gt; &lt;em&gt;Usage of HASHBYTES&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Code Snippet 8&lt;/em&gt; above, the &lt;code&gt;@asmBin&lt;/code&gt; variable is obviously truncated for readability.&lt;/p&gt;

&lt;p&gt;Now, when we have the various pieces of the puzzle we can execute &lt;code&gt;sys.sp_add_trusted_assembly&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Trusted Assembly&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clrName&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nvarchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sql2k17trustedasm1, ...'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asmBin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varbinary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x4D5A90000300000004000000FFFF00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varbinary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HASHBYTES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SHA2_512'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asmBin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp_add_trusted_assembly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clrName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 9:&lt;/strong&gt; &lt;em&gt;Adding Trusted Assembly&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The code in &lt;em&gt;Code Snippet 9&lt;/em&gt; should succeed, and to ensure that is the case you can do: &lt;code&gt;SELECT * FROM sys.trusted_assemblies&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql2k17_trust_asms_trusted_assemblies.png&quot; width=&quot;643&quot; height=&quot;74&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Content of sys.trusted_assemblies&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, everything looks OK. We can now go to the production database where we started this journey and try and deploy the assembly. You can deploy it either using the code in &lt;em&gt;Code Snippet 4&lt;/em&gt;, where it is being deployed from a path, or the code in &lt;em&gt;Code Snippet 6&lt;/em&gt;, using the binary representation. The &lt;code&gt;CREATE ASSEMBLY&lt;/code&gt; should now succeed.&lt;/p&gt;

&lt;p&gt;Having created the assembly, let's create a function against the &lt;code&gt;fn_clr_Adder&lt;/code&gt; method, and then execute the function - just to ensure everything is OK:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Create Function&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_clr_Adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXTERNAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sql2k17TrustedAsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sql2k17TrustedAsm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                   &lt;span class=&quot;n&quot;&gt;fn_clr_Adder&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_clr_Adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 10:&lt;/strong&gt; &lt;em&gt;Create and Test Function&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Running the code in &lt;em&gt;Code Snippet 10&lt;/em&gt; should succeed, and you should get back a result of &lt;code&gt;42&lt;/code&gt;. Just for &quot;fun&quot; you could create a new database, and try and deploy the assembly to that database. That should just work, seeing that &lt;code&gt;sys.sp_add_trusted_assembly&lt;/code&gt; marks the assembly as trusted on the server instance.&lt;/p&gt;

&lt;h4&gt;Permission Sets&lt;/h4&gt;

&lt;p&gt;When we created the assembly from the code above, it was created with the default permission set &lt;code&gt;SAFE&lt;/code&gt;. When you look at the C# code you see how there is a method - &lt;code&gt;fn_clr_LongRunningAdder&lt;/code&gt; - which internally uses a &lt;code&gt;Task&lt;/code&gt;. Using a &lt;code&gt;Task&lt;/code&gt; is not considered &lt;code&gt;SAFE&lt;/code&gt; in any shape or form, so what happens if you create a T-SQL function against that method and then try to execute:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Unsafe&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_clr_LongRunningAdder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXTERNAL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sql2k17TrustedAsm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sql2k17TrustedAsm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                  &lt;span class=&quot;n&quot;&gt;fn_clr_LongRunningAdder&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn_clr_LongRunningAdder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 11:&lt;/strong&gt;  &lt;em&gt;Create and Execute an Unsafe Function&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ouch, the creation of the function succeeded, but when you executed the function you received an error that we also saw in the &lt;a href=&quot;/2017/07/02/sql-server-2017-sqlclr-and-permissions/&quot;&gt;SQL Server 2017, SQLCLR and Permissions&lt;/a&gt; post. The error says something about not having necessary permissions to do the operation. This normally happens if the assembly has not been assigned the correct &lt;code&gt;PERMISSION_SET&lt;/code&gt; when it was created.&lt;/p&gt;

&lt;p&gt;So, if you drop the functions and the assembly, and recreate the assembly with &lt;code&gt;PERMISSION_SET = UNSAFE&lt;/code&gt;, then when you have recreated the functions, all should work.&lt;/p&gt;

&lt;p&gt;The slightly interesting thing with this is that even when you mark an assembly as trusted, it still has to be created with the correct permission set.&lt;/p&gt;

&lt;h2&gt;Dropping a Trusted Assembly&lt;/h2&gt;

&lt;p&gt;As with most database objects, if you can create them - then you can also &lt;code&gt;DROP&lt;/code&gt; them. The question is if you have a trusted assembly, which you have deployed to the database and subsequently created functions etc., against - if you &lt;code&gt;DROP&lt;/code&gt; the trusted assembly, what effect, if any, will it have on the existing assemblies in the various databases on the server? Let's find out.&lt;/p&gt;

&lt;p&gt;To drop a trusted assembly you use the proc &lt;code&gt;sys.sp_drop_trusted_assembly&lt;/code&gt;. The proc takes one parameter, the hash value of the trusted assembly, and in our example the code would look like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Drop&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp_drop_trusted_assembly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xCDFEFD60682FBB0182&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 12:&lt;/strong&gt; &lt;em&gt;Drop Trusted Assembly&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Executing the code in &lt;em&gt;Code Snippet 12&lt;/em&gt; works just fine, and when you look in &lt;code&gt;sys.trusted_assemblies&lt;/code&gt; afterward, your trusted assembly is gone. However, if you check in &lt;code&gt;sys.assemblies&lt;/code&gt; in the database where you deployed the actual assembly to, the assembly still exists. Isn't this now a big security hole? What happens when we execute one of our functions now, &lt;code&gt;SELECT dbo.fn_clr_Adder(21, 21)&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql2k17_trust_asms_no_trust.png&quot; width=&quot;523&quot; height=&quot;256&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;Assembly Not Trusted&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Based on the error message we get, it definitely seems like SQL Server checks whether the assembly is either signed or trusted during execution. So, no security hole.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;/2017/07/02/sql-server-2017-sqlclr-and-permissions/&quot;&gt;SQL Server 2017, SQLCLR and Permissions&lt;/a&gt; post I summarized the new SQL Server 2017 SQLCLR security requirements with: &lt;em&gt;All type of assemblies (&lt;code&gt;SAFE&lt;/code&gt;, &lt;code&gt;EXTERNAL_ACCESS&lt;/code&gt;, &lt;code&gt;UNSAFE&lt;/code&gt;) have to be authorized for &lt;code&gt;UNSAFE&lt;/code&gt; access.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With the release of SQL Server 2017 RC1 there is another option and that is, that the assembly is marked as trusted. You mark an assembly as trusted by the stored procedure &lt;code&gt;sys.sp_add_trusted_assembly&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The security choices you now have for an assembly in SQL Server 2017 are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The database is set to be &lt;code&gt;TRUSTWORTHY&lt;/code&gt;, &lt;em&gt;OR&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The assembly is signed with a certificate that has a corresponding login with &lt;code&gt;UNSAFE ASSEMBLY&lt;/code&gt; permission, &lt;em&gt;OR&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The assembly is signed with an asymmetric key that has a corresponding login with &lt;code&gt;UNSAFE ASSEMBLY&lt;/code&gt; permission, &lt;em&gt;OR&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The assembly is marked as trustworthy by the &lt;code&gt;sys.sp_add_trusted_assembly&lt;/code&gt; procedure.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Marking an assembly as trusted does not mean that you can do whatever you want in the assembly, you still need to deploy the assembly with the correct permission set based on your operations in the assembly.&lt;/p&gt;

&lt;p&gt;I'm finishing this summary with the same caveat as I had in the &lt;a href=&quot;/2017/07/02/sql-server-2017-sqlclr-and-permissions/&quot;&gt;SQL Server 2017, SQLCLR and Permissions&lt;/a&gt; post: Bear in mind that all the above are based on SQL Server 2017 RC1. Things may change up until release.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft SQL Server R Services - Internals VIII</title>
   <link href="http://nielsberglund.com/2017/07/22/microsoft-sql-server-r-services-internals-viii/"/>
   <updated>2017-07-22T08:47:47+02:00</updated>
   <id>http://nielsberglund.com/2017/07/22/microsoft-sql-server-r-services---internals-viii</id>
   <content type="html">&lt;p&gt;This post is part of a series of blog-posts about Microsoft SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Microsoft SQL Server R Services - Internals III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Microsoft SQL Server R Services - Internals IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Microsoft SQL Server R Services - Internals V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Microsoft SQL Server R Services - Internals VI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;Microsoft SQL Server R Services - Internals VII&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server R Services - Internals VIII (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/08/18/microsoft-sql-server-r-services-internals-ix/&quot;&gt;Microsoft SQL Server R Services - Internals IX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This post is the ninth post about Microsoft SQL Server R Services, and the eight post that drills down into the internal of how it works.&lt;/p&gt;

&lt;p&gt;So far in this series we have been looking at what happens in SQL Server as well as the launchpad service when we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;, and we have still no real &quot;clue&quot; to where the R engine comes into play.&lt;/p&gt;

&lt;p&gt;Well, hopefully that will change (at least a little bit) with this post, as we here will look at what happens when we leave the launchpad service.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;Before we dive into the &quot;juicy&quot; stuff, let's remind ourselves where we are.&lt;/p&gt;

&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;Normally in the recaps in this series, we have looked at what was covered in the previous &quot;episode&quot;. In this recap, let's look at he &quot;full&quot; picture up until now.&lt;/p&gt;

&lt;p&gt;The first post in the series - &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt; - covered the installation of SQL Server 2016 R Services, and it also touched upon the external procedure which allows us to execute external scripts; &lt;code&gt;sp_execute_external_script&lt;/code&gt;. We looked at the signature of the procedure as well as executing the equivalent to a &quot;Hello World&quot; script.&lt;/p&gt;

&lt;p&gt;In the subsequent posts we talked about - when executing &lt;code&gt;sp_execute_external_script&lt;/code&gt; - how SQL Server calls into the launchpad service, and how the launchpad service - through the &lt;code&gt;rlauncher.dll&lt;/code&gt; creates multiple &lt;code&gt;Rterm.exe&lt;/code&gt; processes as in &lt;em&gt;Figure 1&lt;/em&gt; below. One of the processes will be used to run the external script:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad-rterm_processes.png&quot; width=&quot;583&quot; height=&quot;100&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Rterm.exe Processes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I addition to creating &lt;code&gt;Rterm.exe&lt;/code&gt; processes, the launchpad service also creates backing directories for those processes. These backing directories are used for saving output, intermediate results etc. The following figure was used to show what the call flow looks like:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql-launchpad_processes_post.png&quot; width=&quot;650&quot; height=&quot;466&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Call Flow Executing sp_execute_external_script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We discussed how the number of processes can be controlled by the &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt; setting in &lt;code&gt;rlauncher.config&lt;/code&gt; file, and how it defaults to 5 if nothing is set.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Internals - VI&lt;/a&gt; we came back to the backing directories, and we realized that in addition to the backing directories created for the Rterm processes, one more directory is created - which will be the &quot;official&quot; working directory for the session, and we showed this using this figure:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_6_launchpad_working_dir.png&quot; width=&quot;650&quot; height=&quot;433&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Launchpad, Directories and Processes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While we were investigating the directories created in &lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Internals - VI&lt;/a&gt; we saw that, while we executed an external script, files and sub-directories were created in the various backing directories:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_outputdir.png&quot; width=&quot;579&quot; height=&quot;139&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Contents Process Directory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 4&lt;/em&gt; we see he content of the directory which is the processing directory, and in &lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;Internals - VII&lt;/a&gt; we looked into what creates those files/directories and what they are for. We came to the conclusion that both the launchpad service (probably through the &lt;code&gt;rlauncher.dll&lt;/code&gt;) created some files, whereas &lt;code&gt;Rterm.exe&lt;/code&gt; created others.&lt;/p&gt;

&lt;p&gt;That's where we are, and now it is time to look at the world outside of the launchpad, and try to figure out what is being used when executing an external script.&lt;/p&gt;

&lt;h2&gt;Rterm.exe&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; we saw how the launchpad service creates Rterm processes, and how the launchpad service calls &lt;code&gt;launchpad!CSQLSatelliteCommunication::SendResumeWithLoginInfo&lt;/code&gt; followed by &lt;code&gt;launchpad!CSQLSatelliteConnection::WriteMessage&lt;/code&gt; to call into the Rterm process chosen for execution of the external script. So what does &lt;code&gt;Rterm.exe&lt;/code&gt; and the RTerm process do?&lt;/p&gt;

&lt;p&gt;To answer that let us first look at what the R &quot;engine&quot; really is, and let's do that by looking at standard CRAN R, and for this I use RStudio as an IDE. So, let's open RStudio and make sure it uses the CRAN R engine:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_rstudio_cran.png&quot; width=&quot;456&quot; height=&quot;85&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;RStudion CRAN R&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At that stage if I check in &lt;strong&gt;Process Explorer&lt;/strong&gt; to see what processes are loaded I see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_rstudio_rsession.png&quot; width=&quot;599&quot; height=&quot;56&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; **&lt;/p&gt;

&lt;p&gt;So in &lt;em&gt;Figure 6&lt;/em&gt; we see how the &lt;code&gt;rstudio.exe&lt;/code&gt; is host for &lt;code&gt;rsession.exe&lt;/code&gt;, which in turn host &lt;code&gt;conhost.exe&lt;/code&gt;. For this discussion &lt;code&gt;conhost.exe&lt;/code&gt; has no real impact, but if you want to know more about it, &lt;a href=&quot;https://blogs.technet.microsoft.com/askperf/2009/10/05/windows-7-windows-server-2008-r2-console-host/&quot;&gt;here&lt;/a&gt; is a good article explaining why we have &lt;code&gt;conhost.exe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Going back to &lt;code&gt;rsession.exe&lt;/code&gt;; in Process Explorer, we look at what dll's it has loaded (click on &lt;code&gt;`rsession.exe&lt;/code&gt; followed by &lt;strong&gt;Ctrl-D&lt;/strong&gt; ) we'll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_rstudio_rsession_dlls1.png&quot; width=&quot;627&quot; height=&quot;128&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; &lt;em&gt;Loaded dll's&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 7&lt;/em&gt; above shows 7 dll's loaded by &lt;code&gt;rsession.exe&lt;/code&gt;, and what is interesting is the second from bottom, which has a path pointing to the R libraries. When we look further down in the list we'll see more dll's from the R libraries:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_rstudio_rsession_rdlls.png&quot; width=&quot;574&quot; height=&quot;81&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;R Dlls&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Among the dll's we see the &lt;code&gt;R.dll&lt;/code&gt;, which is the main dll for R. So, it seems that &lt;code&gt;rsession.exe&lt;/code&gt; acts as a host for the R engine, and the R engine is a &quot;bunch&quot; of dll's.&lt;/p&gt;

&lt;p&gt;Coming back to &lt;code&gt;rterm.exe&lt;/code&gt; and what it is, we can now assume it acts in the same way as &lt;code&gt;rsession.exe&lt;/code&gt;. Let us go back to the code that we used in &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt; when we captured the figure we above in &lt;em&gt;Figure 1&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Script with Pause&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OutputDataSet&amp;lt;-InputDataSet;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                              Sys.sleep(120);'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SELECT 42'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TheAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;Execute with Sys.Sleep&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Like we did in &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Internals - III&lt;/a&gt;, we'll execute the code in &lt;em&gt;Code Snippet 1&lt;/em&gt;, and while the code is running we'll look in Process Explorer and see if we find anything of interest:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;li&gt;Start &lt;em&gt;Process Explorer&lt;/em&gt;, order by Process, and scroll down to where you see process names starting with &quot;RT&quot; (on my box there are none at this stage), or where the processes should be.

&lt;ul&gt;
&lt;li&gt;If you at this stage see RTerm, restart the launchpad service again and kill those processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 1&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;While the code is running, take a quick look in Process Explorer, and you should see something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_rterm_processes.png&quot; width=&quot;644&quot; height=&quot;304&quot;  &gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; &lt;em&gt;RTerm Processes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The difference between &lt;em&gt;Figure 1&lt;/em&gt; and &lt;em&gt;Figure 9&lt;/em&gt;, is that in &lt;em&gt;Figure 1&lt;/em&gt; I had collapsed the Rterm processes. In &lt;em&gt;Figure 9&lt;/em&gt; we see how the launchpad service is host for multiple Rterm processes, and how &lt;code&gt;Rterm.exe&lt;/code&gt; is host for &lt;code&gt;conhost.exe&lt;/code&gt; as well as &lt;code&gt;BxlServer.exe&lt;/code&gt;. We'll come back shortly to what &lt;code&gt;BxlServer.exe&lt;/code&gt; is.&lt;/p&gt;

&lt;p&gt;Let's look a bit closer at what dll's we find for one of the active Rterm processes, click on the Rterm process which has a CPU value, and then click &lt;strong&gt;Ctrl-D&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may have to re-execute the code in &lt;em&gt;Code Snippet 1&lt;/em&gt;, maybe even increase the sleep time to 3 or 4 minutes to be able to see everything.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When I scroll down in the dll list I see some familiar R dll's, that we also saw in &lt;em&gt;Figure 8&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_rterm_dlls.png&quot; width=&quot;649&quot; height=&quot;168&quot;  &gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; &lt;em&gt;Rterm R dll's&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At this stage we can safely say that the &lt;code&gt;Rterm.exe&lt;/code&gt; and its process hosts the R engine. That is cool (yeah I know - I need to get a life), but what does that &lt;code&gt;BxlServer.exe&lt;/code&gt; do in the mix?&lt;/p&gt;

&lt;h2&gt;BxlServer&lt;/h2&gt;

&lt;p&gt;So the question was, what is the &lt;code&gt;BxlServer.exe&lt;/code&gt;? To answer that let's take a step back, and look at the R offerings Microsoft has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft R Open - a Microsoft open source offering of R&lt;/li&gt;
&lt;li&gt;Microsoft R Server - Microsoft's commercial R offering.&lt;/li&gt;
&lt;li&gt;SQL Server R Services - the moral equivalent of Microsoft R Server, but with SQL Server as delivery vehicle.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let's see what happens if we pointed RStudio towards the Microsoft R Open environment:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_rstudio_mro.png&quot; width=&quot;577&quot; height=&quot;294&quot;  &gt;
&lt;strong&gt;Figure 11:&lt;/strong&gt; &lt;em&gt;RStudio Targeting MRO&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Process Explorer&lt;/em&gt;, looking at the rstudio process, it won't look any different than what it did when Rstudio targeted CRAN R as in &lt;em&gt;Figure 6&lt;/em&gt;, so obviously the Microsoft R Open offering does not &quot;know&quot; of the &lt;code&gt;BxlServer.exe&lt;/code&gt; we see in &lt;em&gt;Figure 9&lt;/em&gt;. But, looking at the dll's loaded by &lt;code&gt;rsession.exe&lt;/code&gt;, we see more or less the same as was loaded by &lt;code&gt;rterm.exe&lt;/code&gt; in &lt;em&gt;Figure 10&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_rstudio_mro_dlls.png&quot; width=&quot;594&quot; height=&quot;113&quot;  &gt;
&lt;strong&gt;Figure 12:&lt;/strong&gt; &lt;em&gt;RStudio MRO dll's&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What would happen if RStudio targeted the Microsoft R Server (MRS) instead:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_rstudio_mrs.png&quot; width=&quot;461&quot; height=&quot;314&quot;  &gt;
&lt;strong&gt;Figure 13:&lt;/strong&gt; &lt;em&gt;RStudio Targeting MRS&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This time when looking at the rstudio process we do see &lt;code&gt;BxlServer.exe&lt;/code&gt; as a process hosted by &lt;code&gt;rsession.exe&lt;/code&gt;, so it seems that &lt;code&gt;BxlServer.exe&lt;/code&gt; is specifically for the commercial versions of Microsoft R.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; There is no difference between the &lt;code&gt;BxlServer.exe&lt;/code&gt; in MRS and SQL Server R Services. Well, not much anyway :), in next post we'll see some differences.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;By now you are probably saying something like: &quot;Niels, this is very informative - NOT, get to the point - what is &lt;code&gt;BxlServer.exe&lt;/code&gt;&quot;. OK, so let us see some of the dll's &lt;code&gt;BxlServer.exe&lt;/code&gt; has loaded (click on the &lt;code&gt;BxlServer.exe&lt;/code&gt; process and &lt;strong&gt;Ctrl-D&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_rstudio_bxlserver.png&quot; width=&quot;651&quot; height=&quot;90&quot;  &gt;
&lt;strong&gt;Figure 13:&lt;/strong&gt; &lt;em&gt;BxlServer Loaded dll's&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ooh, that's interesting, look at the path and especially what is in the red rectangle: &lt;code&gt;RevoScaleR&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;RevoScaleR, is an R package providing both High Performance Computing (HPC) and High Performance Analytics (HPA) capabilities for R.  HPC capabilities allow you to distribute the execution of essentially any R function across cores and nodes, and deliver the results back to the user. HPA adds the ability to handle big data in a high performance way. In addition to this (or rather as part of) RevoScaleR also has functionality to handle data access with high performance, and &lt;code&gt;BxlServer.exe&lt;/code&gt; is the host for all this.&lt;/p&gt;

&lt;p&gt;In addition to run the HPC, HPA and data access, &lt;code&gt;BxlServer.exe&lt;/code&gt; also coordinates with the R runtime in order to manage exchanges of data with SQL Server, and it runs most of the R processing. A lot of the coordination and handling of result sets in &lt;code&gt;BxlServer.exe&lt;/code&gt; is handled by a dll loaded by &lt;code&gt;BxlServer.exe&lt;/code&gt;: &lt;code&gt;BxServerLink.dll&lt;/code&gt;. Below we see how the &lt;code&gt;BxServerLink.dll&lt;/code&gt; is loaded by &lt;code&gt;Bxlserver.exe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_rstudio_bxserverlink.png&quot; width=&quot;602&quot; height=&quot;21&quot;  &gt;
&lt;strong&gt;Figure 14:&lt;/strong&gt; &lt;em&gt;BxServerLink Loaded by BxlServer.exe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's go back to &lt;em&gt;Figure 13&lt;/em&gt; , where we see how &lt;code&gt;rsession.exe&lt;/code&gt; hosts &lt;code&gt;BxlServer.exe&lt;/code&gt;. How does that work, I mean - &lt;code&gt;rsession.exe&lt;/code&gt; is a CRAN R executable, and it does not know anything about Microsoft R Services and &lt;code&gt;BxlServer.exe&lt;/code&gt;? The answer is &lt;code&gt;R.dll&lt;/code&gt;; when &lt;code&gt;rsession.exe&lt;/code&gt; loads &lt;code&gt;R.dll&lt;/code&gt; (which is a Microsoft dll), the &lt;code&gt;R.dll&lt;/code&gt; then starts to load other dll's. But, &lt;code&gt;BxlServer.exe&lt;/code&gt; is not a dll, and it runs in a separate process, surely &lt;code&gt;R.dll&lt;/code&gt; cannot do that? No, it cannot - but what it does do is to load a dll acting as a conduit: the &lt;code&gt;RxLink.dll&lt;/code&gt;. The &lt;code&gt;RxLink.dll&lt;/code&gt; creates a new process in where &lt;code&gt;BxlServer.exe&lt;/code&gt; runs, and that is how communication happens between &lt;code&gt;rsession.exe&lt;/code&gt; and &lt;code&gt;BxlServer.exe&lt;/code&gt;. And that is also what happens in SQL Server R Services where &lt;code&gt;Rterm.exe&lt;/code&gt; is the &quot;host&quot;. &lt;code&gt;Rterm.exe&lt;/code&gt; loads the &lt;code&gt;R.dll&lt;/code&gt; which loads &lt;code&gt;RxLink.dll&lt;/code&gt; who then creates a process for &lt;code&gt;BxlServer.exe&lt;/code&gt;, and &lt;code&gt;BxlServer.exe&lt;/code&gt; loads &lt;code&gt;BxLinkServer.dll&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the next Internals post we'll look more at &lt;code&gt;RxLink.dll&lt;/code&gt;, and &lt;code&gt;BxLinkServer.dll&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Finally, let's make sure that &lt;code&gt;BxlServer.exe&lt;/code&gt; actually is doing something when we execute an external script in SQL Server R Services. For that we'll use some code we wrote in &lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Internals V&lt;/a&gt;, where we discussed parallelism:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Setup&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOCOUNT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestParallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_30M&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_30M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RowID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                          &lt;span class=&quot;n&quot;&gt;rand1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='19' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                          &lt;span class=&quot;n&quot;&gt;rand5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='20' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='21' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_30M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='22' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='23' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='24' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='25' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='26' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='27' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHECKSUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NEWID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='28' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='29' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='30' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o3&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='31' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;CROSS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='32' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;GO&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;Setup of Database, Table and Data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The data we create in &lt;em&gt;Code Snippet 2&lt;/em&gt; makes absolutely no sense at all, but it will serve our purposes of have some volume of data to work with, and cause the execution to run for a little while.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Go back to &lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Internals - V&lt;/a&gt; if you are interested in seeing what this code does.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The code we want to execute in SQL Server looks like so:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Execute from SQL Server&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;          &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             #Sys.sleep(30)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             pid &amp;lt;- Sys.getpid()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             r &amp;lt;- rxLinMod(y ~ rand1 + rand2 + rand3 + rand4 + rand5,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                           data=InputDataSet)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt; &lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             coef &amp;lt;- r$coefficients
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;             icept &amp;lt;- coef&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              OutputDataSet &amp;lt;- data.frame(pid=pid, nRows=r$nValidObs,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                          intercept=icept)'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='13' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;       &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_data_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='14' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              SELECT  y, rand1, rand2, rand3,
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='15' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                      rand4, rand5
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='16' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;              FROM dbo.rand_30M'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='17' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercept&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLOAT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='18' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Linear Regression in SQL Server&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To run this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Restart the launchpad service (this is to clean-up any RTerm processes).&lt;/li&gt;
&lt;li&gt;Navigate to the &lt;code&gt;Launchpad.exe&lt;/code&gt; process in &lt;em&gt;Process Explorer&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 3&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;While the code is executing, look in &lt;em&gt;Process Explorer&lt;/em&gt; for RTerm processes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Among the Rterm and BxlServer processes you should see one &lt;code&gt;BxlServer.exe&lt;/code&gt; process that has a CPU value, as well as consuming some memory:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_bxlserver_processing.png&quot; width=&quot;646&quot; height=&quot;66&quot;  &gt;
&lt;strong&gt;Figure 15:&lt;/strong&gt; &lt;em&gt;BxlServer Processing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, as I mentioned above, it is the &lt;code&gt;BxlServer.exe&lt;/code&gt; which is doing he heavy lifting in SQL Server R Services.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post we have now seen what happens when executing &lt;code&gt;sp_execute_external_script&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL Server calls into the launchpad service.&lt;/li&gt;
&lt;li&gt;The launchpad service calls into the &lt;code&gt;Rlauncher.dll&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Rlauncher.dll&lt;/code&gt; creates Rterm processes.&lt;/li&gt;
&lt;li&gt;Through Rterm, the &lt;code&gt;R.dll&lt;/code&gt; is loaded together with &lt;code&gt;RxLink.dll&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;RxLink.dll&lt;/code&gt; creates the &lt;code&gt;BxlServer.exe&lt;/code&gt; process.&lt;/li&gt;
&lt;li&gt;To coordinate with SQL Server, &lt;code&gt;BxlServer.exe&lt;/code&gt; loads &lt;code&gt;BxServerLink.dll&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Below I have tried to describe it in a figure:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_8_arch_overview.png&quot; width=&quot;650&quot; height=&quot;194&quot;  &gt;
&lt;strong&gt;Figure 15:&lt;/strong&gt; &lt;em&gt;BxlServer Processing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice how, in &lt;em&gt;Figure 15&lt;/em&gt;, there is nothing about how data gets back to SQL Server. That is something we will discuss in next post. Oh and yes, &lt;em&gt;Figure 15&lt;/em&gt; looks very much like one of the figures you can see in this &lt;a href=&quot;https://docs.microsoft.com/en-us/sql/advanced-analytics/r/new-components-in-sql-server-to-support-r&quot;&gt;post&lt;/a&gt;, and I freely admit I have looked at it :).&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;If you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 28</title>
   <link href="http://nielsberglund.com/2017/07/16/interesting-stuff-week-28/"/>
   <updated>2017-07-16T20:34:07+02:00</updated>
   <id>http://nielsberglund.com/2017/07/16/interesting-stuff---week-28</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;SQL Server&lt;/h2&gt;

&lt;p&gt;This weeks SQL Server topic, has quite a lot about graph databases. This is an interesting subject seeing SQL Server 2017's built-in graph capability.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/07/07/do-we-need-specialized-graph-databases-benchmarking-real-time-social-networking-applications/&quot;&gt;Do we need specialized graph databases? Benchmarking real-time social networking applications&lt;/a&gt;. In this white paper dissection, &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;Andrew&lt;/a&gt; queries the need for specialized graph databases. Please read and judge for yourselves.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.red-gate.com/simple-talk/sql/t-sql-programming/sql-graph-objects-sql-server-2017-good-bad/&quot;&gt;SQL Graph Objects in SQL Server 2017: the Good and the Bad&lt;/a&gt;. &lt;a href=&quot;https://www.red-gate.com/simple-talk/author/dennes-torres/&quot;&gt;Dennes Torres&lt;/a&gt; has a really great blog-post about the graph capabilities in SQL Server 2017.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlblog.com/blogs/greg_low/archive/2017/07/10/what-s-in-a-name-how-should-sql-server-2017-graph-edge-tables-be-named.aspx&quot;&gt;What’s in a name? How should SQL Server 2017 Graph Edge tables be named?&lt;/a&gt;. Based on the post by Dennes (mentioned above), Greg Low posts some thoughts about naming of edge tables in graph databases.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Shows/Data-Exposed/Setting-up-SQL-Server-High-Availability-between-Windows-and-Linux-with-SQL-Server-2017&quot;&gt;Setting up SQL Server High-Availability between Windows and Linux with SQL Server 2017&lt;/a&gt;. &lt;a href=&quot;https://blogs.msdn.microsoft.com/slavao&quot;&gt;Slava Oks&lt;/a&gt; and &lt;a href=&quot;https://azure.microsoft.com/en-us/blog/author/tobiast/&quot;&gt;Tobias Ternström&lt;/a&gt; (the &quot;SQL Server on Linux&quot; Brothers) talks about how to set up SQL server 2017 for high availability between Linux and Windows.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://data-artisans.com/blog/complex-event-generation-business-process-monitoring-using-apache-flink&quot;&gt;Complex Event Generation for Business Process Monitoring using Apache Flink&lt;/a&gt;. Blog-post about how Apache Flink is being used for Complex Event Processing (CEP).&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;.NET&lt;/h2&gt;

&lt;p&gt;This week I came across two very interesting blogs, that cover the &quot;nitty-gritty&quot; of .NET, and here follows a couple of really interesting posts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://adamsitnik.com/Value-Types-vs-Reference-Types/&quot;&gt;Value Types vs Reference Types&lt;/a&gt;. I certainly hope that every single .NET developer knows about value types and reference types, but I bet that this post by &lt;a href=&quot;http://adamsitnik.com/&quot;&gt;Adam Sitnik&lt;/a&gt; will blow everyones mind away, when he drills deep, deep into value types and reference types!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mattwarren.org&quot;&gt;Memory Usage Inside the CLR&lt;/a&gt;. Another deep, deep drilling post about .NET. This time by &lt;a href=&quot;http://mattwarren.org&quot;&gt;Matthew Warren&lt;/a&gt;, and he goes into details about internal CLR memory! You gotta read it, it is awesome!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://adamsitnik.com/Span/&quot;&gt;Span&lt;/a&gt;. Oooh, this is &quot;sexy&quot;! &lt;a href=&quot;http://adamsitnik.com/&quot;&gt;Adam Sitnik&lt;/a&gt; posts about how to work with both managed and unmanaged memory in ,NET in a safe and efficient way!&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/rserver/2017/07/07/set-up-an-auto-scale-environment-to-operationalize-your-r-analytics-with-just-one-click/&quot;&gt;Set up an auto-scale environment to operationalize your R analytics, with just ONE CLICK&lt;/a&gt;. How to set up an auto-scale environment for operationalization of R analytics using Azure and Microsoft R Server.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;Microsoft SQL Server R Services - Internals VII&lt;/a&gt;. I finally managed to get the &lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;Internals - VII&lt;/a&gt; post out there! I do apologize it took so long. Anyway, here we look at what files and sub-directories are created - and by whom - when executing an external R script.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am busy working on &lt;em&gt;Microsoft SQL Server R Services - Internals VIII&lt;/em&gt;, and hopefully it won't take as long as &lt;a href=&quot;/2017/07/11/microsoft-sql-server-r-services-internals-vii/&quot;&gt;VII&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Microsoft SQL Server R Services - Internals VII</title>
   <link href="http://nielsberglund.com/2017/07/11/microsoft-sql-server-r-services-internals-vii/"/>
   <updated>2017-07-11T20:08:13+02:00</updated>
   <id>http://nielsberglund.com/2017/07/11/microsoft-sql-server-r-services---internals-vii</id>
   <content type="html">&lt;p&gt;(WOW, I finally managed to get this post out! Yay to me!!)&lt;/p&gt;

&lt;p&gt;This post is part of a series of blog-posts about Microsoft SQL Server R Services:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;Microsoft SQL Server 2016 R Services Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/03/18/microsoft-sql-server-r-services-internals-i/&quot;&gt;Microsoft SQL Server R Services - Internals I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;Microsoft SQL Server R Services - Internals II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;Microsoft SQL Server R Services - Internals III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;Microsoft SQL Server R Services - Internals IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;Microsoft SQL Server R Services - Internals V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Microsoft SQL Server R Services - Internals VI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft SQL Server R Services - Internals VII (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/07/22/microsoft-sql-server-r-services-internals-viii/&quot;&gt;Microsoft SQL Server R Services - Internals VIII&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2017/08/18/microsoft-sql-server-r-services-internals-ix/&quot;&gt;Microsoft SQL Server R Services - Internals IX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More to come (hopefully)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This post is the eighth post about Microsoft SQL Server R Services, and the seventh post that drills down into the internal of how it works. In this post we will look more at some of the directories that are created when we execute &lt;code&gt;sp_execute_external_script&lt;/code&gt;, as well as files being created in those directories.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;In previous posts(&lt;a href=&quot;/2017/04/02/microsoft-sql-server-r-services-internals-ii/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;/2017/04/13/microsoft-sql-server-r-services-internals-iii/&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;/2017/04/23/microsoft-sql-server-r-services-internals-iv/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;/2017/05/01/microsoft-sql-server-r-services-internals-v/&quot;&gt;here&lt;/a&gt;) we have talked about how the launchpad service creates a number of &lt;strong&gt;RTerm&lt;/strong&gt; processes when we execute an &lt;code&gt;sp_execute_external_script&lt;/code&gt; request. The number of processes are configurable by the &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt; setting in the &lt;code&gt;rlauncher.config&lt;/code&gt; file, and by default 5 processes are created. These processes are added to a process pool, and when executing subsequent requests, or concurrent requests from different sessions, processes are picked up from the pool and used. At the same time new processes are created and added to the pool.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Microsoft SQL Server R Services - Internals VI&lt;/a&gt; post we talked about the directories that are created when executing &lt;code&gt;sp_execute_external_script&lt;/code&gt;. We saw, when we execute the script, how (with a default &lt;code&gt;PROCESS_POOL_SQLSATELLITE_GROWTH&lt;/code&gt; setting):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Three directories are created initially, the first one being the directory for the session - this is the R working directory.&lt;/li&gt;
&lt;li&gt;Then two processes, which will use the second and third directory.&lt;/li&gt;
&lt;li&gt;Then one directory followed by one process, until we're done.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;From the above we understand that each process has a backing directory, and in the &lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;post&lt;/a&gt; we saw how the various directories had some files and sub-directories inside, as in &lt;em&gt;Figure 1 below&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_6_dir_content.png&quot; width=&quot;291&quot; height=&quot;118&quot;  &gt;
&lt;strong&gt;Figure 1:&lt;/strong&gt; &lt;em&gt;Directory Content&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The figure above is from the &lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Internals - VI&lt;/a&gt; post. In that post we could not really determine where the sub-directories came from. So in this post let us figure out what the created files are for, and from where the sub-directories originate (or at least let us try to figure it out).&lt;/p&gt;

&lt;h2&gt;Files&lt;/h2&gt;

&lt;p&gt;In various documentation of SQL Server R Services it is stated that the directories created during execution of &lt;code&gt;sp_execute_external_script&lt;/code&gt; is to store files, intermediate results etc. We will run some code to see what files are created, but before that let's set things up to make life somewhat easier for us:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Delete any sub directories of the user account directories in the &lt;code&gt;C:\&amp;lt;sql_instance_path&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do NOT delete the user account directories themselves.&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;rlauncher.config&lt;/code&gt; file in a text editor and change the value of &lt;code&gt;JOB_CLEANUP_ON_EXIT&lt;/code&gt; to 0, and save the file (you need to do this as admin).&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;/ol&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; By setting the &lt;code&gt;JOB_CLEANUP_ON_EXIT&lt;/code&gt; to 0 we tell the launchpad service to not delete any directories etc., after we have executed (the executing process will still be torn down though).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The code we initially want to run is similar to what we ran in &lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Internals - VI&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Code&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;EXEC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp_execute_external_script&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;language&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 pid &amp;lt;- Sys.getpid()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 d &amp;lt;- getwd()
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 cat(paste0(&quot;ProcessId: &quot;, pid))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 cat(paste0(&quot;WorkDir: &quot;, d))
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 cat(&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;)
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                 OutputDataSet&amp;lt;-data.frame(ProcessId=pid,WorkingDir=d)'&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;RESULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WorkingDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nvarchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 1:&lt;/strong&gt; &lt;em&gt;External Script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you see in &lt;em&gt;Code Snippet 1&lt;/em&gt;, the R script captures information about the process id we execute under as well as the working directory. It uses the &lt;code&gt;cat&lt;/code&gt; function to output the data, the question is where it outputs it to? Normally &lt;code&gt;cat&lt;/code&gt; would output to the standard output connection, the console, if no file name has been given as argument. So let us see what happens when we execute the code.&lt;/p&gt;

&lt;p&gt;In SQL Server Management Studio (SSMS) - under the &lt;em&gt;Results&lt;/em&gt; tab, I get the returning result set containing the process id as well as the working directory path. Under the &lt;em&gt;Messages&lt;/em&gt; tab I get something like what is shown in &lt;em&gt;Figure 2&lt;/em&gt; below:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_output1.png&quot; width=&quot;443&quot; height=&quot;122&quot;  &gt;
&lt;strong&gt;Figure 2:&lt;/strong&gt; &lt;em&gt;Output from R Script&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So that is the result from the &lt;code&gt;cat&lt;/code&gt; function. This makes sense as we can see the &lt;em&gt;Messages&lt;/em&gt; tab as something like a console. But is the output from &lt;code&gt;cat&lt;/code&gt; anywhere else? Let's go and have a look in the user account directory in &lt;code&gt;C:\&amp;lt;sql_instance_path&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt;, and the specific account used when executing the script. It is most likely &lt;em&gt;MSSQLSERVER01&lt;/em&gt; if you execute from a default instance, but if you are unsure you can have a look at the output from the script and the value for the working directory. Just before the &lt;code&gt;Guid&lt;/code&gt; value is the name of the account used.&lt;/p&gt;

&lt;p&gt;When we look under the user account directory, we'll see multiple directories, all with a &lt;code&gt;Guid&lt;/code&gt; like string as name. As we covered in previous posts, these directories are the backing directories for the processes created. When you look through these directories you'll see (as we said in &lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Internals VI&lt;/a&gt;), that most of the directories look the same; they have one subdirectory and 3 files. There are however two directories that are somewhat different; one is empty, and that is the working directory, and one that has four files in it. The one directory with four files in it is the directory for the process the code executed under (I call it process directory), and when you look in that directory you see something like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_outputdir.png&quot; width=&quot;579&quot; height=&quot;139&quot;  &gt;
&lt;strong&gt;Figure 3:&lt;/strong&gt; &lt;em&gt;Contents Process Directory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you see in &lt;em&gt;Figure 3&lt;/em&gt; there are two &lt;code&gt;.txt&lt;/code&gt; files in the directory, and we can see (from the Size), that it looks like the &lt;code&gt;stdout0.txt&lt;/code&gt; has some content. When you open the &lt;code&gt;stdout0.txt&lt;/code&gt; file you see how it contains the output from the &lt;code&gt;cat&lt;/code&gt; calls in the script. If there had been errors during script execution, the errors would have been written to the &lt;code&gt;stderr0.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;OK, so that is the &lt;code&gt;stdout.txt&lt;/code&gt; and `stderr.txt files - what about the other two files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;7F73C367-0684-4B89-9DA7-86BEEA362FD2.R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rscriptae84173870&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The filenames above are what I see on my machine. If you run this, your filenames will most definitely be different.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let's start with the R file, which looks something like so (paths made short):&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;title &quot;R File&quot;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RevoScaleR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;rxIgnoreResult&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'RxSqlSatelliteCall'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;          &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1C49FD9B-BA79-4C1E-993B-E04669259CD8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;               &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taskId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;               &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;51318&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;               &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;               &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DataSet1_1Col_Int_1Row'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;               &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlSatellitePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'C:\&amp;lt;sql_inst_binn_path&amp;gt;\
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                                  sqlsatellite.dll'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;               &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorToStdError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 2:&lt;/strong&gt; &lt;em&gt;R File Set Up Satellite Connection&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This file only exists in the process directory, and the file is used to establish a named pipe connection with the SQL Satellite (we'll cover SQL Satellite in future posts). As we see in &lt;em&gt;Code Snippet 2&lt;/em&gt;, the script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loads the &lt;code&gt;RevoScaleR&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;Executes the &lt;code&gt;.Call&lt;/code&gt; function to call into a method named &lt;code&gt;RxSqlSatelliteCall&lt;/code&gt;, and sends in some arguments for that method.&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;.Call&lt;/code&gt; function in R is used to call into C/C++ code.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The arguments sent in to the method are for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What port to use for then named pipe connection.&lt;/li&gt;
&lt;li&gt;Name of the named pipe.&lt;/li&gt;
&lt;li&gt;The path to where the SQL Satellite is.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What uses this file? Well, take a look at the &lt;code&gt;Rscriptae84173870&lt;/code&gt; file, it looks something like so (once again paths shortened):&lt;/p&gt;

&lt;p&gt;&lt;figure class='code-highlight-figure'&gt;&lt;figcaption class='code-highlight-caption'&gt;&lt;span class='code-highlight-caption-title'&gt;Session&lt;/span&gt;&lt;/figcaption&gt;&lt;div class='code-highlight'&gt;&lt;pre class='code-highlight-pre'&gt;&lt;div data-line='1' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RevoScaleR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='2' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sessionDirectory&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='3' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;s1&quot;&gt;'C:\&amp;lt;sql_inst_ext_data_path&amp;gt;\
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='4' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;     MSSQLSERVER01\7F73C367-0684-4B89-9DA7-86BEEA362FD2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='5' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;sessionId&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'7F73C367-0684-4B89-9DA7-86BEEA362FD2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='6' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;scriptFile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file.path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='7' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.R'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='8' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;rxIgnoreCallResult&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.Call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'RxSqlSessionStart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='9' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                   &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='10' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='11' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;                        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/div&gt;&lt;/div&gt;&lt;div data-line='12' class='code-highlight-row numbered'&gt;&lt;div class='code-highlight-line'&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scriptFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Snippet 3:&lt;/strong&gt; &lt;em&gt;Session Start&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ah, looking at the code in &lt;em&gt;Code Snippet 3&lt;/em&gt;, we see how that code actually:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loads the &lt;code&gt;RevoScaleR&lt;/code&gt; package.&lt;/li&gt;
&lt;li&gt;Defines the directory for the executing process&lt;/li&gt;
&lt;li&gt;Creates a &lt;code&gt;scriptFile&lt;/code&gt; argument, pointing to the file in &lt;em&gt;Code Snippet 2&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Starts the process.&lt;/li&gt;
&lt;li&gt;Calls the file from &lt;em&gt;Code Snippet 2&lt;/em&gt; in the &lt;code&gt;source&lt;/code&gt; call.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The result of the code in &lt;em&gt;Code Snippet 2&lt;/em&gt; and &lt;em&gt;Code Snippet 3&lt;/em&gt; is that after execution a named pipe connection has been made to the SQL Satellite dll, and as I said above - we'll cover the SQL Satellite in a subsequent blog-post.&lt;/p&gt;

&lt;h2&gt;Files &amp;amp; Sub-directory Origins&lt;/h2&gt;

&lt;p&gt;Above we saw (at least kind of), what the files inside the process directory do. What about the sub directory that exist in all backing directories, what does that do, and where does it come from? Remember from the &lt;a href=&quot;/2017/05/16/microsoft-sql-server-r-services-internals-vi/&quot;&gt;Internals - VI&lt;/a&gt; post that we said that when we were using &lt;strong&gt;WinDbg&lt;/strong&gt; and had break point at &lt;code&gt;KERNELBASE!CreateDirectoryW&lt;/code&gt; we couldn't see the sub-directory being created.&lt;/p&gt;

&lt;p&gt;There is also a question about who is creating the files that we have just discussed. The obvious answer would be that it is the launchpad service together with the &lt;code&gt;rlauncher.dll&lt;/code&gt; that create the files. Let's try and prove that.&lt;/p&gt;

&lt;p&gt;So, to set things up:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the launchpad service.&lt;/li&gt;
&lt;li&gt;Delete any sub directories of the user account directories in the &lt;code&gt;C:\&amp;lt;sql_instance_path&amp;gt;\MSSQL\ExtensibilityData&lt;/code&gt; directory. Do NOT delete the user account directories themselves.&lt;/li&gt;
&lt;li&gt;Restart the launchpad service.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This time we will use &lt;a href=&quot;https://technet.microsoft.com/en-us/sysinternals/processmonitor.aspx&quot;&gt;&lt;em&gt;Process Monitor&lt;/em&gt;&lt;/a&gt; from &lt;strong&gt;Sysinternals&lt;/strong&gt; instead of WinDbg, as it will be easier to see what files (and directories) are created and by whom.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Process Monitor is an advanced monitoring tool for Windows that shows real-time file system, Registry and process/thread activity.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When you run Process Monitor you will see that it monitors (and logs) a LOT on the machine you run it on:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_procmon1.png&quot; width=&quot;596&quot; height=&quot;479&quot;  &gt;
&lt;strong&gt;Figure 4:&lt;/strong&gt; &lt;em&gt;Process Monitor Start Up&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 4&lt;/em&gt; you see output from Process Monitor right after startup on my machine. In order to get something useful out of what we see, we need to filter out events, or rather say what events we are interested in. We'll start with suppressing event monitoring to begin with, as well as not choosing to see events of certain types:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_procmon2.png&quot; width=&quot;423&quot; height=&quot;87&quot;  &gt;
&lt;strong&gt;Figure 5:&lt;/strong&gt; &lt;em&gt;Suppress Event Collection&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 5&lt;/em&gt; we see the tool-bar of Process Monitor, and how we have paused capturing of events by clicking on the magnifying glass (in the first outlined box). We also have chosen not to receive any events related to registry, network and profiling activity (the second outlined box).&lt;/p&gt;

&lt;p&gt;Now we are ready to start to define the events we are interested in, and we do that using the &lt;em&gt;Filter&lt;/em&gt; menu. We start with resetting the filters:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_procmon_reset_filter.png&quot; width=&quot;380&quot; height=&quot;262&quot;  &gt;
&lt;strong&gt;Figure 6:&lt;/strong&gt; &lt;em&gt;Reset Process Monitor's Filters&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you reset the filters, sometimes event capturing will be enabled again. If it is, just disable it once more. Now is probably a good time to clear out the captured events at startup, so under the &lt;em&gt;Edit&lt;/em&gt; menu click &lt;em&gt;Clear Display&lt;/em&gt;. Having reset the filters and cleared out the display, we can now create a filter to use, to capture the events we are interested in. So, what are we interested in?&lt;/p&gt;

&lt;p&gt;Well, we would like to see what files are being created under the subdirectories of the user account you will execute your R script under. For me it is: &lt;code&gt;C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\ExtensibilityData\MSSQLSERVER01&lt;/code&gt;, and this will be the starting point for a filter to filter out events.&lt;/p&gt;

&lt;p&gt;To create a filter, under the &lt;em&gt;Filter&lt;/em&gt; menu click the Filter menu item, and the &quot;Process Monitor Filter&quot; dialog will be shown:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_procmon_filter_dialog.png&quot; width=&quot;594&quot; height=&quot;239&quot;  &gt;
&lt;strong&gt;Figure 7:&lt;/strong&gt; &lt;em&gt;Process Monitor Filter Dialog&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To create the filter we enter the conditions we want to match:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;Path&lt;/em&gt; (from first drop down) should &lt;em&gt;begins with&lt;/em&gt; (from second drop down): &lt;code&gt;C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\ExtensibilityData\MSSQLSERVER01&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Operation&lt;/em&gt; (first drop down) &lt;em&gt;is&lt;/em&gt; (second drop down): &lt;code&gt;CreateFile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Both of those conditions should be &lt;em&gt;Include&lt;/em&gt;:ed and &lt;em&gt;Add&lt;/em&gt;:ed. At the end the filter looks like so:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_procmon_filter_create.png&quot; width=&quot;650&quot; height=&quot;165&quot;  &gt;
&lt;strong&gt;Figure 8:&lt;/strong&gt; &lt;em&gt;Filter Created&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You click &lt;em&gt;OK&lt;/em&gt;, and you are ready to roll:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Re-enable capturing of events in Process Monitor&lt;/li&gt;
&lt;li&gt;Execute the code in &lt;em&gt;Code Snippet 2&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;After executing the code, disable the capturing of events again in Process Monitor&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Process Monitor now shows quite a few events:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_procmon_capured_events.png&quot; width=&quot;576&quot; height=&quot;380&quot;  &gt;
&lt;strong&gt;Figure 9:&lt;/strong&gt; &lt;em&gt;Captured Create File Events&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's go back to the user account and find the backing directory for the process, as - at the moment - we are only interested in what happens in that directory. In my case it is &lt;code&gt;1EB243A4-AE41-4DBD-A315-44B52EECF4B9&lt;/code&gt;. To make it easier to see what happens in Process Monitor, we can change the filter somewhat:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the &lt;em&gt;Path&lt;/em&gt; column in Process Monitor right click on the first occurrence of the path including the process directory, and click &lt;em&gt;Copy&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_procmon_find_path.png&quot; width=&quot;650&quot; height=&quot;323&quot;  &gt;
&lt;strong&gt;Figure 10:&lt;/strong&gt; &lt;em&gt;Copying the Path&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then open the Filter dialog and:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove the filter condition for the &lt;em&gt;Path&lt;/em&gt;. That will cause the condition to be entered into the condition fields:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_procmon_remove_filter.png&quot; width=&quot;650&quot; height=&quot;181&quot;  &gt;
&lt;strong&gt;Figure 11:&lt;/strong&gt; &lt;em&gt;After Remove Condition&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the conditions field enter the path to your process directory (the one you copied above).&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Add&lt;/em&gt;, &lt;em&gt;Apply&lt;/em&gt;, and &lt;em&gt;OK&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The number of events displayed should now have been reduced significantly. For me it went from 265 events captured to 53.&lt;/p&gt;

&lt;p&gt;Now we can see how the launchpad service creates the &lt;code&gt;stdout0.txt&lt;/code&gt;, and &lt;code&gt;stderr0.txt&lt;/code&gt; files together with the &lt;code&gt;.R&lt;/code&gt; file (the image is cropped):&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_procmon_launchpad_create_file2.png&quot; width=&quot;650&quot; height=&quot;65&quot;  &gt;
&lt;strong&gt;Figure 12:&lt;/strong&gt; **&lt;/p&gt;

&lt;p&gt;However, the &lt;code&gt;Rscriptxxx&lt;/code&gt; file is not created by the launchpad service, but by &lt;code&gt;RTerm.exe&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;center&quot; src=&quot;/images/posts/sql_r_services_7_procmon_rterm.png&quot; width=&quot;558&quot; height=&quot;80&quot;  &gt;
&lt;strong&gt;Figure 13:&lt;/strong&gt; &lt;em&gt;RTerm Creating Files and Directories&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Figure 13&lt;/em&gt; we also see how - in addition to the Rscript file - a directory &lt;code&gt;Rtmp0AHI82&lt;/code&gt; is created, and inside that directory a file &lt;code&gt;file5f446ae7ae6&lt;/code&gt; is created. That particular file is not persisted regardless of the setting of &lt;code&gt;JOB_CLEANUP_ON_EXIT&lt;/code&gt;. I have not been able to figure out - yet - what that file contains, so if anyone out there knows, please let me know.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post we have seen how:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Output from R script (errors and print) are written to files in the processing directory by the launchpad service.&lt;/li&gt;
&lt;li&gt;The launchpad service also writes a script to establish a named piped connection to the SQL Satellite dll.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Rterm.exe&lt;/code&gt; writes a script that starts a session, and &lt;code&gt;source&lt;/code&gt;:s the script file mentioned above.&lt;/li&gt;
&lt;li&gt;In addition to the session script, &lt;code&gt;Rterm.exe&lt;/code&gt; also creates a sub directory together with a file. The file is not persisted.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;First of all, if you have any insight in the files &lt;code&gt;Rterm.exe&lt;/code&gt; creates, please get in touch! Otherwise, if you have comments, questions etc., please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Interesting Stuff - Week 27</title>
   <link href="http://nielsberglund.com/2017/07/09/interesting-stuff-week-27/"/>
   <updated>2017-07-09T19:15:08+02:00</updated>
   <id>http://nielsberglund.com/2017/07/09/interesting-stuff---week-27</id>
   <content type="html">&lt;p&gt;Throughout the week, I read a lot of blog-posts, articles, etc., that has to do with things that interest me&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data science&lt;/li&gt;
&lt;li&gt;data in general&lt;/li&gt;
&lt;li&gt;distributed computing&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;transactions (both db as well as non db)&lt;/li&gt;
&lt;li&gt;and other &quot;stuff&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is the &quot;roundup&quot; of the posts that has been most interesting to me, for the week just gone by.&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;.NET&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/high-performance-dotnet&quot;&gt;Virtual Panel: High Performance Application in .NET&lt;/a&gt;. An &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; panel discussion about performance in .NET. It's a very interesting read and it led me to the item below.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2017/06/07/performance-improvements-in-net-core/&quot;&gt;Performance Improvements in .NET Core&lt;/a&gt;. As the name says, a look at performance improvements in .NET Core. Having read this post as well as the post above, I'll make sure we'll start to look into .NET Core at &lt;a href=&quot;/derivco&quot;&gt;Derivco&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@jaykreps/exactly-once-support-in-apache-kafka-55e1fdd0a35f&quot;&gt;Exactly-once Support in Apache Kafka&lt;/a&gt;. Woooo! This is so cool! A post about exactly-once support in Apache Kafka. I know I have said this before, but ... now we &lt;strong&gt;REALLY&lt;/strong&gt; need to start looking at Kafka.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Cloud&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/07/04/azure-data-lake-store-a-hyperscale-distributed-file-service-for-big-data-analytics/&quot;&gt;Azure Data Lake Store: a hyperscale distributed file service for big data analytics&lt;/a&gt;. &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;Andrew&lt;/a&gt; takes a deep, deep look into the plumbing of Azure Data Lake.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/07/03/spanner-becoming-a-sql-system/&quot;&gt;Spanner: becoming a SQL system&lt;/a&gt;. Another post by &lt;a href=&quot;https://blog.acolyer.org&quot;&gt;Andrew&lt;/a&gt;. Here he looks into how Google's Spanner becomes more SQL like.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/cosmos-db/change-feed&quot;&gt;Working with the change feed support in Azure Cosmos DB&lt;/a&gt;. The Azure Cosmos DB, becomes more and more &quot;juicy&quot;! This is how it supports a real-time feed of changes: the Change Feed Support.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Science&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/tensorflow-concepts&quot;&gt;In Depth TensorFlow&lt;/a&gt;. An &lt;a href=&quot;https://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; presentation about Google's Tensorflow by one of the developers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://buckwoody.wordpress.com/2017/07/06/quick-start-for-data-science/&quot;&gt;Quick Start for Data Science&lt;/a&gt;. &lt;a href=&quot;https://buckwoody.wordpress.com&quot;&gt;Buck Woody&lt;/a&gt; posts a quick introduction to Data Science. A must read for any &quot;budding&quot; data scientist out there.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;SQL Server R Services&lt;/h2&gt;

&lt;p&gt;I know, I know, I know - I have said this before, but I am nearly finished with part 7 of my &lt;a href=&quot;/2017/03/04/microsoft-sql-server-2016-r-services-installation/&quot;&gt;SQL Server R Services&lt;/a&gt; series. I have had a severe case of writers block for part 7, but 80% of it is done now. I promise!!&lt;/p&gt;

&lt;h2&gt;~ Finally&lt;/h2&gt;

&lt;p&gt;That's all for this week. I hope you enjoy what I did put together. If you have ideas for what to cover, please comment on this post or &lt;a href=&quot;mailto:niels.it.berglund@gmail.com&quot;&gt;ping&lt;/a&gt; me.&lt;/p&gt;
</content>
 </entry>
 

</feed>
